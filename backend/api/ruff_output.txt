warning: The top-level linter settings are deprecated in favour of their counterparts in the `lint` section. Please update the following options in `pyproject.toml`:
  - 'ignore' -> 'lint.ignore'
  - 'select' -> 'lint.select'
W292 [*] No newline at end of file
 --> src/api/__init__.py:8:13
  |
6 | # from .routes.monte_carlo import monte_carlo_router
7 |
8 | __all__ = []
  |             ^
  |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/api/main.py:1:1
   |
 1 | / from fastapi import FastAPI, Request
 2 | | from fastapi import responses
 3 | | from sqlalchemy import text
 4 | | from fastapi.middleware.cors import CORSMiddleware
 5 | | from fastapi.responses import JSONResponse
 6 | | import logging
 7 | | import time
 8 | | from datetime import datetime, UTC
 9 | | from core.logging import setup_logging, REQUEST_ID
10 | | from contextlib import asynccontextmanager
11 | | from dotenv import load_dotenv
   | |______________________________^
12 |
13 |   # Load environment variables from .env file
   |
help: Organize imports

E402 Module level import not at top of file
  --> src/api/main.py:16:1
   |
14 | load_dotenv()
15 |
16 | from api.routers.auth import router as auth_router
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 | from api.routers.backtest import router as backtest_router
18 | from api.routes.performance import router as performance_router
   |

I001 [*] Import block is un-sorted or un-formatted
  --> src/api/main.py:16:1
   |
14 |   load_dotenv()
15 |
16 | / from api.routers.auth import router as auth_router
17 | | from api.routers.backtest import router as backtest_router
18 | | from api.routes.performance import router as performance_router
19 | | from api.routes.monte_carlo import router as monte_carlo_router
20 | | from infrastructure.db import init_db, engine
21 | | from infrastructure.monitoring import monitoring_service
22 | | from infrastructure.cache import cache_manager
   | |______________________________________________^
23 |
24 |   # log
   |
help: Organize imports

E402 Module level import not at top of file
  --> src/api/main.py:17:1
   |
16 | from api.routers.auth import router as auth_router
17 | from api.routers.backtest import router as backtest_router
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 | from api.routes.performance import router as performance_router
19 | from api.routes.monte_carlo import router as monte_carlo_router
   |

E402 Module level import not at top of file
  --> src/api/main.py:18:1
   |
16 | from api.routers.auth import router as auth_router
17 | from api.routers.backtest import router as backtest_router
18 | from api.routes.performance import router as performance_router
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 | from api.routes.monte_carlo import router as monte_carlo_router
20 | from infrastructure.db import init_db, engine
   |

E402 Module level import not at top of file
  --> src/api/main.py:19:1
   |
17 | from api.routers.backtest import router as backtest_router
18 | from api.routes.performance import router as performance_router
19 | from api.routes.monte_carlo import router as monte_carlo_router
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
20 | from infrastructure.db import init_db, engine
21 | from infrastructure.monitoring import monitoring_service
   |

E402 Module level import not at top of file
  --> src/api/main.py:20:1
   |
18 | from api.routes.performance import router as performance_router
19 | from api.routes.monte_carlo import router as monte_carlo_router
20 | from infrastructure.db import init_db, engine
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 | from infrastructure.monitoring import monitoring_service
22 | from infrastructure.cache import cache_manager
   |

E402 Module level import not at top of file
  --> src/api/main.py:21:1
   |
19 | from api.routes.monte_carlo import router as monte_carlo_router
20 | from infrastructure.db import init_db, engine
21 | from infrastructure.monitoring import monitoring_service
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 | from infrastructure.cache import cache_manager
   |

E402 Module level import not at top of file
  --> src/api/main.py:22:1
   |
20 | from infrastructure.db import init_db, engine
21 | from infrastructure.monitoring import monitoring_service
22 | from infrastructure.cache import cache_manager
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 |
24 | # log
   |

W293 [*] Blank line contains whitespace
  --> src/api/main.py:32:1
   |
30 |     logging.getLogger("app").info("Startup")
31 |     await init_db()
32 |     
   | ^^^^
33 |     # Initialize cache manager
34 |     await cache_manager.connect()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/api/main.py:35:1
   |
33 |     # Initialize cache manager
34 |     await cache_manager.connect()
35 |     
   | ^^^^
36 |     # Register database health check
37 |     def db_health_check():
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/api/main.py:45:1
   |
43 |         except Exception as e:
44 |             return "unhealthy", f"Database connection failed: {str(e)}", {"error": str(e)}
45 |     
   | ^^^^
46 |     monitoring_service.register_health_check("database", db_health_check)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/api/main.py:47:1
   |
46 |     monitoring_service.register_health_check("database", db_health_check)
47 |     
   | ^^^^
48 |     yield
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/api/main.py:49:1
   |
48 |     yield
49 |     
   | ^^^^
50 |     # Cleanup on shutdown
51 |     await cache_manager.disconnect()
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> src/api/main.py:71:23
   |
69 |     # Record error metric
70 |     await monitoring_service.increment_counter(
71 |         "http_errors", 
   |                       ^
72 |         tags={"error_type": "ValueError", "path": request.url.path}
73 |     )
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> src/api/main.py:74:1
   |
72 |         tags={"error_type": "ValueError", "path": request.url.path}
73 |     )
74 |     
   | ^^^^
75 |     logging.getLogger("http").warning(
76 |         "Service error",
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/main.py:102:1
    |
100 |     token = REQUEST_ID.set(req_id)
101 |     start = time.monotonic()
102 |     
    | ^^^^
103 |     # Enhanced structured logging with more context
104 |     logger.info(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/main.py:117:1
    |
115 |         },
116 |     )
117 |     
    | ^^^^
118 |     response = await call_next(request)
119 |     duration_ms = round((time.monotonic() - start) * 1000, 2)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/main.py:120:1
    |
118 |     response = await call_next(request)
119 |     duration_ms = round((time.monotonic() - start) * 1000, 2)
120 |     
    | ^^^^
121 |     # Record timing metrics
122 |     await monitoring_service.record_timing(
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/api/main.py:123:33
    |
121 |     # Record timing metrics
122 |     await monitoring_service.record_timing(
123 |         "http_request_duration", 
    |                                 ^
124 |         duration_ms, 
125 |         tags={
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/api/main.py:124:21
    |
122 |     await monitoring_service.record_timing(
123 |         "http_request_duration", 
124 |         duration_ms, 
    |                     ^
125 |         tags={
126 |             "method": request.method,
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/api/main.py:131:1
    |
129 |         }
130 |     )
131 |     
    | ^^^^
132 |     # Enhanced response logging
133 |     logger.info(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/main.py:144:1
    |
142 |         },
143 |     )
144 |     
    | ^^^^
145 |     # Expose request id to clients
146 |     try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/main.py:171:1
    |
169 |     try:
170 |         health_status = await monitoring_service.get_health_status()
171 |         
    | ^^^^^^^^
172 |         # Determine HTTP status code based on overall health
173 |         status_code = 200
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/main.py:178:1
    |
176 |         elif health_status["overall_status"] == "warning":
177 |             status_code = 200  # Still operational but with warnings
178 |         
    | ^^^^^^^^
179 |         return JSONResponse(
180 |             status_code=status_code,
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/api/main.py:202:27
    |
200 |             await conn.execute(text("SELECT 1"))
201 |         return {
202 |             "ready": True, 
    |                           ^
203 |             "timestamp": datetime.now(UTC).isoformat(),
204 |             "database": "connected"
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/api/main.py:209:29
    |
207 |         logging.getLogger("app").error(f"Readiness check failed: {str(e)}")
208 |         return responses.JSONResponse(
209 |             status_code=503, 
    |                             ^
210 |             content={
211 |                 "ready": False, 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/api/main.py:211:32
    |
209 |             status_code=503, 
210 |             content={
211 |                 "ready": False, 
    |                                ^
212 |                 "timestamp": datetime.now(UTC).isoformat(),
213 |                 "database": "disconnected",
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/api/main.py:225:1
    |
223 |         metrics_data = monitoring_service.get_metrics_summary()
224 |         performance_data = monitoring_service.get_performance_summary()
225 |         
    | ^^^^^^^^
226 |         return {
227 |             "timestamp": datetime.now(UTC).isoformat(),
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/api/main.py:246:23
    |
244 |     # Record error metric
245 |     await monitoring_service.increment_counter(
246 |         "http_errors", 
    |                       ^
247 |         tags={"error_type": "Exception", "path": request.url.path}
248 |     )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/api/main.py:249:1
    |
247 |         tags={"error_type": "Exception", "path": request.url.path}
248 |     )
249 |     
    | ^^^^
250 |     logging.getLogger("http").exception(
251 |         "Unhandled exception",
    |
help: Remove whitespace from blank line

E402 Module level import not at top of file
   --> src/api/main.py:264:1
    |
264 | from starlette.routing import Route, WebSocketRoute
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
265 |
266 | # Add this endpoint for debugging
    |

I001 [*] Import block is un-sorted or un-formatted
   --> src/api/main.py:264:1
    |
264 | from starlette.routing import Route, WebSocketRoute
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
265 |
266 | # Add this endpoint for debugging
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> src/api/routers/auth.py:1:1
  |
1 | / from fastapi import APIRouter, Depends, HTTPException
2 | | from sqlalchemy.ext.asyncio import AsyncSession
3 | |
4 | | from core.security import create_access_token, get_password_hash, verify_password
5 | | from domain.schemas.auth import UserCreate, Token
6 | | from infrastructure.db import get_session
7 | | from infrastructure.repositories.users import create_user, get_user_by_email
  | |____________________________________________________________________________^
  |
help: Organize imports

W292 [*] No newline at end of file
  --> src/api/routers/auth.py:35:37
   |
33 |         raise HTTPException(status_code=401, detail="Identifiants invalides")
34 |     token = create_access_token(subject=str(user.id))
35 |     return Token(access_token=token)
   |                                     ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/api/routers/backtest.py:1:1
   |
 1 | / from fastapi import APIRouter, UploadFile, File, Query, HTTPException
 2 | | import asyncio
 3 | | from datetime import datetime
 4 | | from typing import List
 5 | | import os
 6 | |
 7 | | from domain.schemas.backtest import (
 8 | |     BacktestResponse,
 9 | |     SingleBacktestResponse,
10 | |     MultiBacktestResponse,
11 | |     MonteCarloResponse,
12 | |     SingleBacktestResult,
13 | |     MonteCarloBacktestResult,
14 | |     AggregatedMetrics,
15 | | )
16 | | from services.backtest_service import (
17 | |     run_sma_crossover,
18 | |     run_rsi,
19 | |     CsvBytesPriceSeriesSource,
20 | | )
21 | | from services.mc_backtest_service import (
22 | |     run_monte_carlo_on_df,
23 | |     MAX_MONTE_CARLO_RUNS,
24 | | )
   | |_^
25 |
26 |   router = APIRouter(tags=["backtest"])  # no internal prefix; main adds versioned prefix
   |
help: Organize imports

F841 Local variable `df` is assigned to but never used
   --> src/api/routers/backtest.py:257:13
    |
255 |             csv_bytes = await file.read()
256 |             source = CsvBytesPriceSeriesSource(csv_bytes)
257 |             df = source.to_dataframe()
    |             ^^
258 |
259 |             # Progress callback: updates JobRepository so WS can stream progress
    |
help: Remove assignment to unused variable `df`

W292 [*] No newline at end of file
 --> src/api/routes/__init__.py:9:33
  |
7 | from .monte_carlo import router as monte_carlo_router
8 |
9 | __all__ = ["monte_carlo_router"]
  |                                 ^
  |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/api/routes/monte_carlo.py:5:1
   |
 3 |   """
 4 |
 5 | / from typing import List, Optional, Dict, Any
 6 | | from uuid import UUID
 7 | | from datetime import datetime
 8 | |
 9 | | from fastapi import (
10 | |     APIRouter,
11 | |     HTTPException,
12 | |     Depends,
13 | |     BackgroundTasks,
14 | |     Query,
15 | |     status,
16 | |     WebSocket,
17 | | )
18 | | from starlette.websockets import WebSocketDisconnect
19 | | from pydantic import BaseModel, Field, field_validator
20 | |
21 | | from domain.queue import JobStatus, JobPriority, MonteCarloJobPayload, JobMetadata
22 | | from services.job_manager import MonteCarloJobManager
23 | | from infrastructure.queue.sqs_adapter import SQSQueueAdapter
24 | | from infrastructure.monitoring.metrics import MonitoringService
25 | | from config.queue_config import get_config
26 | | from utils.date_validation import validate_date_range_for_symbol, get_all_symbols_date_ranges
27 | | import asyncio
28 | | from functools import lru_cache
29 | | from collections import defaultdict
30 | | import logging
31 | |
32 | | # Import enhanced logging utilities
33 | | from core.background_task_logging import (
34 | |     log_websocket_connection,
35 | |     log_background_task,
36 | |     log_async_operation,
37 | |     create_safe_background_task
38 | | )
   | |_^
39 |
40 |   # Global dictionary to store locks for each job to prevent race conditions
   |
help: Organize imports

F401 [*] `uuid.UUID` imported but unused
 --> src/api/routes/monte_carlo.py:6:18
  |
5 | from typing import List, Optional, Dict, Any
6 | from uuid import UUID
  |                  ^^^^
7 | from datetime import datetime
  |
help: Remove unused import: `uuid.UUID`

F401 [*] `domain.queue.JobMetadata` imported but unused
  --> src/api/routes/monte_carlo.py:21:72
   |
19 | from pydantic import BaseModel, Field, field_validator
20 |
21 | from domain.queue import JobStatus, JobPriority, MonteCarloJobPayload, JobMetadata
   |                                                                        ^^^^^^^^^^^
22 | from services.job_manager import MonteCarloJobManager
23 | from infrastructure.queue.sqs_adapter import SQSQueueAdapter
   |
help: Remove unused import: `domain.queue.JobMetadata`

F401 [*] `infrastructure.monitoring.metrics.MonitoringService` imported but unused
  --> src/api/routes/monte_carlo.py:24:47
   |
22 | from services.job_manager import MonteCarloJobManager
23 | from infrastructure.queue.sqs_adapter import SQSQueueAdapter
24 | from infrastructure.monitoring.metrics import MonitoringService
   |                                               ^^^^^^^^^^^^^^^^^
25 | from config.queue_config import get_config
26 | from utils.date_validation import validate_date_range_for_symbol, get_all_symbols_date_ranges
   |
help: Remove unused import: `infrastructure.monitoring.metrics.MonitoringService`

F401 [*] `core.background_task_logging.log_background_task` imported but unused
  --> src/api/routes/monte_carlo.py:35:5
   |
33 | from core.background_task_logging import (
34 |     log_websocket_connection,
35 |     log_background_task,
   |     ^^^^^^^^^^^^^^^^^^^
36 |     log_async_operation,
37 |     create_safe_background_task
   |
help: Remove unused import

F401 [*] `core.background_task_logging.log_async_operation` imported but unused
  --> src/api/routes/monte_carlo.py:36:5
   |
34 |     log_websocket_connection,
35 |     log_background_task,
36 |     log_async_operation,
   |     ^^^^^^^^^^^^^^^^^^^
37 |     create_safe_background_task
38 | )
   |
help: Remove unused import

F401 [*] `core.background_task_logging.create_safe_background_task` imported but unused
  --> src/api/routes/monte_carlo.py:37:5
   |
35 |     log_background_task,
36 |     log_async_operation,
37 |     create_safe_background_task
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 | )
   |
help: Remove unused import

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:149:1
    |
147 | class SymbolDateRangeResponse(BaseModel):
148 |     """Response model for symbol date ranges."""
149 |     
    | ^^^^
150 |     symbol: str
151 |     min_date: datetime
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:157:1
    |
155 | class AllSymbolsDateRangesResponse(BaseModel):
156 |     """Response model for all symbols date ranges."""
157 |     
    | ^^^^
158 |     symbols: List[SymbolDateRangeResponse]
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> src/api/routes/monte_carlo.py:201:9
    |
199 |       """
200 |       try:
201 | /         import os
202 | |         import pandas as pd
203 | |         from io import BytesIO
    | |______________________________^
204 |
205 |           # Map symbol to dataset file
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:229:1
    |
227 |             end_date=job_request.end_date
228 |         )
229 |         
    | ^^^^^^^^
230 |         if not validation_result['valid']:
231 |             error_detail = validation_result['error_message']
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:235:1
    |
233 | …         suggested = validation_result['suggested_range']
234 | …         error_detail += f" Suggested range: {suggested['start_date'].strftime('%Y-%m-%d')} to {suggested['end_date'].strftime('%Y-%…
235 | …     
^^^^^^^^^^^^
236 | …     raise HTTPException(
237 | …         status_code=status.HTTP_400_BAD_REQUEST,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:659:1
    |
657 |     """
658 |     WebSocket endpoint for real-time job progress updates using Redis pub/sub.
659 |     
    | ^^^^
660 |     Args:
661 |         websocket: WebSocket connection
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:665:1
    |
663 |     """
664 |     await websocket.accept()
665 |     
    | ^^^^
666 |     # Use shared job manager to read initial job state
667 |     job_manager = get_job_manager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:668:1
    |
666 |     # Use shared job manager to read initial job state
667 |     job_manager = get_job_manager()
668 |     
    | ^^^^
669 |     # Add connection tracking and cleanup
670 |     connection_id = f"ws_{job_id}_{id(websocket)}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:672:1
    |
670 |     connection_id = f"ws_{job_id}_{id(websocket)}"
671 |     logger.info(f"WebSocket connection established: {connection_id}")
672 |     
    | ^^^^
673 |     # Create a lock for this specific job to prevent race conditions
674 |     job_lock = _job_locks[job_id]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:675:1
    |
673 |     # Create a lock for this specific job to prevent race conditions
674 |     job_lock = _job_locks[job_id]
675 |     
    | ^^^^
676 |     try:
677 |         # Send initial job state with proper error handling
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:680:1
    |
678 |         async with job_lock:
679 |             progress = await job_manager.get_job_progress(job_id)
680 |             
    | ^^^^^^^^^^^^
681 |         if not progress:
682 |             payload = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:716:1
    |
714 |             }
715 |             await websocket.send_json(payload)
716 |             
    | ^^^^^^^^^^^^
717 |             # If job is already in terminal state, wait for client to close or timeout
718 |             if status_val in {JobStatus.COMPLETED, JobStatus.FAILED, JobStatus.CANCELLED}:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:732:1
    |
730 |         # Subscribe to Redis pub/sub for real-time updates
731 |         from infrastructure.cache import cache_manager
732 |         
    | ^^^^^^^^
733 |         # Create a task to listen for Redis notifications with enhanced pub/sub system
734 |         async def listen_for_updates():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:737:1
    |
735 |             subscription_active = False
736 |             last_sequence_number = 0
737 |             
    | ^^^^^^^^^^^^
738 |             try:
739 |                 # Use the enhanced pub/sub system with automatic reconnection and message ordering
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:742:1
    |
740 |                 async for message in cache_manager.subscribe(f"job_progress:{job_id}"):
741 |                     subscription_active = True
742 |                     
    | ^^^^^^^^^^^^^^^^^^^^
743 |                     # Check if WebSocket is still open before sending
744 |                     if websocket.client_state.name != "CONNECTED":
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:747:1
    |
745 |                         logger.info(f"WebSocket disconnected for job {job_id}, stopping updates")
746 |                         break
747 |                     
    | ^^^^^^^^^^^^^^^^^^^^
748 |                     # Enhanced message handling with ordering and deduplication
749 |                     if hasattr(message, 'sequence_number'):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:755:1
    |
753 |                             continue
754 |                         last_sequence_number = message.sequence_number
755 |                     
    | ^^^^^^^^^^^^^^^^^^^^
756 |                     # Extract data from enhanced message format
757 |                     if hasattr(message, 'data'):
    |
help: Remove whitespace from blank line

F841 Local variable `data` is assigned to but never used
   --> src/api/routes/monte_carlo.py:761:25
    |
759 |                     else:
760 |                         # Fallback for legacy message format
761 |                         data = message.get('data') if isinstance(message, dict) else message
    |                         ^^^^
762 |                         
763 |                     # Get full job state for complete payload with lock protection
    |
help: Remove assignment to unused variable `data`

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:762:1
    |
760 |                         # Fallback for legacy message format
761 |                         data = message.get('data') if isinstance(message, dict) else message
762 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
763 |                     # Get full job state for complete payload with lock protection
764 |                     async with job_lock:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:766:1
    |
764 |                     async with job_lock:
765 |                         current_progress = await job_manager.get_job_progress(job_id)
766 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
767 |                     if current_progress:
768 |                         status_val = current_progress.get("status", JobStatus.PENDING)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:793:1
    |
791 |                             "message_timestamp": getattr(message, 'timestamp', None),
792 |                         }
793 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
794 |                         try:
795 |                             await websocket.send_json(payload)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:800:1
    |
798 |                             logger.warning(f"Failed to send WebSocket message for job {job_id}: {send_error}")
799 |                             break
800 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
801 |                         # Break on terminal states
802 |                         if status_val in {JobStatus.COMPLETED, JobStatus.FAILED, JobStatus.CANCELLED}:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:805:1
    |
803 |                             logger.info(f"Job {job_id} reached terminal state: {status_val}")
804 |                             break
805 |                             
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
806 |             except Exception as e:
807 |                 logger.error(f"Enhanced Redis subscription error for job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:814:1
    |
812 |                 except Exception:
813 |                     pass
814 |                     
    | ^^^^^^^^^^^^^^^^^^^^
815 |                 if not subscription_active:
816 |                     # If subscription never became active, Redis is likely down
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:818:1
    |
816 |                     # If subscription never became active, Redis is likely down
817 |                     raise
818 |         
    | ^^^^^^^^
819 |         # Create a fallback polling task with improved error handling
820 |         async def fallback_polling():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:823:1
    |
821 |             poll_count = 0
822 |             last_status = None
823 |             
    | ^^^^^^^^^^^^
824 |             while True:
825 |                 # Check if WebSocket is still open before polling
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:829:1
    |
827 |                     logger.info(f"WebSocket disconnected for job {job_id}, stopping polling")
828 |                     break
829 |                     
    | ^^^^^^^^^^^^^^^^^^^^
830 |                 await asyncio.sleep(1.0)
831 |                 poll_count += 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:832:1
    |
830 |                 await asyncio.sleep(1.0)
831 |                 poll_count += 1
832 |                 
    | ^^^^^^^^^^^^^^^^
833 |                 try:
834 |                     async with job_lock:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:836:1
    |
834 |                     async with job_lock:
835 |                         current_progress = await job_manager.get_job_progress(job_id)
836 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
837 |                     if current_progress:
838 |                         status_val = current_progress.get("status", JobStatus.PENDING)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:839:1
    |
837 |                     if current_progress:
838 |                         status_val = current_progress.get("status", JobStatus.PENDING)
839 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
840 |                         # Only send updates if status changed or every 10 polls to reduce noise
841 |                         if status_val != last_status or poll_count % 10 == 0:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:863:1
    |
861 | …                         "last_updated": current_progress.get("last_updated"),
862 | …                     }
863 | …                     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
864 | …                     try:
865 | …                         await websocket.send_json(payload)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:872:1
    |
870 |                                 logger.warning(f"Failed to send WebSocket message for job {job_id}: {send_error}")
871 |                                 break
872 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
873 |                         # Break on terminal states
874 |                         if status_val in {JobStatus.COMPLETED, JobStatus.FAILED, JobStatus.CANCELLED}:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:877:1
    |
875 |                             logger.info(f"Job {job_id} reached terminal state via polling: {status_val}")
876 |                             break
877 |                             
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
878 |                 except Exception as e:
879 |                     logger.error(f"Error during polling for job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:882:1
    |
880 |                     # Continue polling despite errors
881 |                     continue
882 |         
    | ^^^^^^^^
883 |         # Try Redis pub/sub first, fallback to polling if Redis is not available
884 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:901:1
    |
899 |                     await fallback_polling()
900 |                     return
901 |                 
    | ^^^^^^^^^^^^^^^^
902 |                 # Create a timeout for Redis pub/sub to detect if it's not working
903 |                 try:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:950:1
    |
948 |     """
949 |     Get available date ranges for all supported symbols.
950 |     
    | ^^^^
951 |     Returns:
952 |         AllSymbolsDateRangesResponse: Date ranges for all symbols
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:956:1
    |
954 |     try:
955 |         date_ranges = get_all_symbols_date_ranges()
956 |         
    | ^^^^^^^^
957 |         symbols = [
958 |             SymbolDateRangeResponse(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:965:1
    |
963 |             for symbol, ranges in date_ranges.items()
964 |         ]
965 |         
    | ^^^^^^^^
966 |         return AllSymbolsDateRangesResponse(symbols=symbols)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/monte_carlo.py:967:1
    |
966 |         return AllSymbolsDateRangesResponse(symbols=symbols)
967 |         
    | ^^^^^^^^
968 |     except Exception as e:
969 |         raise HTTPException(
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/api/routes/monte_carlo.py:972:10
    |
970 |             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
971 |             detail=f"Error retrieving symbol date ranges: {str(e)}"
972 |         )
    |          ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/api/routes/performance.py:7:1
   |
 5 |   cache statistics, and system metrics.
 6 |   """
 7 | / import logging
 8 | | from typing import Dict, Any, List
 9 | | from fastapi import APIRouter, Depends, HTTPException, status
10 | | from pydantic import BaseModel
11 | |
12 | | from infrastructure.db import get_session, get_pool_status
13 | | from infrastructure.db_indexes import IndexManager, analyze_database_performance
14 | | from infrastructure.cache import cache_manager
15 | | from sqlalchemy.ext.asyncio import AsyncSession
   | |_______________________________________________^
16 |
17 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W293 Blank line contains whitespace
  --> src/api/routes/performance.py:56:1
   |
54 |     """
55 |     Get comprehensive database performance metrics.
56 |     
   | ^^^^
57 |     Returns:
58 |         Database performance statistics including connection pool,
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/api/routes/performance.py:64:1
   |
62 |         # Get connection pool status
63 |         pool_status = await get_pool_status()
64 |         
   | ^^^^^^^^
65 |         # Get comprehensive database analysis
66 |         performance_data = await analyze_database_performance(session)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/api/routes/performance.py:67:1
   |
65 |         # Get comprehensive database analysis
66 |         performance_data = await analyze_database_performance(session)
67 |         
   | ^^^^^^^^
68 |         return DatabaseStatsResponse(
69 |             connection_pool=pool_status,
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/api/routes/performance.py:74:1
   |
72 |             index_usage=performance_data.get("index_usage", [])
73 |         )
74 |         
   | ^^^^^^^^
75 |     except Exception as e:
76 |         logger.error("Failed to get database performance metrics", extra={
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/api/routes/performance.py:89:1
   |
87 |     """
88 |     Get cache performance metrics.
89 |     
   | ^^^^
90 |     Returns:
91 |         Cache statistics including hit ratio, memory usage, and connection info
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/api/routes/performance.py:95:1
   |
93 |     try:
94 |         stats = await cache_manager.get_stats()
95 |         
   | ^^^^^^^^
96 |         # Calculate hit ratio
97 |         hits = stats.get("keyspace_hits", 0)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:101:1
    |
 99 |         total_requests = hits + misses
100 |         hit_ratio = (hits / total_requests) if total_requests > 0 else 0.0
101 |         
    | ^^^^^^^^
102 |         return CacheStatsResponse(
103 |             enabled=stats.get("enabled", False),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:113:1
    |
111 |             hit_ratio=hit_ratio
112 |         )
113 |         
    | ^^^^^^^^
114 |     except Exception as e:
115 |         logger.error("Failed to get cache performance metrics", extra={
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/api/routes/performance.py:130:1
    |
128 |     """
129 |     Get comprehensive performance metrics for database and cache.
130 |     
    | ^^^^
131 |     Returns:
132 |         Complete performance metrics including database and cache statistics
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> src/api/routes/performance.py:135:9
    |
133 |       """
134 |       try:
135 | /         from datetime import datetime
136 | |         
137 | |         # Get database and cache metrics concurrently
138 | |         import asyncio
    | |______________________^
139 |           
140 |           db_task = get_database_performance(session)
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:136:1
    |
134 |     try:
135 |         from datetime import datetime
136 |         
    | ^^^^^^^^
137 |         # Get database and cache metrics concurrently
138 |         import asyncio
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:139:1
    |
137 |         # Get database and cache metrics concurrently
138 |         import asyncio
139 |         
    | ^^^^^^^^
140 |         db_task = get_database_performance(session)
141 |         cache_task = get_cache_performance()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:142:1
    |
140 |         db_task = get_database_performance(session)
141 |         cache_task = get_cache_performance()
142 |         
    | ^^^^^^^^
143 |         db_stats, cache_stats = await asyncio.gather(db_task, cache_task)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:144:1
    |
143 |         db_stats, cache_stats = await asyncio.gather(db_task, cache_task)
144 |         
    | ^^^^^^^^
145 |         return PerformanceMetricsResponse(
146 |             database=db_stats,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:150:1
    |
148 |             timestamp=datetime.utcnow().isoformat()
149 |         )
150 |         
    | ^^^^^^^^
151 |     except Exception as e:
152 |         logger.error("Failed to get performance metrics", extra={
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/api/routes/performance.py:168:1
    |
166 |     """
167 |     Optimize a specific database table.
168 |     
    | ^^^^
169 |     Args:
170 |         table_name: Name of the table to optimize
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/api/routes/performance.py:171:1
    |
169 |     Args:
170 |         table_name: Name of the table to optimize
171 |         
    | ^^^^^^^^
172 |     Returns:
173 |         Optimization results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:183:1
    |
181 |                 detail=f"Table '{table_name}' is not allowed for optimization"
182 |             )
183 |         
    | ^^^^^^^^
184 |         index_manager = IndexManager(session)
185 |         result = await index_manager.optimize_table(table_name)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:186:1
    |
184 |         index_manager = IndexManager(session)
185 |         result = await index_manager.optimize_table(table_name)
186 |         
    | ^^^^^^^^
187 |         logger.info("Table optimization completed", extra={
188 |             "table_name": table_name,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:191:1
    |
189 |             "success": result.get("success", False)
190 |         })
191 |         
    | ^^^^^^^^
192 |         return result
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:193:1
    |
192 |         return result
193 |         
    | ^^^^^^^^
194 |     except HTTPException:
195 |         raise
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/api/routes/performance.py:213:1
    |
211 |     """
212 |     Create performance-optimized database indexes.
213 |     
    | ^^^^
214 |     Returns:
215 |         Index creation results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:220:1
    |
218 |         index_manager = IndexManager(session)
219 |         results = await index_manager.create_performance_indexes()
220 |         
    | ^^^^^^^^
221 |         success_count = sum(1 for success in results.values() if success)
222 |         total_count = len(results)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:223:1
    |
221 |         success_count = sum(1 for success in results.values() if success)
222 |         total_count = len(results)
223 |         
    | ^^^^^^^^
224 |         logger.info("Performance indexes creation completed", extra={
225 |             "success_count": success_count,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:229:1
    |
227 |             "results": results
228 |         })
229 |         
    | ^^^^^^^^
230 |         return {
231 |             "success": True,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:235:1
    |
233 |             "results": results
234 |         }
235 |         
    | ^^^^^^^^
236 |     except Exception as e:
237 |         logger.error("Failed to create performance indexes", extra={
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/api/routes/performance.py:250:1
    |
248 |     """
249 |     Clear all cache entries.
250 |     
    | ^^^^
251 |     Returns:
252 |         Cache clearing results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:260:1
    |
258 |                 "message": "Cache is not enabled"
259 |             }
260 |         
    | ^^^^^^^^
261 |         # Clear all cache entries
262 |         cleared_count = await cache_manager.delete_pattern("*")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:263:1
    |
261 |         # Clear all cache entries
262 |         cleared_count = await cache_manager.delete_pattern("*")
263 |         
    | ^^^^^^^^
264 |         logger.info("Cache cleared", extra={
265 |             "cleared_count": cleared_count
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:267:1
    |
265 |             "cleared_count": cleared_count
266 |         })
267 |         
    | ^^^^^^^^
268 |         return {
269 |             "success": True,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:273:1
    |
271 |             "cleared_count": cleared_count
272 |         }
273 |         
    | ^^^^^^^^
274 |     except Exception as e:
275 |         logger.error("Failed to clear cache", extra={
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/api/routes/performance.py:288:1
    |
286 |     """
287 |     Clear cache entries matching a pattern.
288 |     
    | ^^^^
289 |     Args:
290 |         pattern: Redis pattern to match (e.g., "job:*", "user:*")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/api/routes/performance.py:291:1
    |
289 |     Args:
290 |         pattern: Redis pattern to match (e.g., "job:*", "user:*")
291 |         
    | ^^^^^^^^
292 |     Returns:
293 |         Cache clearing results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:301:1
    |
299 |                 "message": "Cache is not enabled"
300 |             }
301 |         
    | ^^^^^^^^
302 |         # Clear cache entries matching pattern
303 |         cleared_count = await cache_manager.delete_pattern(pattern)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:304:1
    |
302 |         # Clear cache entries matching pattern
303 |         cleared_count = await cache_manager.delete_pattern(pattern)
304 |         
    | ^^^^^^^^
305 |         logger.info("Cache pattern cleared", extra={
306 |             "pattern": pattern,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:309:1
    |
307 |             "cleared_count": cleared_count
308 |         })
309 |         
    | ^^^^^^^^
310 |         return {
311 |             "success": True,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/api/routes/performance.py:316:1
    |
314 |             "cleared_count": cleared_count
315 |         }
316 |         
    | ^^^^^^^^
317 |     except Exception as e:
318 |         logger.error("Failed to clear cache pattern", extra={
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/api/routes/performance.py:325:10
    |
323 |             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
324 |             detail=f"Failed to clear cache pattern '{pattern}'"
325 |         )
    |          ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/config/__init__.py:7:1
   |
 5 |   """
 6 |
 7 | / from .queue_config import (
 8 | |     QueueSystemConfig,
 9 | |     SQSConfig,
10 | |     WorkerConfig,
11 | |     JobConfig,
12 | |     MonitoringConfig,
13 | |     Environment,
14 | |     get_config,
15 | |     get_development_config,
16 | |     get_testing_config,
17 | |     get_production_config
18 | | )
   | |_^
19 |
20 |   __all__ = [
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> src/config/__init__.py:22:17
   |
20 | __all__ = [
21 |     "QueueSystemConfig",
22 |     "SQSConfig", 
   |                 ^
23 |     "WorkerConfig",
24 |     "JobConfig",
   |
help: Remove trailing whitespace

W292 [*] No newline at end of file
  --> src/config/__init__.py:31:2
   |
29 |     "get_testing_config",
30 |     "get_production_config"
31 | ]
   |  ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/config/queue_config.py:7:1
   |
 5 |   environments, with support for environment variables and validation.
 6 |   """
 7 | / import os
 8 | | import logging
 9 | | from dataclasses import dataclass, field
10 | | from typing import Optional, Dict, Any
11 | | from enum import Enum
12 | |
13 | | from infrastructure.security import CredentialManager, AWSCredentials
   | |_____________________________________________________________________^
14 |
15 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> src/config/queue_config.py:37:1
   |
35 |     aws_credentials: Optional[AWSCredentials] = None
36 |     endpoint_url: Optional[str] = None  # For LocalStack
37 |     
   | ^^^^
38 |     def __post_init__(self):
39 |         """Validate configuration after initialization"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/config/queue_config.py:42:1
   |
40 |         if not self.queue_url:
41 |             raise ValueError("queue_url is required")
42 |         
   | ^^^^^^^^
43 |         if self.visibility_timeout < 0 or self.visibility_timeout > 43200:  # 12 hours max
44 |             raise ValueError("visibility_timeout must be between 0 and 43200 seconds")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/config/queue_config.py:45:1
   |
43 |         if self.visibility_timeout < 0 or self.visibility_timeout > 43200:  # 12 hours max
44 |             raise ValueError("visibility_timeout must be between 0 and 43200 seconds")
45 |         
   | ^^^^^^^^
46 |         if self.message_retention_period < 60 or self.message_retention_period > 1209600:  # 14 days max
47 |             raise ValueError("message_retention_period must be between 60 and 1209600 seconds")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/config/queue_config.py:48:1
   |
46 |         if self.message_retention_period < 60 or self.message_retention_period > 1209600:  # 14 days max
47 |             raise ValueError("message_retention_period must be between 60 and 1209600 seconds")
48 |         
   | ^^^^^^^^
49 |         # Initialize AWS credentials if not provided
50 |         if self.aws_credentials is None:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/config/queue_config.py:56:1
   |
54 |                 prefer_iam_role=(environment in ("staging", "production"))
55 |             )
56 |             
   | ^^^^^^^^^^^^
57 |         # Validate credentials
58 |         if not CredentialManager.validate_credentials(self.aws_credentials):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/config/queue_config.py:62:1
   |
60 |                 "credential_info": self.aws_credentials.mask_sensitive_data()
61 |             })
62 |     
   | ^^^^
63 |     def get_boto3_config(self) -> Dict[str, Any]:
64 |         """Get boto3 configuration with secure credentials"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/config/queue_config.py:69:1
   |
67 |             config["endpoint_url"] = self.endpoint_url
68 |         return config
69 |     
   | ^^^^
70 |     def mask_sensitive_data(self) -> Dict[str, Any]:
71 |         """Return configuration with sensitive data masked for logging"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/config/queue_config.py:92:1
   |
90 |     health_check_interval: float = 30.0
91 |     shutdown_timeout: int = 300  # 5 minutes
92 |     
   | ^^^^
93 |     def __post_init__(self):
94 |         """Validate configuration after initialization"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/config/queue_config.py:97:1
   |
95 |         if self.max_concurrent_jobs < 1:
96 |             raise ValueError("max_concurrent_jobs must be at least 1")
97 |         
   | ^^^^^^^^
98 |         if self.poll_interval < 0.1:
99 |             raise ValueError("poll_interval must be at least 0.1 seconds")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:100:1
    |
 98 |         if self.poll_interval < 0.1:
 99 |             raise ValueError("poll_interval must be at least 0.1 seconds")
100 |         
    | ^^^^^^^^
101 |         if self.health_check_interval < 1.0:
102 |             raise ValueError("health_check_interval must be at least 1.0 seconds")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:112:1
    |
110 |     max_runs_per_job: int = 10000
111 |     min_runs_per_job: int = 1
112 |     
    | ^^^^
113 |     def __post_init__(self):
114 |         """Validate configuration after initialization"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:117:1
    |
115 |         if self.default_timeout_seconds < 60:
116 |             raise ValueError("default_timeout_seconds must be at least 60 seconds")
117 |         
    | ^^^^^^^^
118 |         if self.default_max_retries < 0:
119 |             raise ValueError("default_max_retries must be non-negative")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:120:1
    |
118 |         if self.default_max_retries < 0:
119 |             raise ValueError("default_max_retries must be non-negative")
120 |         
    | ^^^^^^^^
121 |         if self.max_runs_per_job < self.min_runs_per_job:
122 |             raise ValueError("max_runs_per_job must be >= min_runs_per_job")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:132:1
    |
130 |     health_check_interval: float = 30.0
131 |     performance_window_size: int = 100
132 |     
    | ^^^^
133 |     def __post_init__(self):
134 |         """Validate configuration after initialization"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:137:1
    |
135 |         if self.metrics_retention_hours < 1:
136 |             raise ValueError("metrics_retention_hours must be at least 1")
137 |         
    | ^^^^^^^^
138 |         if self.performance_window_size < 10:
139 |             raise ValueError("performance_window_size must be at least 10")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:150:1
    |
148 |     job: JobConfig = field(default_factory=JobConfig)
149 |     monitoring: MonitoringConfig = field(default_factory=MonitoringConfig)
150 |     
    | ^^^^
151 |     @classmethod
152 |     def from_environment(cls, env: Optional[str] = None) -> 'QueueSystemConfig':
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/config/queue_config.py:155:1
    |
153 |         """
154 |         Create configuration from environment variables.
155 |         
    | ^^^^^^^^
156 |         Args:
157 |             env: Environment name (development, testing, staging, production)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/config/queue_config.py:158:1
    |
156 |         Args:
157 |             env: Environment name (development, testing, staging, production)
158 |             
    | ^^^^^^^^^^^^
159 |         Returns:
160 |             QueueSystemConfig instance
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:168:1
    |
166 |         except ValueError:
167 |             raise ValueError(f"Invalid environment: {env_name}")
168 |         
    | ^^^^^^^^
169 |         # SQS Configuration with secure credentials
170 |         aws_credentials = CredentialManager.resolve_aws_credentials(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:174:1
    |
172 |             prefer_iam_role=(environment in (Environment.STAGING, Environment.PRODUCTION))
173 |         )
174 |         
    | ^^^^^^^^
175 |         sqs_config = SQSConfig(
176 |             queue_url=os.getenv("SQS_QUEUE_URL", ""),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:185:1
    |
183 |             endpoint_url=os.getenv("AWS_ENDPOINT_URL") or os.getenv("SQS_ENDPOINT_URL")  # For LocalStack
184 |         )
185 |         
    | ^^^^^^^^
186 |         # Worker Configuration
187 |         worker_config = WorkerConfig(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:194:1
    |
192 |             shutdown_timeout=int(os.getenv("SHUTDOWN_TIMEOUT", "300"))
193 |         )
194 |         
    | ^^^^^^^^
195 |         # Job Configuration
196 |         job_config = JobConfig(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:202:1
    |
200 |             min_runs_per_job=int(os.getenv("MIN_RUNS_PER_JOB", "1"))
201 |         )
202 |         
    | ^^^^^^^^
203 |         # Monitoring Configuration
204 |         monitoring_config = MonitoringConfig(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:210:1
    |
208 |             performance_window_size=int(os.getenv("PERFORMANCE_WINDOW_SIZE", "100"))
209 |         )
210 |         
    | ^^^^^^^^
211 |         return cls(
212 |             environment=environment,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:218:1
    |
216 |             monitoring=monitoring_config
217 |         )
218 |     
    | ^^^^
219 |     def to_dict(self) -> Dict[str, Any]:
220 |         """Convert configuration to dictionary"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:252:1
    |
250 |             }
251 |         }
252 |     
    | ^^^^
253 |     def validate(self) -> None:
254 |         """Validate the complete configuration"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:259:1
    |
257 |             if not self.sqs.aws_credentials or not self.sqs.aws_credentials.is_valid():
258 |                 raise ValueError("Production environment requires valid AWS credentials or IAM role")
259 |             
    | ^^^^^^^^^^^^
260 |             if self.sqs.endpoint_url:
261 |                 raise ValueError("Production environment should not use custom SQS endpoint")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:262:1
    |
260 |             if self.sqs.endpoint_url:
261 |                 raise ValueError("Production environment should not use custom SQS endpoint")
262 |         
    | ^^^^^^^^
263 |         elif self.environment == Environment.TESTING:
264 |             # Testing might use LocalStack
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:267:1
    |
265 |             if not self.sqs.endpoint_url and not self.sqs.queue_url.startswith("https://sqs"):
266 |                 raise ValueError("Testing environment requires either LocalStack endpoint or real SQS URL")
267 |         
    | ^^^^^^^^
268 |         # General validations
269 |         if not self.sqs.queue_url:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:271:1
    |
269 |         if not self.sqs.queue_url:
270 |             raise ValueError("SQS queue URL is required")
271 |         
    | ^^^^^^^^
272 |         # Log configuration for debugging (with sensitive data masked)
273 |         logger.info("Queue configuration validated", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:296:1
    |
294 |     config.job.default_timeout_seconds = 600
295 |     config.job.max_runs_per_job = 1000
296 |     
    | ^^^^
297 |     return config
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:303:1
    |
301 |     """Get testing configuration"""
302 |     from infrastructure.security import AWSCredentials, CredentialSource
303 |     
    | ^^^^
304 |     # Create mock AWS credentials for testing
305 |     test_credentials = AWSCredentials(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:311:1
    |
309 |         source=CredentialSource.ENVIRONMENT
310 |     )
311 |     
    | ^^^^
312 |     config = QueueSystemConfig.from_environment("testing")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:313:1
    |
312 |     config = QueueSystemConfig.from_environment("testing")
313 |     
    | ^^^^
314 |     # Testing-specific overrides
315 |     config.sqs.aws_credentials = test_credentials
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:327:1
    |
325 |     config.monitoring.metrics_retention_hours = 1
326 |     config.monitoring.performance_window_size = 10
327 |     
    | ^^^^
328 |     return config
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:334:1
    |
332 |     """Get production configuration"""
333 |     config = QueueSystemConfig.from_environment("production")
334 |     
    | ^^^^
335 |     # Production-specific overrides
336 |     config.worker.max_concurrent_jobs = max(1, config.worker.max_concurrent_jobs)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:339:1
    |
337 |     config.job.default_timeout_seconds = max(3600, config.job.default_timeout_seconds)
338 |     config.monitoring.enabled = True
339 |     
    | ^^^^
340 |     return config
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/config/queue_config.py:346:1
    |
344 |     """
345 |     Get configuration for the specified environment.
346 |     
    | ^^^^
347 |     Args:
348 |         environment: Environment name or None to auto-detect
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/config/queue_config.py:349:1
    |
347 |     Args:
348 |         environment: Environment name or None to auto-detect
349 |         
    | ^^^^^^^^
350 |     Returns:
351 |         QueueSystemConfig instance
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/config/queue_config.py:354:1
    |
352 |     """
353 |     env_name = environment or os.getenv("ENVIRONMENT", "development")
354 |     
    | ^^^^
355 |     if env_name.lower() == "development":
356 |         return get_development_config()
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/config/queue_config.py:363:60
    |
361 |     else:
362 |         # Use environment-based configuration for staging or custom environments
363 |         return QueueSystemConfig.from_environment(env_name)
    |                                                            ^
    |
help: Add trailing newline

W292 [*] No newline at end of file
 --> src/core/__init__.py:1:15
  |
1 | # core package
  |               ^
  |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/core/background_task_logging.py:8:1
   |
 6 |   error handling and structured logging.
 7 |   """
 8 | / import logging
 9 | | import asyncio
10 | | import functools
11 | | import time
12 | | from typing import Any, Callable, Dict, Optional, TypeVar, Union
13 | | from datetime import datetime, UTC
14 | | import traceback
15 | | import contextvars
16 | | from contextlib import asynccontextmanager
   | |__________________________________________^
17 |
18 |   # Context variables for tracking background tasks
   |
help: Organize imports

F401 [*] `typing.Union` imported but unused
  --> src/core/background_task_logging.py:12:60
   |
10 | import functools
11 | import time
12 | from typing import Any, Callable, Dict, Optional, TypeVar, Union
   |                                                            ^^^^^
13 | from datetime import datetime, UTC
14 | import traceback
   |
help: Remove unused import: `typing.Union`

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:30:1
   |
28 | class BackgroundTaskFilter(logging.Filter):
29 |     """Filter to add background task context to log records"""
30 |     
   | ^^^^
31 |     def filter(self, record: logging.LogRecord) -> bool:
32 |         # Add task context to log record
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> src/core/background_task_logging.py:34:58
   |
32 |         # Add task context to log record
33 |         record.task_id = TASK_ID.get("unknown")
34 |         record.websocket_id = WEBSOCKET_ID.get("unknown") 
   |                                                          ^
35 |         record.job_id = JOB_ID.get("unknown")
36 |         return True
   |
help: Remove trailing whitespace

W293 Blank line contains whitespace
  --> src/core/background_task_logging.py:47:1
   |
45 |     """
46 |     Decorator for logging background tasks with comprehensive error handling.
47 |     
   | ^^^^
48 |     Args:
49 |         task_name: Name of the task for logging
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:59:1
   |
57 |             task_id = f"{task_name}_{int(time.time() * 1000)}"
58 |             token = TASK_ID.set(task_id)
59 |             
   | ^^^^^^^^^^^^
60 |             start_time = time.time()
61 |             logger = logging.getLogger(func.__module__)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:62:1
   |
60 |             start_time = time.time()
61 |             logger = logging.getLogger(func.__module__)
62 |             
   | ^^^^^^^^^^^^
63 |             # Log task start
64 |             log_data = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:71:1
   |
69 |                 "timestamp": datetime.now(UTC).isoformat(),
70 |             }
71 |             
   | ^^^^^^^^^^^^
72 |             if include_args and (args or kwargs):
73 |                 log_data["args"] = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:77:1
   |
75 |                     "keyword": {k: str(v)[:100] for k, v in kwargs.items()}
76 |                 }
77 |             
   | ^^^^^^^^^^^^
78 |             logger.log(log_level, f"Background task started: {task_name}", extra=log_data)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:79:1
   |
78 |             logger.log(log_level, f"Background task started: {task_name}", extra=log_data)
79 |             
   | ^^^^^^^^^^^^
80 |             try:
81 |                 result = await func(*args, **kwargs)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:82:1
   |
80 |             try:
81 |                 result = await func(*args, **kwargs)
82 |                 
   | ^^^^^^^^^^^^^^^^
83 |                 # Log successful completion
84 |                 duration = time.time() - start_time
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:90:1
   |
88 |                     "status": "completed"
89 |                 }
90 |                 
   | ^^^^^^^^^^^^^^^^
91 |                 if include_result and result is not None:
92 |                     completion_data["result"] = str(result)[:200]  # Truncate long results
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:93:1
   |
91 |                 if include_result and result is not None:
92 |                     completion_data["result"] = str(result)[:200]  # Truncate long results
93 |                 
   | ^^^^^^^^^^^^^^^^
94 |                 logger.log(log_level, f"Background task completed: {task_name}", extra=completion_data)
95 |                 return result
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/background_task_logging.py:96:1
   |
94 |                 logger.log(log_level, f"Background task completed: {task_name}", extra=completion_data)
95 |                 return result
96 |                 
   | ^^^^^^^^^^^^^^^^
97 |             except asyncio.CancelledError:
98 |                 # Handle task cancellation
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:109:1
    |
107 |                 )
108 |                 raise
109 |                 
    | ^^^^^^^^^^^^^^^^
110 |             except Exception as e:
111 |                 # Log error with full traceback
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:121:1
    |
119 |                     "traceback": traceback.format_exc()
120 |                 }
121 |                 
    | ^^^^^^^^^^^^^^^^
122 |                 logger.error(f"Background task failed: {task_name}", extra=error_data)
123 |                 raise
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:124:1
    |
122 |                 logger.error(f"Background task failed: {task_name}", extra=error_data)
123 |                 raise
124 |                 
    | ^^^^^^^^^^^^^^^^
125 |             finally:
126 |                 TASK_ID.reset(token)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:127:1
    |
125 |             finally:
126 |                 TASK_ID.reset(token)
127 |         
    | ^^^^^^^^
128 |         @functools.wraps(func)
129 |         def sync_wrapper(*args, **kwargs):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:133:1
    |
131 |             task_id = f"{task_name}_{int(time.time() * 1000)}"
132 |             token = TASK_ID.set(task_id)
133 |             
    | ^^^^^^^^^^^^
134 |             start_time = time.time()
135 |             logger = logging.getLogger(func.__module__)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:136:1
    |
134 |             start_time = time.time()
135 |             logger = logging.getLogger(func.__module__)
136 |             
    | ^^^^^^^^^^^^
137 |             log_data = {
138 |                 "task_name": task_name,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:144:1
    |
142 |                 "timestamp": datetime.now(UTC).isoformat(),
143 |             }
144 |             
    | ^^^^^^^^^^^^
145 |             if include_args and (args or kwargs):
146 |                 log_data["args"] = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:150:1
    |
148 |                     "keyword": {k: str(v)[:100] for k, v in kwargs.items()}
149 |                 }
150 |             
    | ^^^^^^^^^^^^
151 |             logger.log(log_level, f"Task started: {task_name}", extra=log_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:152:1
    |
151 |             logger.log(log_level, f"Task started: {task_name}", extra=log_data)
152 |             
    | ^^^^^^^^^^^^
153 |             try:
154 |                 result = func(*args, **kwargs)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:155:1
    |
153 |             try:
154 |                 result = func(*args, **kwargs)
155 |                 
    | ^^^^^^^^^^^^^^^^
156 |                 duration = time.time() - start_time
157 |                 completion_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:162:1
    |
160 |                     "status": "completed"
161 |                 }
162 |                 
    | ^^^^^^^^^^^^^^^^
163 |                 if include_result and result is not None:
164 |                     completion_data["result"] = str(result)[:200]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:165:1
    |
163 |                 if include_result and result is not None:
164 |                     completion_data["result"] = str(result)[:200]
165 |                 
    | ^^^^^^^^^^^^^^^^
166 |                 logger.log(log_level, f"Task completed: {task_name}", extra=completion_data)
167 |                 return result
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:168:1
    |
166 |                 logger.log(log_level, f"Task completed: {task_name}", extra=completion_data)
167 |                 return result
168 |                 
    | ^^^^^^^^^^^^^^^^
169 |             except Exception as e:
170 |                 duration = time.time() - start_time
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:179:1
    |
177 |                     "traceback": traceback.format_exc()
178 |                 }
179 |                 
    | ^^^^^^^^^^^^^^^^
180 |                 logger.error(f"Task failed: {task_name}", extra=error_data)
181 |                 raise
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:182:1
    |
180 |                 logger.error(f"Task failed: {task_name}", extra=error_data)
181 |                 raise
182 |                 
    | ^^^^^^^^^^^^^^^^
183 |             finally:
184 |                 TASK_ID.reset(token)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:185:1
    |
183 |             finally:
184 |                 TASK_ID.reset(token)
185 |         
    | ^^^^^^^^
186 |         # Return appropriate wrapper based on function type
187 |         if asyncio.iscoroutinefunction(func):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:191:1
    |
189 |         else:
190 |             return sync_wrapper
191 |     
    | ^^^^
192 |     return decorator
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/core/background_task_logging.py:198:1
    |
196 |     """
197 |     Decorator for logging WebSocket connection lifecycle.
198 |     
    | ^^^^
199 |     Args:
200 |         connection_name: Name of the WebSocket connection for logging
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:207:1
    |
205 |             websocket_id = f"{connection_name}_{int(time.time() * 1000)}"
206 |             ws_token = WEBSOCKET_ID.set(websocket_id)
207 |             
    | ^^^^^^^^^^^^
208 |             logger = logging.getLogger(func.__module__)
209 |             start_time = time.time()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:210:1
    |
208 |             logger = logging.getLogger(func.__module__)
209 |             start_time = time.time()
210 |             
    | ^^^^^^^^^^^^
211 |             # Extract job_id if available from kwargs
212 |             job_id = kwargs.get('job_id', 'unknown')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:214:1
    |
212 |             job_id = kwargs.get('job_id', 'unknown')
213 |             job_token = JOB_ID.set(job_id)
214 |             
    | ^^^^^^^^^^^^
215 |             log_data = {
216 |                 "connection_name": connection_name,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:222:1
    |
220 |                 "timestamp": datetime.now(UTC).isoformat(),
221 |             }
222 |             
    | ^^^^^^^^^^^^
223 |             logger.info(f"WebSocket connection started: {connection_name}", extra=log_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:224:1
    |
223 |             logger.info(f"WebSocket connection started: {connection_name}", extra=log_data)
224 |             
    | ^^^^^^^^^^^^
225 |             try:
226 |                 result = await func(*args, **kwargs)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:227:1
    |
225 |             try:
226 |                 result = await func(*args, **kwargs)
227 |                 
    | ^^^^^^^^^^^^^^^^
228 |                 duration = time.time() - start_time
229 |                 logger.info(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:238:1
    |
236 |                 )
237 |                 return result
238 |                 
    | ^^^^^^^^^^^^^^^^
239 |             except asyncio.CancelledError:
240 |                 duration = time.time() - start_time
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:250:1
    |
248 |                 )
249 |                 raise
250 |                 
    | ^^^^^^^^^^^^^^^^
251 |             except Exception as e:
252 |                 duration = time.time() - start_time
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:265:1
    |
263 |                 )
264 |                 raise
265 |                 
    | ^^^^^^^^^^^^^^^^
266 |             finally:
267 |                 WEBSOCKET_ID.reset(ws_token)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:269:1
    |
267 |                 WEBSOCKET_ID.reset(ws_token)
268 |                 JOB_ID.reset(job_token)
269 |         
    | ^^^^^^^^
270 |         return wrapper
271 |     return decorator
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/core/background_task_logging.py:282:1
    |
280 |     """
281 |     Context manager for logging async operations with timing and error handling.
282 |     
    | ^^^^
283 |     Args:
284 |         operation_name: Name of the operation
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:292:1
    |
290 |         frame = inspect.currentframe().f_back
291 |         logger_name = frame.f_globals.get('__name__', 'unknown')
292 |     
    | ^^^^
293 |     logger = logging.getLogger(logger_name)
294 |     start_time = time.time()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:296:1
    |
294 |     start_time = time.time()
295 |     operation_id = f"{operation_name}_{int(time.time() * 1000)}"
296 |     
    | ^^^^
297 |     log_data = {
298 |         "operation_name": operation_name,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:302:1
    |
300 |         "timestamp": datetime.now(UTC).isoformat(),
301 |     }
302 |     
    | ^^^^
303 |     if extra_context:
304 |         log_data.update(extra_context)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:305:1
    |
303 |     if extra_context:
304 |         log_data.update(extra_context)
305 |     
    | ^^^^
306 |     logger.info(f"Async operation started: {operation_name}", extra=log_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:307:1
    |
306 |     logger.info(f"Async operation started: {operation_name}", extra=log_data)
307 |     
    | ^^^^
308 |     try:
309 |         yield operation_id
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:310:1
    |
308 |     try:
309 |         yield operation_id
310 |         
    | ^^^^^^^^
311 |         duration = time.time() - start_time
312 |         logger.info(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:320:1
    |
318 |             }
319 |         )
320 |         
    | ^^^^^^^^
321 |     except Exception as e:
322 |         duration = time.time() - start_time
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/core/background_task_logging.py:340:1
    |
338 |     """
339 |     Setup enhanced logging for background tasks.
340 |     
    | ^^^^
341 |     This should be called during application startup to add the
342 |     BackgroundTaskFilter to the root logger.
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:345:1
    |
343 |     """
344 |     root_logger = logging.getLogger()
345 |     
    | ^^^^
346 |     # Check if filter is already added
347 |     for handler in root_logger.handlers:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:351:1
    |
349 |             if isinstance(filter_obj, BackgroundTaskFilter):
350 |                 return  # Already setup
351 |     
    | ^^^^
352 |     # Add the filter to all existing handlers
353 |     task_filter = BackgroundTaskFilter()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:356:1
    |
354 |     for handler in root_logger.handlers:
355 |         handler.addFilter(task_filter)
356 |     
    | ^^^^
357 |     logger.info("Background task logging setup completed")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/core/background_task_logging.py:367:1
    |
365 |     """
366 |     Create a background task with comprehensive error handling and logging.
367 |     
    | ^^^^
368 |     Args:
369 |         coro: Coroutine to run as background task
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/core/background_task_logging.py:372:1
    |
370 |         name: Optional name for the task
371 |         logger_name: Logger name for error reporting
372 |         
    | ^^^^^^^^
373 |     Returns:
374 |         asyncio.Task with error handling
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:380:1
    |
378 |         frame = inspect.currentframe().f_back
379 |         logger_name = frame.f_globals.get('__name__', 'background_task')
380 |     
    | ^^^^
381 |     task_logger = logging.getLogger(logger_name)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:382:1
    |
381 |     task_logger = logging.getLogger(logger_name)
382 |     
    | ^^^^
383 |     async def safe_wrapper():
384 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:399:1
    |
397 |             )
398 |             # Don't re-raise to prevent task from dying silently
399 |     
    | ^^^^
400 |     task = asyncio.create_task(safe_wrapper())
401 |     if name:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/background_task_logging.py:403:1
    |
401 |     if name:
402 |         task.set_name(name)
403 |     
    | ^^^^
404 |     return task
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/core/background_task_logging.py:404:16
    |
402 |         task.set_name(name)
403 |     
404 |     return task
    |                ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/core/cloudwatch_logging.py:22:5
   |
21 |   try:
22 | /     from watchtower import CloudWatchLogsHandler
23 | |     import boto3
   | |________________^
24 |       CLOUDWATCH_AVAILABLE = True
25 |   except ImportError:
   |
help: Organize imports

W293 Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:37:1
   |
35 |     """
36 |     Configure CloudWatch logging handler.
37 |     
   | ^^^^
38 |     Args:
39 |         log_group: CloudWatch log group name
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:43:1
   |
41 |         region: AWS region
42 |         level: Logging level
43 |         
   | ^^^^^^^^
44 |     Returns:
45 |         CloudWatchLogsHandler if successful, None otherwise
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:52:1
   |
50 |         )
51 |         return None
52 |     
   | ^^^^
53 |     # Configuration depuis les variables d'environnement
54 |     log_group = log_group or os.getenv("AWS_LOG_GROUP")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:57:1
   |
55 |     log_stream = log_stream or os.getenv("AWS_LOG_STREAM")
56 |     region = region or os.getenv("AWS_REGION", "eu-west-1")
57 |     
   | ^^^^
58 |     if not log_group:
59 |         logging.getLogger("cloudwatch").warning(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:63:1
   |
61 |         )
62 |         return None
63 |     
   | ^^^^
64 |     try:
65 |         # Créer le client CloudWatch Logs
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:71:1
   |
69 |             region_name=region
70 |         )
71 |         
   | ^^^^^^^^
72 |         # Configurer le handler CloudWatch
73 |         handler = CloudWatchLogsHandler(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:83:1
   |
81 |             create_log_stream=True,  # Créer le stream s'il n'existe pas
82 |         )
83 |         
   | ^^^^^^^^
84 |         handler.setLevel(level)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:85:1
   |
84 |         handler.setLevel(level)
85 |         
   | ^^^^^^^^
86 |         # Format JSON pour CloudWatch (compatible avec notre JSONFormatter)
87 |         from core.logging import JSONFormatter
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:89:1
   |
87 |         from core.logging import JSONFormatter
88 |         handler.setFormatter(JSONFormatter())
89 |         
   | ^^^^^^^^
90 |         logging.getLogger("cloudwatch").info(
91 |             "CloudWatch logging configured",
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/cloudwatch_logging.py:98:1
   |
96 |             }
97 |         )
98 |         
   | ^^^^^^^^
99 |         return handler
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/cloudwatch_logging.py:100:1
    |
 99 |         return handler
100 |         
    | ^^^^^^^^
101 |     except Exception as e:
102 |         logging.getLogger("cloudwatch").error(
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/core/cloudwatch_logging.py:112:1
    |
110 |     """
111 |     Ajoute CloudWatch handler à un logger existant.
112 |     
    | ^^^^
113 |     Args:
114 |         logger_name: Nom du logger (None pour root logger)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/core/cloudwatch_logging.py:115:1
    |
113 |     Args:
114 |         logger_name: Nom du logger (None pour root logger)
115 |         
    | ^^^^^^^^
116 |     Returns:
117 |         True si le handler a été ajouté avec succès
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/cloudwatch_logging.py:122:1
    |
120 |     if not handler:
121 |         return False
122 |     
    | ^^^^
123 |     logger = logging.getLogger(logger_name)
124 |     logger.addHandler(handler)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/cloudwatch_logging.py:125:1
    |
123 |     logger = logging.getLogger(logger_name)
124 |     logger.addHandler(handler)
125 |     
    | ^^^^
126 |     return True
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/core/cloudwatch_logging.py:132:1
    |
130 |     """
131 |     Configuration complète du logging avec CloudWatch optionnel.
132 |     
    | ^^^^
133 |     Cette fonction combine la configuration locale existante avec CloudWatch.
134 |     """
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/cloudwatch_logging.py:138:1
    |
136 |     from core.logging import setup_logging
137 |     setup_logging()
138 |     
    | ^^^^
139 |     # Ajout de CloudWatch si configuré
140 |     if os.getenv("ENABLE_CLOUDWATCH_LOGGING", "false").lower() == "true":
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/cloudwatch_logging.py:146:1
    |
144 |             root_logger = logging.getLogger()
145 |             root_logger.addHandler(cloudwatch_handler)
146 |             
    | ^^^^^^^^^^^^
147 |             # Filtres pour CloudWatch
148 |             from core.logging import RequestIdFilter, SecretsFilter
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/cloudwatch_logging.py:151:1
    |
149 |             cloudwatch_handler.addFilter(RequestIdFilter())
150 |             cloudwatch_handler.addFilter(SecretsFilter())
151 |             
    | ^^^^^^^^^^^^
152 |             logging.getLogger("app").info("Enhanced logging with CloudWatch enabled")
153 |         else:
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/core/cloudwatch_logging.py:156:116
    |
154 |             logging.getLogger("app").warning("CloudWatch logging requested but failed to configure")
155 |     else:
156 |         logging.getLogger("app").info("CloudWatch logging disabled (set ENABLE_CLOUDWATCH_LOGGING=true to enable)")
    |                                                                                                                    ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> src/core/config.py:1:1
  |
1 | / from pydantic_settings import BaseSettings, SettingsConfigDict
2 | | from pydantic import Field, AliasChoices
  | |________________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> src/core/config.py:14:1
   |
12 |     jwt_algorithm: str = "HS256"
13 |     access_token_expire_minutes: int = 60
14 |     
   | ^^^^
15 |     # Database connection pooling settings
16 |     db_pool_size: int = Field(default=10, description="Number of connections to maintain in the pool")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/config.py:21:1
   |
19 |     db_pool_recycle: int = Field(default=3600, description="Time in seconds to recycle connections")
20 |     db_pool_pre_ping: bool = Field(default=True, description="Enable connection health checks")
21 |     
   | ^^^^
22 |     # Query performance settings
23 |     db_echo: bool = Field(default=False, description="Enable SQL query logging")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/core/config.py:26:1
   |
24 |     db_echo_pool: bool = Field(default=False, description="Enable connection pool logging")
25 |     db_query_timeout: int = Field(default=30, description="Default query timeout in seconds")
26 |     
   | ^^^^
27 |     # Cache settings
28 |     redis_url: str = Field(default="redis://localhost:6379/0", description="Redis connection URL")
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> src/core/logging.py:1:1
  |
1 | / import logging
2 | | import os
3 | | import sys
4 | | import json
5 | | from datetime import datetime, UTC
6 | | import contextvars
7 | | from logging.handlers import RotatingFileHandler
  | |________________________________________________^
8 |
9 |   DEFAULT_LOG_RECORD_ATTRS = {
  |
help: Organize imports

W291 [*] Trailing whitespace
   --> src/core/logging.py:121:16
    |
119 | SENSITIVE_KEYS = {
120 |     "authorization",
121 |     "password", 
    |                ^
122 |     "secret",
123 |     "token",
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> src/core/logging.py:158:1
    |
156 |     """
157 |     Recursively redact sensitive information from log data.
158 |     
    | ^^^^
159 |     This function identifies and redacts:
160 |     - Dictionary keys that match sensitive patterns
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/logging.py:176:1
    |
174 |         # Check for sensitive patterns in string values
175 |         value_lower = value.lower()
176 |         
    | ^^^^^^^^
177 |         # Redact if string contains sensitive patterns
178 |         if any(pattern in value_lower for pattern in SENSITIVE_PATTERNS):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/logging.py:180:1
    |
178 |         if any(pattern in value_lower for pattern in SENSITIVE_PATTERNS):
179 |             return "[REDACTED]"
180 |         
    | ^^^^^^^^
181 |         # Redact long strings that might be tokens/keys (but preserve short ones)
182 |         if len(value) > 20 and any(key in value_lower for key in SENSITIVE_KEYS):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/logging.py:184:1
    |
182 |         if len(value) > 20 and any(key in value_lower for key in SENSITIVE_KEYS):
183 |             return "[REDACTED]"
184 |         
    | ^^^^^^^^
185 |         # Redact AWS ARNs and other identifiable patterns
186 |         if value.startswith(("arn:aws:", "AKIA", "ASIA")) or "-----BEGIN" in value:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/core/logging.py:188:1
    |
186 |         if value.startswith(("arn:aws:", "AKIA", "ASIA")) or "-----BEGIN" in value:
187 |             return "[REDACTED]"
188 |             
    | ^^^^^^^^^^^^
189 |         return value
190 |     return value
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> src/core/security.py:1:1
  |
1 | / from datetime import datetime, timedelta
2 | | from typing import Any, Dict, Optional
3 | |
4 | | from jose import jwt
5 | | from passlib.context import CryptContext
6 | |
7 | | from core.config import get_settings
  | |____________________________________^
  |
help: Organize imports

W292 [*] No newline at end of file
  --> src/core/security.py:29:23
   |
27 |         to_encode.update(extra_claims)
28 |     encoded_jwt = jwt.encode(to_encode, settings.jwt_secret, algorithm=settings.jwt_algorithm)
29 |     return encoded_jwt
   |                       ^
   |
help: Add trailing newline

W292 [*] No newline at end of file
 --> src/domain/__init__.py:1:17
  |
1 | # domain package
  |                 ^
  |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> src/domain/backtest.py:1:1
  |
1 | / from __future__ import annotations
2 | | from dataclasses import dataclass
3 | | import pandas as pd
4 | | from datetime import datetime
5 | | from typing import Dict, Any, Optional
  | |______________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> src/domain/interfaces.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | from typing import Protocol
4 | | import pandas as pd
5 | | from abc import ABC, abstractmethod
6 | | from domain.backtest import BacktestResult, BacktestParams
  | |__________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> src/domain/queue.py:7:1
   |
 5 |   and worker systems to enable a decoupled, scalable architecture.
 6 |   """
 7 | / from __future__ import annotations
 8 | | from abc import ABC, abstractmethod
 9 | | from dataclasses import dataclass, field
10 | | from datetime import datetime, UTC
11 | | from enum import Enum
12 | | from typing import Any, Dict, List, Optional, Callable, Generic, TypeVar
13 | | import uuid
   | |___________^
14 |
15 |   # Type variables for generic interfaces
   |
help: Organize imports

F401 [*] `typing.Callable` imported but unused
  --> src/domain/queue.py:12:47
   |
10 | from datetime import datetime, UTC
11 | from enum import Enum
12 | from typing import Any, Dict, List, Optional, Callable, Generic, TypeVar
   |                                               ^^^^^^^^
13 | import uuid
   |
help: Remove unused import: `typing.Callable`

W293 [*] Blank line contains whitespace
  --> src/domain/queue.py:63:1
   |
61 |     error: Optional[str] = None
62 |     progress: float = 0.0
63 |     
   | ^^^^
64 |     def update_status(self, status: JobStatus, error: Optional[str] = None) -> None:
65 |         """Update job status and timestamp"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/domain/queue.py:69:1
   |
67 |         self.error = error
68 |         self.metadata.updated_at = datetime.now(UTC)
69 |     
   | ^^^^
70 |     def update_progress(self, progress: float) -> None:
71 |         """Update job progress (clamped between 0.0 and 1.0) and timestamp"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:116:1
    |
114 | class QueueInterface(ABC, Generic[T]):
115 |     """Abstract interface for queue operations"""
116 |     
    | ^^^^
117 |     @abstractmethod
118 |     async def enqueue(self, job: Job[T]) -> str:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:121:1
    |
119 |         """
120 |         Enqueue a job and return job ID.
121 |         
    | ^^^^^^^^
122 |         Args:
123 |             job: Job to enqueue
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:124:1
    |
122 |         Args:
123 |             job: Job to enqueue
124 |             
    | ^^^^^^^^^^^^
125 |         Returns:
126 |             Job ID for tracking
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:129:1
    |
127 |         """
128 |         pass
129 |     
    | ^^^^
130 |     @abstractmethod
131 |     async def dequeue(self, timeout_seconds: Optional[int] = None) -> Optional[Job[T]]:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:134:1
    |
132 |         """
133 |         Dequeue a job for processing.
134 |         
    | ^^^^^^^^
135 |         Args:
136 |             timeout_seconds: Maximum time to wait for a job
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:137:1
    |
135 |         Args:
136 |             timeout_seconds: Maximum time to wait for a job
137 |             
    | ^^^^^^^^^^^^
138 |         Returns:
139 |             Job to process or None if timeout
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:142:1
    |
140 |         """
141 |         pass
142 |     
    | ^^^^
143 |     @abstractmethod
144 |     async def acknowledge(self, job_id: str) -> bool:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:147:1
    |
145 |         """
146 |         Acknowledge successful job completion.
147 |         
    | ^^^^^^^^
148 |         Args:
149 |             job_id: ID of completed job
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:150:1
    |
148 |         Args:
149 |             job_id: ID of completed job
150 |             
    | ^^^^^^^^^^^^
151 |         Returns:
152 |             True if acknowledged successfully
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:155:1
    |
153 |         """
154 |         pass
155 |     
    | ^^^^
156 |     @abstractmethod
157 |     async def reject(self, job_id: str, requeue: bool = True) -> bool:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:160:1
    |
158 |         """
159 |         Reject a job (failed processing).
160 |         
    | ^^^^^^^^
161 |         Args:
162 |             job_id: ID of failed job
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:164:1
    |
162 |             job_id: ID of failed job
163 |             requeue: Whether to requeue for retry
164 |             
    | ^^^^^^^^^^^^
165 |         Returns:
166 |             True if rejected successfully
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:169:1
    |
167 |         """
168 |         pass
169 |     
    | ^^^^
170 |     @abstractmethod
171 |     async def get_job_status(self, job_id: str) -> Optional[Job[T]]:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:174:1
    |
172 |         """
173 |         Get current status of a job.
174 |         
    | ^^^^^^^^
175 |         Args:
176 |             job_id: Job ID to query
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:177:1
    |
175 |         Args:
176 |             job_id: Job ID to query
177 |             
    | ^^^^^^^^^^^^
178 |         Returns:
179 |             Job with current status or None if not found
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:182:1
    |
180 |         """
181 |         pass
182 |     
    | ^^^^
183 |     @abstractmethod
184 |     async def cancel_job(self, job_id: str) -> bool:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:187:1
    |
185 |         """
186 |         Cancel a pending job.
187 |         
    | ^^^^^^^^
188 |         Args:
189 |             job_id: Job ID to cancel
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:190:1
    |
188 |         Args:
189 |             job_id: Job ID to cancel
190 |             
    | ^^^^^^^^^^^^
191 |         Returns:
192 |             True if cancelled successfully
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:195:1
    |
193 |         """
194 |         pass
195 |     
    | ^^^^
196 |     @abstractmethod
197 |     async def get_metrics(self) -> QueueMetrics:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:200:1
    |
198 |         """
199 |         Get queue metrics for monitoring.
200 |         
    | ^^^^^^^^
201 |         Returns:
202 |             Current queue metrics
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:212:1
    |
210 |         Implementations may return an adapter-specific object with at least
211 |         attributes: status, progress, error, retry_count, worker_id, message.
212 |         
    | ^^^^^^^^
213 |         Args:
214 |             job_id: Job ID to query
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:215:1
    |
213 |         Args:
214 |             job_id: Job ID to query
215 |         
    | ^^^^^^^^
216 |         Returns:
217 |             Progress info object or None if not available
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:224:1
    |
222 | class JobProcessorInterface(ABC, Generic[T, R]):
223 |     """Abstract interface for job processors"""
224 |     
    | ^^^^
225 |     @abstractmethod
226 |     async def process(self, job: Job[T]) -> R:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:229:1
    |
227 |         """
228 |         Process a job and return result.
229 |         
    | ^^^^^^^^
230 |         Args:
231 |             job: Job to process
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:232:1
    |
230 |         Args:
231 |             job: Job to process
232 |             
    | ^^^^^^^^^^^^
233 |         Returns:
234 |             Processing result
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:235:1
    |
233 |         Returns:
234 |             Processing result
235 |             
    | ^^^^^^^^^^^^
236 |         Raises:
237 |             Exception: If processing fails
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:240:1
    |
238 |         """
239 |         pass
240 |     
    | ^^^^
241 |     @abstractmethod
242 |     def get_processor_id(self) -> str:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:249:1
    |
247 | class ProgressCallbackInterface(ABC):
248 |     """Abstract interface for progress reporting"""
249 |     
    | ^^^^
250 |     @abstractmethod
251 |     async def report_progress(self, job_id: str, progress: float, message: Optional[str] = None) -> None:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:254:1
    |
252 |         """
253 |         Report job progress.
254 |         
    | ^^^^^^^^
255 |         Args:
256 |             job_id: Job ID
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:261:1
    |
259 |         """
260 |         pass
261 |     
    | ^^^^
262 |     @abstractmethod
263 |     async def report_completion(self, job_id: str, result: Any) -> None:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:266:1
    |
264 |         """
265 |         Report job completion.
266 |         
    | ^^^^^^^^
267 |         Args:
268 |             job_id: Job ID
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:272:1
    |
270 |         """
271 |         pass
272 |     
    | ^^^^
273 |     @abstractmethod
274 |     async def report_error(self, job_id: str, error: str) -> None:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:277:1
    |
275 |         """
276 |         Report job error.
277 |         
    | ^^^^^^^^
278 |         Args:
279 |             job_id: Job ID
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:287:1
    |
285 | class WorkerInterface(ABC):
286 |     """Abstract interface for worker processes"""
287 |     
    | ^^^^
288 |     @abstractmethod
289 |     async def start(self) -> None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:292:1
    |
290 |         """Start the worker process"""
291 |         pass
292 |     
    | ^^^^
293 |     @abstractmethod
294 |     async def stop(self) -> None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:297:1
    |
295 |         """Stop the worker process gracefully"""
296 |         pass
297 |     
    | ^^^^
298 |     @abstractmethod
299 |     async def health_check(self) -> bool:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:302:1
    |
300 |         """Check if worker is healthy"""
301 |         pass
302 |     
    | ^^^^
303 |     @abstractmethod
304 |     def get_worker_id(self) -> str:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:311:1
    |
309 | class JobManagerInterface(ABC):
310 |     """Abstract interface for job management"""
311 |     
    | ^^^^
312 |     @abstractmethod
313 |     async def submit_job(self, payload: Any, metadata: Optional[JobMetadata] = None) -> str:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:316:1
    |
314 |         """
315 |         Submit a new job.
316 |         
    | ^^^^^^^^
317 |         Args:
318 |             payload: Job payload
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:320:1
    |
318 |             payload: Job payload
319 |             metadata: Optional job metadata
320 |             
    | ^^^^^^^^^^^^
321 |         Returns:
322 |             Job ID
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:325:1
    |
323 |         """
324 |         pass
325 |     
    | ^^^^
326 |     @abstractmethod
327 |     async def get_job(self, job_id: str) -> Optional[Job]:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:330:1
    |
328 |         """
329 |         Get job by ID.
330 |         
    | ^^^^^^^^
331 |         Args:
332 |             job_id: Job ID
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:333:1
    |
331 |         Args:
332 |             job_id: Job ID
333 |             
    | ^^^^^^^^^^^^
334 |         Returns:
335 |             Job or None if not found
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:338:1
    |
336 |         """
337 |         pass
338 |     
    | ^^^^
339 |     @abstractmethod
340 |     async def list_jobs(
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/domain/queue.py:341:14
    |
339 |     @abstractmethod
340 |     async def list_jobs(
341 |         self, 
    |              ^
342 |         status: Optional[JobStatus] = None,
343 |         user_id: Optional[str] = None,
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> src/domain/queue.py:349:1
    |
347 |         """
348 |         List jobs with optional filtering.
349 |         
    | ^^^^^^^^
350 |         Args:
351 |             status: Filter by status
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:355:1
    |
353 |             limit: Maximum number of jobs
354 |             offset: Pagination offset
355 |             
    | ^^^^^^^^^^^^
356 |         Returns:
357 |             List of jobs
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:360:1
    |
358 |         """
359 |         pass
360 |     
    | ^^^^
361 |     @abstractmethod
362 |     async def cancel_job(self, job_id: str) -> bool:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:365:1
    |
363 |         """
364 |         Cancel a job.
365 |         
    | ^^^^^^^^
366 |         Args:
367 |             job_id: Job ID to cancel
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/domain/queue.py:368:1
    |
366 |         Args:
367 |             job_id: Job ID to cancel
368 |             
    | ^^^^^^^^^^^^
369 |         Returns:
370 |             True if cancelled successfully
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:377:1
    |
375 | class MonitoringInterface(ABC):
376 |     """Abstract interface for system monitoring"""
377 |     
    | ^^^^
378 |     @abstractmethod
379 |     async def record_metric(self, name: str, value: float, tags: Optional[Dict[str, str]] = None) -> None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:382:1
    |
380 |         """Record a metric value"""
381 |         pass
382 |     
    | ^^^^
383 |     @abstractmethod
384 |     async def increment_counter(self, name: str, tags: Optional[Dict[str, str]] = None) -> None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:387:1
    |
385 |         """Increment a counter metric"""
386 |         pass
387 |     
    | ^^^^
388 |     @abstractmethod
389 |     async def record_timing(self, name: str, duration_ms: float, tags: Optional[Dict[str, str]] = None) -> None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/domain/queue.py:392:1
    |
390 |         """Record a timing metric"""
391 |         pass
392 |     
    | ^^^^
393 |     @abstractmethod
394 |     async def get_health_status(self) -> Dict[str, Any]:
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/domain/queue.py:396:13
    |
394 |     async def get_health_status(self) -> Dict[str, Any]:
395 |         """Get system health status"""
396 |         pass
    |             ^
    |
help: Add trailing newline

W292 [*] No newline at end of file
  --> src/domain/schemas/auth.py:11:31
   |
 9 | class Token(BaseModel):
10 |     access_token: str
11 |     token_type: str = "bearer"
   |                               ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> src/domain/schemas/backtest.py:1:1
  |
1 | / from pydantic import BaseModel
2 | | from typing import List, Optional, Dict
  | |_______________________________________^
3 |
4 |   class MetricsDistribution(BaseModel):
  |
help: Organize imports

W292 [*] No newline at end of file
 --> src/infrastructure/__init__.py:1:25
  |
1 | # infrastructure package
  |                         ^
  |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/cache.py:7:1
   |
 5 |   with support for TTL, serialization, and cache invalidation patterns.
 6 |   """
 7 | / import json
 8 | | import logging
 9 | | from datetime import datetime, timedelta
10 | | from typing import Any, Optional, Dict, List, Union, AsyncGenerator
11 | | import redis.asyncio as redis
12 | | from redis.asyncio import Redis
13 | | import pickle
14 | | import hashlib
15 | |
16 | | from core.config import get_settings
17 | | from .redis_pubsub import enhanced_pubsub, PubSubMessage
   | |________________________________________________________^
18 |
19 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

F401 [*] `datetime.datetime` imported but unused
  --> src/infrastructure/cache.py:9:22
   |
 7 | import json
 8 | import logging
 9 | from datetime import datetime, timedelta
   |                      ^^^^^^^^
10 | from typing import Any, Optional, Dict, List, Union, AsyncGenerator
11 | import redis.asyncio as redis
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> src/infrastructure/cache.py:9:32
   |
 7 | import json
 8 | import logging
 9 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
10 | from typing import Any, Optional, Dict, List, Union, AsyncGenerator
11 | import redis.asyncio as redis
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> src/infrastructure/cache.py:10:41
   |
 8 | import logging
 9 | from datetime import datetime, timedelta
10 | from typing import Any, Optional, Dict, List, Union, AsyncGenerator
   |                                         ^^^^
11 | import redis.asyncio as redis
12 | from redis.asyncio import Redis
   |
help: Remove unused import

F401 [*] `typing.Union` imported but unused
  --> src/infrastructure/cache.py:10:47
   |
 8 | import logging
 9 | from datetime import datetime, timedelta
10 | from typing import Any, Optional, Dict, List, Union, AsyncGenerator
   |                                               ^^^^^
11 | import redis.asyncio as redis
12 | from redis.asyncio import Redis
   |
help: Remove unused import

F401 [*] `.redis_pubsub.PubSubMessage` imported but unused
  --> src/infrastructure/cache.py:17:44
   |
16 | from core.config import get_settings
17 | from .redis_pubsub import enhanced_pubsub, PubSubMessage
   |                                            ^^^^^^^^^^^^^
18 |
19 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `.redis_pubsub.PubSubMessage`

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:25:1
   |
23 | class CacheManager:
24 |     """Redis-based cache manager with performance optimizations"""
25 |     
   | ^^^^
26 |     def __init__(self, redis_url: Optional[str] = None):
27 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/cache.py:29:1
   |
27 |         """
28 |         Initialize cache manager.
29 |         
   | ^^^^^^^^
30 |         Args:
31 |             redis_url: Redis connection URL (defaults to settings)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:37:1
   |
35 |         self.default_ttl = settings.cache_ttl
36 |         self._redis: Optional[Redis] = None
37 |         
   | ^^^^^^^^
38 |         if not self.enabled:
39 |             logger.info("Caching is disabled")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:40:1
   |
38 |         if not self.enabled:
39 |             logger.info("Caching is disabled")
40 |     
   | ^^^^
41 |     async def connect(self) -> None:
42 |         """Connect to Redis and initialize enhanced pub/sub"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:45:1
   |
43 |         if not self.enabled:
44 |             return
45 |             
   | ^^^^^^^^^^^^
46 |         try:
47 |             self._redis = redis.from_url(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:56:1
   |
54 |                 health_check_interval=30
55 |             )
56 |             
   | ^^^^^^^^^^^^
57 |             # Test connection
58 |             await self._redis.ping()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:59:1
   |
57 |             # Test connection
58 |             await self._redis.ping()
59 |             
   | ^^^^^^^^^^^^
60 |             # Initialize enhanced pub/sub
61 |             await enhanced_pubsub.initialize()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:62:1
   |
60 |             # Initialize enhanced pub/sub
61 |             await enhanced_pubsub.initialize()
62 |             
   | ^^^^^^^^^^^^
63 |             logger.info("Connected to Redis cache and initialized enhanced pub/sub", extra={
64 |                 "redis_url": self.redis_url.split('@')[0] + '@[REDACTED]' if '@' in self.redis_url else self.redis_url
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:66:1
   |
64 |                 "redis_url": self.redis_url.split('@')[0] + '@[REDACTED]' if '@' in self.redis_url else self.redis_url
65 |             })
66 |             
   | ^^^^^^^^^^^^
67 |         except Exception as e:
68 |             logger.error("Failed to connect to Redis", extra={
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:73:1
   |
71 |             })
72 |             self.enabled = False
73 |     
   | ^^^^
74 |     async def disconnect(self) -> None:
75 |         """Disconnect from Redis and shutdown enhanced pub/sub"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:78:1
   |
76 |         # Shutdown enhanced pub/sub first
77 |         await enhanced_pubsub.shutdown()
78 |         
   | ^^^^^^^^
79 |         if self._redis:
80 |             await self._redis.close()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:83:1
   |
81 |             self._redis = None
82 |             logger.info("Disconnected from Redis cache and shutdown enhanced pub/sub")
83 |     
   | ^^^^
84 |     def is_connected(self) -> bool:
85 |         """Check if Redis is connected and available"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:87:1
   |
85 |         """Check if Redis is connected and available"""
86 |         return self.enabled and self._redis is not None
87 |     
   | ^^^^
88 |     def _generate_key(self, prefix: str, identifier: str, **kwargs) -> str:
89 |         """Generate cache key with consistent hashing"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/cache.py:91:1
   |
89 |         """Generate cache key with consistent hashing"""
90 |         key_parts = [prefix, identifier]
91 |         
   | ^^^^^^^^
92 |         # Add sorted kwargs for consistent key generation
93 |         if kwargs:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:99:1
    |
 97 |             ).hexdigest()[:8]
 98 |             key_parts.append(key_suffix)
 99 |         
    | ^^^^^^^^
100 |         return ":".join(key_parts)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:101:1
    |
100 |         return ":".join(key_parts)
101 |     
    | ^^^^
102 |     def _serialize(self, data: Any) -> bytes:
103 |         """Serialize data for storage"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:110:1
    |
108 |         except (TypeError, ValueError):
109 |             pass
110 |         
    | ^^^^^^^^
111 |         # Fall back to pickle for complex objects
112 |         return pickle.dumps(data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:113:1
    |
111 |         # Fall back to pickle for complex objects
112 |         return pickle.dumps(data)
113 |     
    | ^^^^
114 |     def _deserialize(self, data: bytes) -> Any:
115 |         """Deserialize data from storage"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:122:1
    |
120 |             # Fall back to pickle
121 |             return pickle.loads(data)
122 |     
    | ^^^^
123 |     async def get(self, key: str) -> Optional[Any]:
124 |         """Get value from cache"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:127:1
    |
125 |         if not self.enabled or not self._redis:
126 |             return None
127 |         
    | ^^^^^^^^
128 |         try:
129 |             data = await self._redis.get(key)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:132:1
    |
130 |             if data is None:
131 |                 return None
132 |             
    | ^^^^^^^^^^^^
133 |             return self._deserialize(data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:134:1
    |
133 |             return self._deserialize(data)
134 |             
    | ^^^^^^^^^^^^
135 |         except Exception as e:
136 |             logger.warning("Cache get failed", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:141:1
    |
139 |             })
140 |             return None
141 |     
    | ^^^^
142 |     async def set(
143 |         self, 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/infrastructure/cache.py:143:14
    |
142 |     async def set(
143 |         self, 
    |              ^
144 |         key: str, 
145 |         value: Any, 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/infrastructure/cache.py:144:18
    |
142 |     async def set(
143 |         self, 
144 |         key: str, 
    |                  ^
145 |         value: Any, 
146 |         ttl: Optional[int] = None,
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/infrastructure/cache.py:145:20
    |
143 |         self, 
144 |         key: str, 
145 |         value: Any, 
    |                    ^
146 |         ttl: Optional[int] = None,
147 |         nx: bool = False
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> src/infrastructure/cache.py:151:1
    |
149 |         """
150 |         Set value in cache.
151 |         
    | ^^^^^^^^
152 |         Args:
153 |             key: Cache key
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/cache.py:157:1
    |
155 |             ttl: Time to live in seconds (defaults to default_ttl)
156 |             nx: Only set if key doesn't exist
157 |             
    | ^^^^^^^^^^^^
158 |         Returns:
159 |             True if set successfully
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:163:1
    |
161 |         if not self.enabled or not self._redis:
162 |             return False
163 |         
    | ^^^^^^^^
164 |         try:
165 |             serialized_data = self._serialize(value)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:167:1
    |
165 |             serialized_data = self._serialize(value)
166 |             ttl = ttl or self.default_ttl
167 |             
    | ^^^^^^^^^^^^
168 |             result = await self._redis.set(
169 |                 key, 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/infrastructure/cache.py:169:21
    |
168 |             result = await self._redis.set(
169 |                 key, 
    |                     ^
170 |                 serialized_data, 
171 |                 ex=ttl,
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/infrastructure/cache.py:170:33
    |
168 |             result = await self._redis.set(
169 |                 key, 
170 |                 serialized_data, 
    |                                 ^
171 |                 ex=ttl,
172 |                 nx=nx
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:174:1
    |
172 |                 nx=nx
173 |             )
174 |             
    | ^^^^^^^^^^^^
175 |             return bool(result)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:176:1
    |
175 |             return bool(result)
176 |             
    | ^^^^^^^^^^^^
177 |         except Exception as e:
178 |             logger.warning("Cache set failed", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:184:1
    |
182 |             })
183 |             return False
184 |     
    | ^^^^
185 |     async def delete(self, key: str) -> bool:
186 |         """Delete key from cache"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:189:1
    |
187 |         if not self.enabled or not self._redis:
188 |             return False
189 |         
    | ^^^^^^^^
190 |         try:
191 |             result = await self._redis.delete(key)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:193:1
    |
191 |             result = await self._redis.delete(key)
192 |             return result > 0
193 |             
    | ^^^^^^^^^^^^
194 |         except Exception as e:
195 |             logger.warning("Cache delete failed", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:200:1
    |
198 |             })
199 |             return False
200 |     
    | ^^^^
201 |     async def delete_pattern(self, pattern: str) -> int:
202 |         """Delete all keys matching pattern"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:205:1
    |
203 |         if not self.enabled or not self._redis:
204 |             return 0
205 |         
    | ^^^^^^^^
206 |         try:
207 |             keys = await self._redis.keys(pattern)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:216:1
    |
214 |                 return result
215 |             return 0
216 |             
    | ^^^^^^^^^^^^
217 |         except Exception as e:
218 |             logger.warning("Cache pattern delete failed", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:223:1
    |
221 |             })
222 |             return 0
223 |     
    | ^^^^
224 |     async def exists(self, key: str) -> bool:
225 |         """Check if key exists in cache"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:228:1
    |
226 |         if not self.enabled or not self._redis:
227 |             return False
228 |         
    | ^^^^^^^^
229 |         try:
230 |             result = await self._redis.exists(key)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:232:1
    |
230 |             result = await self._redis.exists(key)
231 |             return result > 0
232 |             
    | ^^^^^^^^^^^^
233 |         except Exception as e:
234 |             logger.warning("Cache exists check failed", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:239:1
    |
237 |             })
238 |             return False
239 |     
    | ^^^^
240 |     async def ttl(self, key: str) -> int:
241 |         """Get TTL for key (-1 if no expiry, -2 if key doesn't exist)"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:244:1
    |
242 |         if not self.enabled or not self._redis:
243 |             return -2
244 |         
    | ^^^^^^^^
245 |         try:
246 |             return await self._redis.ttl(key)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:247:1
    |
245 |         try:
246 |             return await self._redis.ttl(key)
247 |             
    | ^^^^^^^^^^^^
248 |         except Exception as e:
249 |             logger.warning("Cache TTL check failed", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:254:1
    |
252 |             })
253 |             return -2
254 |     
    | ^^^^
255 |     async def increment(self, key: str, amount: int = 1, ttl: Optional[int] = None) -> int:
256 |         """Increment counter in cache"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:259:1
    |
257 |         if not self.enabled or not self._redis:
258 |             return 0
259 |         
    | ^^^^^^^^
260 |         try:
261 |             result = await self._redis.incr(key, amount)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:262:1
    |
260 |         try:
261 |             result = await self._redis.incr(key, amount)
262 |             
    | ^^^^^^^^^^^^
263 |             # Set TTL if this is a new key
264 |             if result == amount and ttl:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:266:1
    |
264 |             if result == amount and ttl:
265 |                 await self._redis.expire(key, ttl)
266 |             
    | ^^^^^^^^^^^^
267 |             return result
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:268:1
    |
267 |             return result
268 |             
    | ^^^^^^^^^^^^
269 |         except Exception as e:
270 |             logger.warning("Cache increment failed", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:276:1
    |
274 |             })
275 |             return 0
276 |     
    | ^^^^
277 |     async def get_stats(self) -> Dict[str, Any]:
278 |         """Get cache statistics"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:284:1
    |
282 |                 "connected": False
283 |             }
284 |         
    | ^^^^^^^^
285 |         try:
286 |             info = await self._redis.info()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:305:1
    |
303 |                 "error": str(e)
304 |             }
305 |     
    | ^^^^
306 |     async def publish(self, channel: str, message: Any, ensure_delivery: bool = False) -> int:
307 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/cache.py:309:1
    |
307 |         """
308 |         Publish a message to a Redis channel using enhanced pub/sub.
309 |         
    | ^^^^^^^^
310 |         Args:
311 |             channel: Channel name
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/cache.py:314:1
    |
312 |             message: Message to publish (will be JSON serialized)
313 |             ensure_delivery: Whether to ensure message delivery
314 |             
    | ^^^^^^^^^^^^
315 |         Returns:
316 |             Number of subscribers that received the message (1 if successful with enhanced pub/sub, 0 if failed)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:320:1
    |
318 |         if not self.enabled:
319 |             return 0
320 |         
    | ^^^^^^^^
321 |         # Use enhanced pub/sub for better reliability
322 |         success = await enhanced_pubsub.publish(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:327:1
    |
325 |             ensure_delivery=ensure_delivery
326 |         )
327 |         
    | ^^^^^^^^
328 |         return 1 if success else 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:329:1
    |
328 |         return 1 if success else 0
329 |     
    | ^^^^
330 |     async def subscribe(self, *channels: str) -> AsyncGenerator[Dict[str, Any], None]:
331 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/cache.py:333:1
    |
331 |         """
332 |         Subscribe to Redis channels using enhanced pub/sub with automatic reconnection.
333 |         
    | ^^^^^^^^
334 |         Args:
335 |             channels: Channel names to subscribe to
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/cache.py:336:1
    |
334 |         Args:
335 |             channels: Channel names to subscribe to
336 |             
    | ^^^^^^^^^^^^
337 |         Yields:
338 |             Dict with 'channel' and 'data' keys for each message
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:343:1
    |
341 |             logger.warning("Redis not available for pub/sub subscription")
342 |             return
343 |         
    | ^^^^^^^^
344 |         try:
345 |             async with enhanced_pubsub.subscribe(*channels) as message_stream:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:360:1
    |
358 |         """Get enhanced pub/sub metrics"""
359 |         return enhanced_pubsub.get_metrics()
360 |     
    | ^^^^
361 |     async def get_pubsub_health(self) -> Dict[str, Any]:
362 |         """Get enhanced pub/sub health status"""
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/infrastructure/cache.py:377:14
    |
376 | async def set_cached(
377 |     key: str, 
    |              ^
378 |     value: Any, 
379 |     ttl: Optional[int] = None
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/infrastructure/cache.py:378:16
    |
376 | async def set_cached(
377 |     key: str, 
378 |     value: Any, 
    |                ^
379 |     ttl: Optional[int] = None
380 | ) -> bool:
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/infrastructure/cache.py:406:24
    |
404 |             }
405 |             cache_key = cache_manager._generate_key(
406 |                 prefix, 
    |                        ^
407 |                 func.__name__, 
408 |                 **key_data
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/infrastructure/cache.py:407:31
    |
405 |             cache_key = cache_manager._generate_key(
406 |                 prefix, 
407 |                 func.__name__, 
    |                               ^
408 |                 **key_data
409 |             )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:410:1
    |
408 |                 **key_data
409 |             )
410 |             
    | ^^^^^^^^^^^^
411 |             # Try to get from cache first
412 |             cached_value = await cache_manager.get(cache_key)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:419:1
    |
417 |                 })
418 |                 return cached_value
419 |             
    | ^^^^^^^^^^^^
420 |             # Execute function and cache result
421 |             result = await func(*args, **kwargs)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:423:1
    |
421 |             result = await func(*args, **kwargs)
422 |             await cache_manager.set(cache_key, result, ttl)
423 |             
    | ^^^^^^^^^^^^
424 |             logger.debug("Cache miss - stored result", extra={
425 |                 "function": func.__name__,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/cache.py:428:1
    |
426 |                 "cache_key": cache_key
427 |             })
428 |             
    | ^^^^^^^^^^^^
429 |             return result
430 |         return wrapper
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/cache.py:431:21
    |
429 |             return result
430 |         return wrapper
431 |     return decorator
    |                     ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/db.py:1:1
   |
 1 | / from sqlalchemy.orm import sessionmaker, DeclarativeBase
 2 | | from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
 3 | | from sqlalchemy.pool import AsyncAdaptedQueuePool
 4 | | from sqlalchemy import event
 5 | | from urllib.parse import urlparse
 6 | | import logging
 7 | |
 8 | | from core.config import get_settings
   | |____________________________________^
 9 |
10 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/db.py:94:5
   |
92 | async def init_db() -> None:
93 |     """Initialize database with performance monitoring"""
94 |     from infrastructure.models import User, Strategy, Backtest, Job  # noqa: F401
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
95 |     
96 |     logger.info("Database initialized", extra={
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> src/infrastructure/db.py:95:1
   |
93 |     """Initialize database with performance monitoring"""
94 |     from infrastructure.models import User, Strategy, Backtest, Job  # noqa: F401
95 |     
   | ^^^^
96 |     logger.info("Database initialized", extra={
97 |         "db_url": ASYNC_DB_URL.split('@')[0] + '@[REDACTED]',  # Mask credentials
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/db_indexes.py:7:1
   |
 5 |   to improve query performance for the trading platform.
 6 |   """
 7 | / import logging
 8 | | from typing import List, Dict, Any
 9 | | from sqlalchemy import text
10 | | from sqlalchemy.ext.asyncio import AsyncSession
   | |_______________________________________________^
11 |
12 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> src/infrastructure/db_indexes.py:17:1
   |
15 | class IndexManager:
16 |     """Manages database indexes for performance optimization"""
17 |     
   | ^^^^
18 |     def __init__(self, session: AsyncSession):
19 |         self.session = session
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/db_indexes.py:20:1
   |
18 |     def __init__(self, session: AsyncSession):
19 |         self.session = session
20 |     
   | ^^^^
21 |     async def create_performance_indexes(self) -> Dict[str, bool]:
22 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/db_indexes.py:24:1
   |
22 |         """
23 |         Create performance-optimized indexes for frequently queried columns.
24 |         
   | ^^^^^^^^
25 |         Returns:
26 |             Dictionary mapping index name to creation success status
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/db_indexes.py:29:1
   |
27 |         """
28 |         results = {}
29 |         
   | ^^^^^^^^
30 |         # Job table indexes for common query patterns
31 |         job_indexes = [
   |
help: Remove whitespace from blank line

W291 Trailing whitespace
  --> src/infrastructure/db_indexes.py:35:87
   |
33 |                 "name": "idx_jobs_status_created_at",
34 |                 "sql": """
35 |                     CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_jobs_status_created_at 
   |                                                                                       ^
36 |                     ON jobs (status, created_at DESC)
37 |                 """,
   |
help: Remove trailing whitespace

W291 Trailing whitespace
  --> src/infrastructure/db_indexes.py:43:83
   |
41 |                 "name": "idx_jobs_worker_status",
42 |                 "sql": """
43 |                     CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_jobs_worker_status 
   |                                                                                   ^
44 |                     ON jobs (worker_id, status) WHERE worker_id IS NOT NULL
45 |                 """,
   |
help: Remove trailing whitespace

W291 Trailing whitespace
  --> src/infrastructure/db_indexes.py:51:89
   |
49 |                 "name": "idx_jobs_priority_created_at",
50 |                 "sql": """
51 |                     CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_jobs_priority_created_at 
   |                                                                                         ^
52 |                     ON jobs (priority, created_at) WHERE status IN ('pending', 'retry')
53 |                 """,
   |
help: Remove trailing whitespace

W291 Trailing whitespace
  --> src/infrastructure/db_indexes.py:59:84
   |
57 |                 "name": "idx_jobs_dedup_key_hash",
58 |                 "sql": """
59 |                     CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_jobs_dedup_key_hash 
   |                                                                                    ^
60 |                     ON jobs USING hash (dedup_key) WHERE dedup_key IS NOT NULL
61 |                 """,
   |
help: Remove trailing whitespace

W291 Trailing whitespace
  --> src/infrastructure/db_indexes.py:67:87
   |
65 |                 "name": "idx_jobs_updated_at_status",
66 |                 "sql": """
67 |                     CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_jobs_updated_at_status 
   |                                                                                       ^
68 |                     ON jobs (updated_at DESC, status) WHERE status IN ('processing', 'completed', 'failed')
69 |                 """,
   |
help: Remove trailing whitespace

W291 Trailing whitespace
  --> src/infrastructure/db_indexes.py:75:89
   |
73 |                 "name": "idx_jobs_progress_processing",
74 |                 "sql": """
75 |                     CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_jobs_progress_processing 
   |                                                                                         ^
76 |                     ON jobs (progress, updated_at DESC) WHERE status = 'processing'
77 |                 """,
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> src/infrastructure/db_indexes.py:81:1
   |
79 |             }
80 |         ]
81 |         
   | ^^^^^^^^
82 |         # User table indexes (if exists)
83 |         user_indexes = [
   |
help: Remove whitespace from blank line

W291 Trailing whitespace
  --> src/infrastructure/db_indexes.py:87:82
   |
85 |                 "name": "idx_users_email_lower",
86 |                 "sql": """
87 |                     CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_email_lower 
   |                                                                                  ^
88 |                     ON users (LOWER(email))
89 |                 """,
   |
help: Remove trailing whitespace

W291 Trailing whitespace
  --> src/infrastructure/db_indexes.py:95:81
   |
93 |                 "name": "idx_users_created_at",
94 |                 "sql": """
95 |                     CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_created_at 
   |                                                                                 ^
96 |                     ON users (created_at DESC)
97 |                 """,
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:101:1
    |
 99 |             }
100 |         ]
101 |         
    | ^^^^^^^^
102 |         all_indexes = job_indexes + user_indexes
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:103:1
    |
102 |         all_indexes = job_indexes + user_indexes
103 |         
    | ^^^^^^^^
104 |         for index_config in all_indexes:
105 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:108:1
    |
106 |                 await self.session.execute(text(index_config["sql"]))
107 |                 await self.session.commit()
108 |                 
    | ^^^^^^^^^^^^^^^^
109 |                 results[index_config["name"]] = True
110 |                 logger.info("Created database index", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:114:1
    |
112 |                     "description": index_config["description"]
113 |                 })
114 |                 
    | ^^^^^^^^^^^^^^^^
115 |             except Exception as e:
116 |                 await self.session.rollback()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:122:1
    |
120 |                     "error": str(e)
121 |                 })
122 |         
    | ^^^^^^^^
123 |         return results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:124:1
    |
123 |         return results
124 |     
    | ^^^^
125 |     async def analyze_table_statistics(self, table_name: str) -> Dict[str, Any]:
126 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:128:1
    |
126 |         """
127 |         Analyze table statistics for query optimization.
128 |         
    | ^^^^^^^^
129 |         Args:
130 |             table_name: Name of the table to analyze
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:131:1
    |
129 |         Args:
130 |             table_name: Name of the table to analyze
131 |             
    | ^^^^^^^^^^^^
132 |         Returns:
133 |             Dictionary containing table statistics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:138:1
    |
136 |             # Update table statistics
137 |             await self.session.execute(text(f"ANALYZE {table_name}"))
138 |             
    | ^^^^^^^^^^^^
139 |             # Get table size and row count
140 |             stats_query = text("""
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> src/infrastructure/db_indexes.py:141:23
    |
139 |             # Get table size and row count
140 |             stats_query = text("""
141 |                 SELECT 
    |                       ^
142 |                     schemaname,
143 |                     tablename,
    |
help: Remove trailing whitespace

W291 Trailing whitespace
   --> src/infrastructure/db_indexes.py:149:30
    |
147 |                     most_common_vals,
148 |                     most_common_freqs
149 |                 FROM pg_stats 
    |                              ^
150 |                 WHERE tablename = :table_name
151 |                 ORDER BY attname
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:153:1
    |
151 |                 ORDER BY attname
152 |             """)
153 |             
    | ^^^^^^^^^^^^
154 |             result = await self.session.execute(stats_query, {"table_name": table_name})
155 |             stats = result.fetchall()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:156:1
    |
154 |             result = await self.session.execute(stats_query, {"table_name": table_name})
155 |             stats = result.fetchall()
156 |             
    | ^^^^^^^^^^^^
157 |             # Get table size information
158 |             size_query = text("""
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> src/infrastructure/db_indexes.py:159:23
    |
157 |             # Get table size information
158 |             size_query = text("""
159 |                 SELECT 
    |                       ^
160 |                     pg_size_pretty(pg_total_relation_size(:table_name)) as total_size,
161 |                     pg_size_pretty(pg_relation_size(:table_name)) as table_size,
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:164:1
    |
162 |                     (SELECT count(*) FROM """ + table_name + """) as row_count
163 |             """)
164 |             
    | ^^^^^^^^^^^^
165 |             size_result = await self.session.execute(size_query, {"table_name": table_name})
166 |             size_info = size_result.fetchone()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:167:1
    |
165 |             size_result = await self.session.execute(size_query, {"table_name": table_name})
166 |             size_info = size_result.fetchone()
167 |             
    | ^^^^^^^^^^^^
168 |             return {
169 |                 "table_name": table_name,
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/infrastructure/db_indexes.py:171:80
    |
169 |                 "table_name": table_name,
170 |                 "total_size": size_info.total_size if size_info else "Unknown",
171 |                 "table_size": size_info.table_size if size_info else "Unknown", 
    |                                                                                ^
172 |                 "row_count": size_info.row_count if size_info else 0,
173 |                 "column_stats": [
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:184:1
    |
182 |                 ]
183 |             }
184 |             
    | ^^^^^^^^^^^^
185 |         except Exception as e:
186 |             logger.error("Failed to analyze table statistics", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:191:1
    |
189 |             })
190 |             return {"error": str(e)}
191 |     
    | ^^^^
192 |     async def get_slow_queries(self, limit: int = 10) -> List[Dict[str, Any]]:
193 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:195:1
    |
193 |         """
194 |         Get slow queries from pg_stat_statements (if available).
195 |         
    | ^^^^^^^^
196 |         Args:
197 |             limit: Maximum number of queries to return
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:198:1
    |
196 |         Args:
197 |             limit: Maximum number of queries to return
198 |             
    | ^^^^^^^^^^^^
199 |         Returns:
200 |             List of slow query information
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:209:1
    |
207 |                 )
208 |             """)
209 |             
    | ^^^^^^^^^^^^
210 |             result = await self.session.execute(check_extension)
211 |             has_extension = result.scalar()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:212:1
    |
210 |             result = await self.session.execute(check_extension)
211 |             has_extension = result.scalar()
212 |             
    | ^^^^^^^^^^^^
213 |             if not has_extension:
214 |                 logger.warning("pg_stat_statements extension not available")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:216:1
    |
214 |                 logger.warning("pg_stat_statements extension not available")
215 |                 return []
216 |             
    | ^^^^^^^^^^^^
217 |             # Get slow queries
218 |             slow_queries = text("""
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> src/infrastructure/db_indexes.py:219:23
    |
217 |             # Get slow queries
218 |             slow_queries = text("""
219 |                 SELECT 
    |                       ^
220 |                     query,
221 |                     calls,
    |
help: Remove trailing whitespace

W291 Trailing whitespace
   --> src/infrastructure/db_indexes.py:226:40
    |
224 |                     rows,
225 |                     100.0 * shared_blks_hit / nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
226 |                 FROM pg_stat_statements 
    |                                        ^
227 |                 WHERE query NOT LIKE '%pg_stat_statements%'
228 |                 ORDER BY total_time DESC 
    |
help: Remove trailing whitespace

W291 Trailing whitespace
   --> src/infrastructure/db_indexes.py:228:41
    |
226 |                 FROM pg_stat_statements 
227 |                 WHERE query NOT LIKE '%pg_stat_statements%'
228 |                 ORDER BY total_time DESC 
    |                                         ^
229 |                 LIMIT :limit
230 |             """)
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:231:1
    |
229 |                 LIMIT :limit
230 |             """)
231 |             
    | ^^^^^^^^^^^^
232 |             result = await self.session.execute(slow_queries, {"limit": limit})
233 |             queries = result.fetchall()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:234:1
    |
232 |             result = await self.session.execute(slow_queries, {"limit": limit})
233 |             queries = result.fetchall()
234 |             
    | ^^^^^^^^^^^^
235 |             return [
236 |                 {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:246:1
    |
244 |                 for query in queries
245 |             ]
246 |             
    | ^^^^^^^^^^^^
247 |         except Exception as e:
248 |             logger.error("Failed to get slow queries", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:252:1
    |
250 |             })
251 |             return []
252 |     
    | ^^^^
253 |     async def optimize_table(self, table_name: str) -> Dict[str, Any]:
254 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:256:1
    |
254 |         """
255 |         Optimize a table by running VACUUM and ANALYZE.
256 |         
    | ^^^^^^^^
257 |         Args:
258 |             table_name: Name of the table to optimize
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:259:1
    |
257 |         Args:
258 |             table_name: Name of the table to optimize
259 |             
    | ^^^^^^^^^^^^
260 |         Returns:
261 |             Dictionary containing optimization results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:267:1
    |
265 |             vacuum_query = text(f"VACUUM ANALYZE {table_name}")
266 |             await self.session.execute(vacuum_query)
267 |             
    | ^^^^^^^^^^^^
268 |             logger.info("Optimized table", extra={
269 |                 "table_name": table_name,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:272:1
    |
270 |                 "operation": "VACUUM ANALYZE"
271 |             })
272 |             
    | ^^^^^^^^^^^^
273 |             # Get updated statistics
274 |             stats = await self.analyze_table_statistics(table_name)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:275:1
    |
273 |             # Get updated statistics
274 |             stats = await self.analyze_table_statistics(table_name)
275 |             
    | ^^^^^^^^^^^^
276 |             return {
277 |                 "success": True,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:282:1
    |
280 |                 "statistics": stats
281 |             }
282 |             
    | ^^^^^^^^^^^^
283 |         except Exception as e:
284 |             logger.error("Failed to optimize table", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:293:1
    |
291 |                 "error": str(e)
292 |             }
293 |     
    | ^^^^
294 |     async def get_index_usage_stats(self) -> List[Dict[str, Any]]:
295 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:297:1
    |
295 |         """
296 |         Get index usage statistics.
297 |         
    | ^^^^^^^^
298 |         Returns:
299 |             List of index usage statistics
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> src/infrastructure/db_indexes.py:303:23
    |
301 |         try:
302 |             query = text("""
303 |                 SELECT 
    |                       ^
304 |                     schemaname,
305 |                     tablename,
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:313:1
    |
311 |                 ORDER BY idx_scan DESC;
312 |             """)
313 |             
    | ^^^^^^^^^^^^
314 |             result = await self.session.execute(query)
315 |             stats = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:316:1
    |
314 |             result = await self.session.execute(query)
315 |             stats = []
316 |             
    | ^^^^^^^^^^^^
317 |             for row in result:
318 |                 stats.append({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:326:1
    |
324 |                     "scans": row.idx_scan
325 |                 })
326 |             
    | ^^^^^^^^^^^^
327 |             logger.info("Retrieved index usage statistics", extra={
328 |                 "index_count": len(stats)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:330:1
    |
328 |                 "index_count": len(stats)
329 |             })
330 |             
    | ^^^^^^^^^^^^
331 |             return stats
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:332:1
    |
331 |             return stats
332 |             
    | ^^^^^^^^^^^^
333 |         except Exception as e:
334 |             logger.error("Failed to get index usage statistics", extra={
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:343:1
    |
341 |     """
342 |     Convenience function to create all performance indexes.
343 |     
    | ^^^^
344 |     Args:
345 |         session: Database session
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:346:1
    |
344 |     Args:
345 |         session: Database session
346 |         
    | ^^^^^^^^
347 |     Returns:
348 |         Dictionary mapping index name to creation success status
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:357:1
    |
355 |     """
356 |     Analyze comprehensive database performance metrics.
357 |     
    | ^^^^
358 |     Args:
359 |         session: Database session
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:360:1
    |
358 |     Args:
359 |         session: Database session
360 |         
    | ^^^^^^^^
361 |     Returns:
362 |         Dictionary containing performance analysis results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:366:1
    |
364 |     try:
365 |         index_manager = IndexManager(session)
366 |         
    | ^^^^^^^^
367 |         # Get table statistics for main tables
368 |         table_stats = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:370:1
    |
368 |         table_stats = {}
369 |         main_tables = ["jobs", "users"]
370 |         
    | ^^^^^^^^
371 |         for table_name in main_tables:
372 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:381:1
    |
379 |                 })
380 |                 table_stats[table_name] = {"error": str(e)}
381 |         
    | ^^^^^^^^
382 |         # Get slow queries
383 |         slow_queries = await index_manager.get_slow_queries()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:384:1
    |
382 |         # Get slow queries
383 |         slow_queries = await index_manager.get_slow_queries()
384 |         
    | ^^^^^^^^
385 |         # Get index usage statistics
386 |         index_usage = await index_manager.get_index_usage_stats()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:387:1
    |
385 |         # Get index usage statistics
386 |         index_usage = await index_manager.get_index_usage_stats()
387 |         
    | ^^^^^^^^
388 |         return {
389 |             "table_statistics": table_stats,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/db_indexes.py:393:1
    |
391 |             "index_usage": index_usage
392 |         }
393 |         
    | ^^^^^^^^
394 |     except Exception as e:
395 |         logger.error("Failed to analyze database performance", extra={
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/db_indexes.py:402:10
    |
400 |             "slow_queries": [],
401 |             "index_usage": []
402 |         }
    |          ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/migrations/env.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | import os
 4 | | from logging.config import fileConfig
 5 | |
 6 | | from sqlalchemy import engine_from_config, pool
 7 | | from alembic import context
 8 | |
 9 | | from infrastructure.db import Base
   | |__________________________________^
10 |
11 |   config = context.config
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> src/infrastructure/migrations/versions/0001_initial.py:5:1
  |
3 |   """
4 |
5 | / from alembic import op
6 | | import sqlalchemy as sa
  | |_______________________^
  |
help: Organize imports

W292 [*] No newline at end of file
  --> src/infrastructure/migrations/versions/0001_initial.py:48:27
   |
46 |     op.drop_table("strategies")
47 |     op.drop_index("ix_users_email", table_name="users")
48 |     op.drop_table("users")
   |                           ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/migrations/versions/0002_add_jobs_table.py:9:1
   |
 7 |   """
 8 |
 9 | / from alembic import op
10 | | import sqlalchemy as sa
   | |_______________________^
   |
help: Organize imports

W292 [*] No newline at end of file
  --> src/infrastructure/migrations/versions/0002_add_jobs_table.py:75:26
   |
73 |     op.drop_index("ix_jobs_created_at", table_name="jobs")
74 |     op.drop_index("ix_jobs_status", table_name="jobs")
75 |     op.drop_table("jobs")
   |                          ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> src/infrastructure/migrations/versions/0003_add_job_timing_fields.py:8:1
  |
7 |   """
8 | / from alembic import op
9 | | import sqlalchemy as sa
  | |_______________________^
  |
help: Organize imports

W292 [*] No newline at end of file
  --> src/infrastructure/migrations/versions/0003_add_job_timing_fields.py:29:41
   |
27 |     """Remove started_at and completed_at fields from jobs table"""
28 |     op.drop_column('jobs', 'completed_at')
29 |     op.drop_column('jobs', 'started_at')
   |                                         ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> src/infrastructure/models.py:1:1
  |
1 | / from datetime import datetime
2 | | from sqlalchemy import Integer, String, DateTime, ForeignKey, Float, Text, JSON, UniqueConstraint
3 | | from sqlalchemy.orm import Mapped, mapped_column, relationship
4 | | from infrastructure.db import Base
5 | | import uuid
  | |___________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> src/infrastructure/models.py:84:1
   |
82 |     artifact_url: Mapped[str] = mapped_column(String(500), nullable=True)
83 |     dedup_key: Mapped[str] = mapped_column(String(255), nullable=True, unique=True)
84 |     
   | ^^^^
85 |     # Job timing fields for duration tracking
86 |     started_at: Mapped[datetime] = mapped_column(DateTime, nullable=True)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/models.py:88:1
   |
86 |     started_at: Mapped[datetime] = mapped_column(DateTime, nullable=True)
87 |     completed_at: Mapped[datetime] = mapped_column(DateTime, nullable=True)
88 |     
   | ^^^^
89 |     created_at: Mapped[datetime] = mapped_column(
90 |         DateTime, default=datetime.utcnow, nullable=False
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> src/infrastructure/monitoring/__init__.py:4:1
  |
2 | Monitoring infrastructure implementations.
3 | """
4 | from .metrics import MonitoringService, MetricsCollector, HealthChecker, PerformanceTracker, monitoring_service
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | __all__ = [
  |
help: Organize imports

W291 [*] Trailing whitespace
 --> src/infrastructure/monitoring/__init__.py:7:25
  |
6 | __all__ = [
7 |     "MonitoringService", 
  |                         ^
8 |     "MetricsCollector", 
9 |     "HealthChecker", 
  |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> src/infrastructure/monitoring/__init__.py:8:24
   |
 6 | __all__ = [
 7 |     "MonitoringService", 
 8 |     "MetricsCollector", 
   |                        ^
 9 |     "HealthChecker", 
10 |     "PerformanceTracker", 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> src/infrastructure/monitoring/__init__.py:9:21
   |
 7 |     "MonitoringService", 
 8 |     "MetricsCollector", 
 9 |     "HealthChecker", 
   |                     ^
10 |     "PerformanceTracker", 
11 |     "monitoring_service"
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> src/infrastructure/monitoring/__init__.py:10:26
   |
 8 |     "MetricsCollector", 
 9 |     "HealthChecker", 
10 |     "PerformanceTracker", 
   |                          ^
11 |     "monitoring_service"
12 | ]
   |
help: Remove trailing whitespace

W292 [*] No newline at end of file
  --> src/infrastructure/monitoring/__init__.py:12:2
   |
10 |     "PerformanceTracker", 
11 |     "monitoring_service"
12 | ]
   |  ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/monitoring/metrics.py:7:1
   |
 5 |   health checks, and performance tracking for the Monte Carlo job processing system.
 6 |   """
 7 | / import logging
 8 | | import time
 9 | | from datetime import datetime, UTC
10 | | from typing import Any, Dict, List, Optional, Callable
11 | | from dataclasses import dataclass, field
12 | | from collections import defaultdict, deque
13 | | import asyncio
14 | | import threading
15 | | from contextlib import asynccontextmanager
16 | |
17 | | from domain.queue import MonitoringInterface
   | |____________________________________________^
18 |
19 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:43:1
   |
41 | class MetricsCollector:
42 |     """Collects and stores metrics in memory"""
43 |     
   | ^^^^
44 |     def __init__(self, max_points_per_metric: int = 1000):
45 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:47:1
   |
45 |         """
46 |         Initialize metrics collector.
47 |         
   | ^^^^^^^^
48 |         Args:
49 |             max_points_per_metric: Maximum number of points to keep per metric
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:55:1
   |
53 |         self._counters: Dict[str, float] = defaultdict(float)
54 |         self._lock = threading.RLock()
55 |         
   | ^^^^^^^^
56 |         logger.info("Initialized metrics collector")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:57:1
   |
56 |         logger.info("Initialized metrics collector")
57 |     
   | ^^^^
58 |     def record_metric(self, name: str, value: float, tags: Optional[Dict[str, str]] = None) -> None:
59 |         """Record a metric value"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:69:1
   |
67 |             )
68 |             self._metrics[metric_key].append(point)
69 |     
   | ^^^^
70 |     def increment_counter(self, name: str, tags: Optional[Dict[str, str]] = None, value: float = 1.0) -> None:
71 |         """Increment a counter metric"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:75:1
   |
73 |             counter_key = self._create_metric_key(name, tags or {})
74 |             self._counters[counter_key] += value
75 |             
   | ^^^^^^^^^^^^
76 |             # Also record as a metric point
77 |             self.record_metric(name, self._counters[counter_key], tags)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:78:1
   |
76 |             # Also record as a metric point
77 |             self.record_metric(name, self._counters[counter_key], tags)
78 |     
   | ^^^^
79 |     def record_timing(self, name: str, duration_ms: float, tags: Optional[Dict[str, str]] = None) -> None:
80 |         """Record a timing metric"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:82:1
   |
80 |         """Record a timing metric"""
81 |         self.record_metric(f"{name}.duration_ms", duration_ms, tags)
82 |     
   | ^^^^
83 |     def get_metric_points(self, name: str, tags: Optional[Dict[str, str]] = None) -> List[MetricPoint]:
84 |         """Get metric points for a specific metric"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:88:1
   |
86 |             metric_key = self._create_metric_key(name, tags or {})
87 |             return list(self._metrics.get(metric_key, []))
88 |     
   | ^^^^
89 |     def get_counter_value(self, name: str, tags: Optional[Dict[str, str]] = None) -> float:
90 |         """Get current counter value"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/monitoring/metrics.py:94:1
   |
92 |             counter_key = self._create_metric_key(name, tags or {})
93 |             return self._counters.get(counter_key, 0.0)
94 |     
   | ^^^^
95 |     def get_all_metrics(self) -> Dict[str, List[MetricPoint]]:
96 |         """Get all collected metrics"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:99:1
    |
 97 |         with self._lock:
 98 |             return {key: list(points) for key, points in self._metrics.items()}
 99 |     
    | ^^^^
100 |     def clear_metrics(self) -> None:
101 |         """Clear all collected metrics"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:105:1
    |
103 |             self._metrics.clear()
104 |             self._counters.clear()
105 |     
    | ^^^^
106 |     def _create_metric_key(self, name: str, tags: Dict[str, str]) -> str:
107 |         """Create a unique key for a metric with tags"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:110:1
    |
108 |         if not tags:
109 |             return name
110 |         
    | ^^^^^^^^
111 |         tag_str = ",".join(f"{k}={v}" for k, v in sorted(tags.items()))
112 |         return f"{name}[{tag_str}]"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:117:1
    |
115 | class HealthChecker:
116 |     """Performs health checks on system components"""
117 |     
    | ^^^^
118 |     def __init__(self):
119 |         """Initialize health checker"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:123:1
    |
121 |         self._last_results: Dict[str, HealthCheck] = {}
122 |         self._lock = threading.RLock()
123 |         
    | ^^^^^^^^
124 |         logger.info("Initialized health checker")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:125:1
    |
124 |         logger.info("Initialized health checker")
125 |     
    | ^^^^
126 |     def register_health_check(self, name: str, check_func: Callable) -> None:
127 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:129:1
    |
127 |         """
128 |         Register a health check function.
129 |         
    | ^^^^^^^^
130 |         Args:
131 |             name: Name of the health check
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:137:1
    |
135 |             self._health_checks[name] = check_func
136 |             logger.info(f"Registered health check: {name}")
137 |     
    | ^^^^
138 |     async def run_health_check(self, name: str) -> HealthCheck:
139 |         """Run a specific health check"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:147:1
    |
145 |                 timestamp=datetime.now(UTC)
146 |             )
147 |         
    | ^^^^^^^^
148 |         try:
149 |             check_func = self._health_checks[name]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:150:1
    |
148 |         try:
149 |             check_func = self._health_checks[name]
150 |             
    | ^^^^^^^^^^^^
151 |             # Run health check (support both sync and async functions)
152 |             if asyncio.iscoroutinefunction(check_func):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:156:1
    |
154 |             else:
155 |                 result = check_func()
156 |             
    | ^^^^^^^^^^^^
157 |             # Parse result
158 |             if isinstance(result, tuple):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:170:1
    |
168 |                 message = f"Health check {name} returned {result}"
169 |                 details = {}
170 |             
    | ^^^^^^^^^^^^
171 |             health_check = HealthCheck(
172 |                 name=name,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:178:1
    |
176 |                 details=details
177 |             )
178 |             
    | ^^^^^^^^^^^^
179 |             with self._lock:
180 |                 self._last_results[name] = health_check
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:181:1
    |
179 |             with self._lock:
180 |                 self._last_results[name] = health_check
181 |             
    | ^^^^^^^^^^^^
182 |             return health_check
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:183:1
    |
182 |             return health_check
183 |             
    | ^^^^^^^^^^^^
184 |         except Exception as e:
185 |             error_check = HealthCheck(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:192:1
    |
190 |                 details={"error": str(e)}
191 |             )
192 |             
    | ^^^^^^^^^^^^
193 |             with self._lock:
194 |                 self._last_results[name] = error_check
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:195:1
    |
193 |             with self._lock:
194 |                 self._last_results[name] = error_check
195 |             
    | ^^^^^^^^^^^^
196 |             logger.error(f"Health check '{name}' failed: {str(e)}")
197 |             return error_check
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:198:1
    |
196 |             logger.error(f"Health check '{name}' failed: {str(e)}")
197 |             return error_check
198 |     
    | ^^^^
199 |     async def run_all_health_checks(self) -> Dict[str, HealthCheck]:
200 |         """Run all registered health checks"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:202:1
    |
200 |         """Run all registered health checks"""
201 |         results = {}
202 |         
    | ^^^^^^^^
203 |         for name in self._health_checks:
204 |             results[name] = await self.run_health_check(name)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:205:1
    |
203 |         for name in self._health_checks:
204 |             results[name] = await self.run_health_check(name)
205 |         
    | ^^^^^^^^
206 |         return results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:207:1
    |
206 |         return results
207 |     
    | ^^^^
208 |     def get_last_result(self, name: str) -> Optional[HealthCheck]:
209 |         """Get the last result for a health check"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:212:1
    |
210 |         with self._lock:
211 |             return self._last_results.get(name)
212 |     
    | ^^^^
213 |     def get_all_last_results(self) -> Dict[str, HealthCheck]:
214 |         """Get all last health check results"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:221:1
    |
219 | class PerformanceTracker:
220 |     """Tracks performance metrics and statistics"""
221 |     
    | ^^^^
222 |     def __init__(self, window_size: int = 100):
223 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:225:1
    |
223 |         """
224 |         Initialize performance tracker.
225 |         
    | ^^^^^^^^
226 |         Args:
227 |             window_size: Size of the sliding window for calculations
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:232:1
    |
230 |         self._timings: Dict[str, deque] = defaultdict(lambda: deque(maxlen=window_size))
231 |         self._lock = threading.RLock()
232 |         
    | ^^^^^^^^
233 |         logger.info("Initialized performance tracker")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:234:1
    |
233 |         logger.info("Initialized performance tracker")
234 |     
    | ^^^^
235 |     @asynccontextmanager
236 |     async def track_timing(self, operation_name: str, tags: Optional[Dict[str, str]] = None):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:244:1
    |
242 |             duration_ms = (time.time() - start_time) * 1000
243 |             self.record_timing(operation_name, duration_ms, tags)
244 |     
    | ^^^^
245 |     def record_timing(self, operation_name: str, duration_ms: float, tags: Optional[Dict[str, str]] = None) -> None:
246 |         """Record timing for an operation"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:250:1
    |
248 |             key = self._create_key(operation_name, tags or {})
249 |             self._timings[key].append(duration_ms)
250 |     
    | ^^^^
251 |     def get_statistics(self, operation_name: str, tags: Optional[Dict[str, str]] = None) -> Dict[str, float]:
252 |         """Get statistics for an operation"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:256:1
    |
254 |             key = self._create_key(operation_name, tags or {})
255 |             timings = list(self._timings.get(key, []))
256 |             
    | ^^^^^^^^^^^^
257 |             if not timings:
258 |                 return {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:267:1
    |
265 |                     "p99_ms": 0.0
266 |                 }
267 |             
    | ^^^^^^^^^^^^
268 |             timings.sort()
269 |             count = len(timings)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:270:1
    |
268 |             timings.sort()
269 |             count = len(timings)
270 |             
    | ^^^^^^^^^^^^
271 |             return {
272 |                 "count": count,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:280:1
    |
278 |                 "p99_ms": timings[int(count * 0.99)]
279 |             }
280 |     
    | ^^^^
281 |     def _create_key(self, operation_name: str, tags: Dict[str, str]) -> str:
282 |         """Create a unique key for an operation with tags"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:285:1
    |
283 |         if not tags:
284 |             return operation_name
285 |         
    | ^^^^^^^^
286 |         tag_str = ",".join(f"{k}={v}" for k, v in sorted(tags.items()))
287 |         return f"{operation_name}[{tag_str}]"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:292:1
    |
290 | class MonitoringService(MonitoringInterface):
291 |     """Main monitoring service that coordinates all monitoring components"""
292 |     
    | ^^^^
293 |     def __init__(self):
294 |         """Initialize monitoring service"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:298:1
    |
296 |         self.health_checker = HealthChecker()
297 |         self.performance_tracker = PerformanceTracker()
298 |         
    | ^^^^^^^^
299 |         # Register default health checks
300 |         self._register_default_health_checks()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:301:1
    |
299 |         # Register default health checks
300 |         self._register_default_health_checks()
301 |         
    | ^^^^^^^^
302 |         logger.info("Initialized monitoring service")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:303:1
    |
302 |         logger.info("Initialized monitoring service")
303 |     
    | ^^^^
304 |     async def record_metric(self, name: str, value: float, tags: Optional[Dict[str, str]] = None) -> None:
305 |         """Record a metric value"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:307:1
    |
305 |         """Record a metric value"""
306 |         self.metrics_collector.record_metric(name, value, tags)
307 |     
    | ^^^^
308 |     async def increment_counter(self, name: str, tags: Optional[Dict[str, str]] = None) -> None:
309 |         """Increment a counter metric"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:311:1
    |
309 |         """Increment a counter metric"""
310 |         self.metrics_collector.increment_counter(name, tags)
311 |     
    | ^^^^
312 |     async def record_timing(self, name: str, duration_ms: float, tags: Optional[Dict[str, str]] = None) -> None:
313 |         """Record a timing metric"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:316:1
    |
314 |         self.metrics_collector.record_timing(name, duration_ms, tags)
315 |         self.performance_tracker.record_timing(name, duration_ms, tags)
316 |     
    | ^^^^
317 |     async def get_health_status(self) -> Dict[str, Any]:
318 |         """Get system health status"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:320:1
    |
318 |         """Get system health status"""
319 |         health_results = await self.health_checker.run_all_health_checks()
320 |         
    | ^^^^^^^^
321 |         # Determine overall status
322 |         overall_status = "healthy"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:325:1
    |
323 |         unhealthy_count = 0
324 |         warning_count = 0
325 |         
    | ^^^^^^^^
326 |         for check in health_results.values():
327 |             if check.status == "unhealthy":
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:334:1
    |
332 |                 if overall_status == "healthy":
333 |                     overall_status = "warning"
334 |         
    | ^^^^^^^^
335 |         return {
336 |             "overall_status": overall_status,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:354:1
    |
352 |             }
353 |         }
354 |     
    | ^^^^
355 |     def get_metrics_summary(self) -> Dict[str, Any]:
356 |         """Get summary of all metrics"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:358:1
    |
356 |         """Get summary of all metrics"""
357 |         all_metrics = self.metrics_collector.get_all_metrics()
358 |         
    | ^^^^^^^^
359 |         summary = {
360 |             "total_metrics": len(all_metrics),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:364:1
    |
362 |             "metrics": {}
363 |         }
364 |         
    | ^^^^^^^^
365 |         for metric_key, points in all_metrics.items():
366 |             if points:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:376:1
    |
374 |                     "latest_timestamp": points[-1].timestamp.isoformat()
375 |                 }
376 |         
    | ^^^^^^^^
377 |         return summary
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:378:1
    |
377 |         return summary
378 |     
    | ^^^^
379 |     def get_performance_summary(self) -> Dict[str, Any]:
380 |         """Get performance statistics summary"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:386:1
    |
384 |             "operations": {}
385 |         }
386 |     
    | ^^^^
387 |     def register_health_check(self, name: str, check_func: Callable) -> None:
388 |         """Register a custom health check"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:390:1
    |
388 |         """Register a custom health check"""
389 |         self.health_checker.register_health_check(name, check_func)
390 |     
    | ^^^^
391 |     @asynccontextmanager
392 |     async def track_operation(self, operation_name: str, tags: Optional[Dict[str, str]] = None):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:396:1
    |
394 |         async with self.performance_tracker.track_timing(operation_name, tags):
395 |             yield
396 |     
    | ^^^^
397 |     def _register_default_health_checks(self) -> None:
398 |         """Register default system health checks"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:399:1
    |
397 |     def _register_default_health_checks(self) -> None:
398 |         """Register default system health checks"""
399 |         
    | ^^^^^^^^
400 |         def memory_check():
401 |             """Check memory usage"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:415:1
    |
413 |             except Exception as e:
414 |                 return "unhealthy", f"Memory check failed: {str(e)}", {"error": str(e)}
415 |         
    | ^^^^^^^^
416 |         def disk_check():
417 |             """Check disk usage"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/monitoring/metrics.py:432:1
    |
430 |             except Exception as e:
431 |                 return "unhealthy", f"Disk check failed: {str(e)}", {"error": str(e)}
432 |         
    | ^^^^^^^^
433 |         self.health_checker.register_health_check("memory", memory_check)
434 |         self.health_checker.register_health_check("disk", disk_check)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/monitoring/metrics.py:438:41
    |
437 | # Global monitoring service instance
438 | monitoring_service = MonitoringService()
    |                                         ^
    |
help: Add trailing newline

W292 [*] No newline at end of file
 --> src/infrastructure/queue/__init__.py:6:30
  |
4 | from .sqs_adapter import SQSQueueAdapter
5 |
6 | __all__ = ["SQSQueueAdapter"]
  |                              ^
  |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/queue/sqs_adapter.py:7:1
   |
 5 |   with support for dead letter queues, message attributes, monitoring, and visibility timeout heartbeat.
 6 |   """
 7 | / import json
 8 | | import logging
 9 | | from datetime import datetime, UTC
10 | | from typing import Any, Dict, Optional, List, Set
11 | | import boto3
12 | | from botocore.exceptions import ClientError, BotoCoreError
13 | | import asyncio
14 | | from concurrent.futures import ThreadPoolExecutor
15 | |
16 | | from domain.queue import (
17 | |     QueueInterface, Job, JobStatus, JobMetadata, QueueMetrics,
18 | |     MonteCarloJobPayload, JobPriority
19 | | )
20 | | from config.queue_config import SQSConfig
21 | | from infrastructure.security import CredentialManager
   | |_____________________________________________________^
22 |
23 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:28:1
   |
26 | class SQSQueueAdapter(QueueInterface[MonteCarloJobPayload]):
27 |     """SQS implementation of the queue interface"""
28 |     
   | ^^^^
29 |     def __init__(
30 |         self,
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:35:1
   |
33 |         """
34 |         Initialize SQS queue adapter with secure configuration.
35 |         
   | ^^^^^^^^
36 |         Args:
37 |             config: SQS configuration with secure credential management
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:44:1
   |
42 |         self.message_retention_period = config.message_retention_period
43 |         self.max_receive_count = config.max_receive_count
44 |         
   | ^^^^^^^^
45 |         # Validate credentials
46 |         if not CredentialManager.validate_credentials(config.aws_credentials):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:48:1
   |
46 |         if not CredentialManager.validate_credentials(config.aws_credentials):
47 |             raise ValueError("Invalid AWS credentials provided")
48 |         
   | ^^^^^^^^
49 |         # Initialize SQS client with secure configuration
50 |         boto3_config = config.get_boto3_config()
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> src/infrastructure/queue/sqs_adapter.py:51:78
   |
49 |         # Initialize SQS client with secure configuration
50 |         boto3_config = config.get_boto3_config()
51 |         self.session = boto3.Session(**{k: v for k, v in boto3_config.items() 
   |                                                                              ^
52 |                                       if k not in ("endpoint_url",)})
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:53:1
   |
51 |         self.session = boto3.Session(**{k: v for k, v in boto3_config.items() 
52 |                                       if k not in ("endpoint_url",)})
53 |         
   | ^^^^^^^^
54 |         client_kwargs = {}
55 |         if "endpoint_url" in boto3_config:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:57:1
   |
55 |         if "endpoint_url" in boto3_config:
56 |             client_kwargs["endpoint_url"] = boto3_config["endpoint_url"]
57 |             
   | ^^^^^^^^^^^^
58 |         self.sqs_client = self.session.client("sqs", **client_kwargs)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:59:1
   |
58 |         self.sqs_client = self.session.client("sqs", **client_kwargs)
59 |         
   | ^^^^^^^^
60 |         # Thread pool for async operations
61 |         self.executor = ThreadPoolExecutor(max_workers=10, thread_name_prefix="sqs-adapter")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:62:1
   |
60 |         # Thread pool for async operations
61 |         self.executor = ThreadPoolExecutor(max_workers=10, thread_name_prefix="sqs-adapter")
62 |         
   | ^^^^^^^^
63 |         # In-memory job tracking for status queries
64 |         self._job_cache: Dict[str, Job[MonteCarloJobPayload]] = {}
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:65:1
   |
63 |         # In-memory job tracking for status queries
64 |         self._job_cache: Dict[str, Job[MonteCarloJobPayload]] = {}
65 |         
   | ^^^^^^^^
66 |         # Heartbeat tracking for visibility timeout extension
67 |         self._active_heartbeats: Set[str] = set()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:69:1
   |
67 |         self._active_heartbeats: Set[str] = set()
68 |         self._heartbeat_tasks: Dict[str, asyncio.Task] = {}
69 |         
   | ^^^^^^^^
70 |         logger.info("Initialized SQS adapter", extra={
71 |             "queue_url": config.queue_url,
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:74:1
   |
72 |             "credential_info": config.aws_credentials.mask_sensitive_data()
73 |         })
74 |     
   | ^^^^
75 |     async def enqueue(self, job: Job[MonteCarloJobPayload]) -> str:
76 |         """Enqueue a Monte Carlo job to SQS"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:80:1
   |
78 |             # Serialize job payload
79 |             message_body = self._serialize_job(job)
80 |             
   | ^^^^^^^^^^^^
81 |             # Prepare message attributes
82 |             message_attributes = self._create_message_attributes(job)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:83:1
   |
81 |             # Prepare message attributes
82 |             message_attributes = self._create_message_attributes(job)
83 |             
   | ^^^^^^^^^^^^
84 |             # Send message to SQS
85 |             loop = asyncio.get_event_loop()
   |
help: Remove whitespace from blank line

F841 Local variable `response` is assigned to but never used
  --> src/infrastructure/queue/sqs_adapter.py:86:13
   |
84 |             # Send message to SQS
85 |             loop = asyncio.get_event_loop()
86 |             response = await loop.run_in_executor(
   |             ^^^^^^^^
87 |                 self.executor,
88 |                 self._send_message_sync,
   |
help: Remove assignment to unused variable `response`

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:93:1
   |
91 |                 job.metadata.job_id
92 |             )
93 |             
   | ^^^^^^^^^^^^
94 |             # Update job status
95 |             job.update_status(JobStatus.QUEUED)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/queue/sqs_adapter.py:97:1
   |
95 |             job.update_status(JobStatus.QUEUED)
96 |             self._job_cache[job.metadata.job_id] = job
97 |             
   | ^^^^^^^^^^^^
98 |             logger.info(f"Enqueued job {job.metadata.job_id} to SQS")
99 |             return job.metadata.job_id
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:100:1
    |
 98 |             logger.info(f"Enqueued job {job.metadata.job_id} to SQS")
 99 |             return job.metadata.job_id
100 |             
    | ^^^^^^^^^^^^
101 |         except Exception as e:
102 |             logger.error(f"Failed to enqueue job {job.metadata.job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:105:1
    |
103 |             job.update_status(JobStatus.FAILED, str(e))
104 |             raise
105 |     
    | ^^^^
106 |     async def dequeue(self, timeout_seconds: Optional[int] = None) -> Optional[Job[MonteCarloJobPayload]]:
107 |         """Dequeue a job from SQS"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:110:1
    |
108 |         try:
109 |             wait_time = min(timeout_seconds or 20, 20)  # SQS max long polling is 20s
110 |             
    | ^^^^^^^^^^^^
111 |             loop = asyncio.get_event_loop()
112 |             messages = await loop.run_in_executor(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:117:1
    |
115 |                 wait_time
116 |             )
117 |             
    | ^^^^^^^^^^^^
118 |             if not messages:
119 |                 return None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:120:1
    |
118 |             if not messages:
119 |                 return None
120 |             
    | ^^^^^^^^^^^^
121 |             message = messages[0]  # Process one message at a time
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:122:1
    |
121 |             message = messages[0]  # Process one message at a time
122 |             
    | ^^^^^^^^^^^^
123 |             # Deserialize job
124 |             job = self._deserialize_job(message["Body"])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:126:1
    |
124 |             job = self._deserialize_job(message["Body"])
125 |             job.update_status(JobStatus.PROCESSING)
126 |             
    | ^^^^^^^^^^^^
127 |             # Store receipt handle for acknowledgment
128 |             job.metadata.tags["receipt_handle"] = message["ReceiptHandle"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:130:1
    |
128 |             job.metadata.tags["receipt_handle"] = message["ReceiptHandle"]
129 |             job.metadata.tags["message_id"] = message["MessageId"]
130 |             
    | ^^^^^^^^^^^^
131 |             # Update cache
132 |             self._job_cache[job.metadata.job_id] = job
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:133:1
    |
131 |             # Update cache
132 |             self._job_cache[job.metadata.job_id] = job
133 |             
    | ^^^^^^^^^^^^
134 |             # Start heartbeat for visibility timeout extension
135 |             await self._start_heartbeat(job.metadata.job_id, message["ReceiptHandle"])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:136:1
    |
134 |             # Start heartbeat for visibility timeout extension
135 |             await self._start_heartbeat(job.metadata.job_id, message["ReceiptHandle"])
136 |             
    | ^^^^^^^^^^^^
137 |             logger.info(f"Dequeued job {job.metadata.job_id} from SQS")
138 |             return job
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:139:1
    |
137 |             logger.info(f"Dequeued job {job.metadata.job_id} from SQS")
138 |             return job
139 |             
    | ^^^^^^^^^^^^
140 |         except Exception as e:
141 |             logger.error(f"Failed to dequeue job: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:143:1
    |
141 |             logger.error(f"Failed to dequeue job: {str(e)}")
142 |             return None
143 |     
    | ^^^^
144 |     async def acknowledge(self, job_id: str) -> bool:
145 |         """Acknowledge successful job completion"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:151:1
    |
149 |                 logger.warning(f"Job {job_id} not found in cache for acknowledgment")
150 |                 return False
151 |             
    | ^^^^^^^^^^^^
152 |             receipt_handle = job.metadata.tags.get("receipt_handle")
153 |             if not receipt_handle:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:156:1
    |
154 |                 logger.warning(f"No receipt handle found for job {job_id}")
155 |                 return False
156 |             
    | ^^^^^^^^^^^^
157 |             # Delete message from SQS
158 |             loop = asyncio.get_event_loop()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:164:1
    |
162 |                 receipt_handle
163 |             )
164 |             
    | ^^^^^^^^^^^^
165 |             # Update job status
166 |             job.update_status(JobStatus.COMPLETED)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:167:1
    |
165 |             # Update job status
166 |             job.update_status(JobStatus.COMPLETED)
167 |             
    | ^^^^^^^^^^^^
168 |             # Stop heartbeat
169 |             await self._stop_heartbeat(job_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:170:1
    |
168 |             # Stop heartbeat
169 |             await self._stop_heartbeat(job_id)
170 |             
    | ^^^^^^^^^^^^
171 |             logger.info(f"Acknowledged job {job_id}")
172 |             return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:173:1
    |
171 |             logger.info(f"Acknowledged job {job_id}")
172 |             return True
173 |             
    | ^^^^^^^^^^^^
174 |         except Exception as e:
175 |             logger.error(f"Failed to acknowledge job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:177:1
    |
175 |             logger.error(f"Failed to acknowledge job {job_id}: {str(e)}")
176 |             return False
177 |     
    | ^^^^
178 |     async def reject(self, job_id: str, requeue: bool = True) -> bool:
179 |         """Reject a job (failed processing)"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:185:1
    |
183 |                 logger.warning(f"Job {job_id} not found in cache for rejection")
184 |                 return False
185 |             
    | ^^^^^^^^^^^^
186 |             receipt_handle = job.metadata.tags.get("receipt_handle")
187 |             if not receipt_handle:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:190:1
    |
188 |                 logger.warning(f"No receipt handle found for job {job_id}")
189 |                 return False
190 |             
    | ^^^^^^^^^^^^
191 |             if requeue and job.increment_retry():
192 |                 # Change message visibility to make it available for retry
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:211:1
    |
209 |                 )
210 |                 job.update_status(JobStatus.FAILED)
211 |                 
    | ^^^^^^^^^^^^^^^^
212 |                 # Stop heartbeat
213 |                 await self._stop_heartbeat(job_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:214:1
    |
212 |                 # Stop heartbeat
213 |                 await self._stop_heartbeat(job_id)
214 |                 
    | ^^^^^^^^^^^^^^^^
215 |                 logger.info(f"Rejected job {job_id} (max retries exceeded)")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:216:1
    |
215 |                 logger.info(f"Rejected job {job_id} (max retries exceeded)")
216 |             
    | ^^^^^^^^^^^^
217 |             return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:218:1
    |
217 |             return True
218 |             
    | ^^^^^^^^^^^^
219 |         except Exception as e:
220 |             logger.error(f"Failed to reject job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:222:1
    |
220 |             logger.error(f"Failed to reject job {job_id}: {str(e)}")
221 |             return False
222 |     
    | ^^^^
223 |     async def get_job_status(self, job_id: str) -> Optional[Job[MonteCarloJobPayload]]:
224 |         """Get current status of a job"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:226:1
    |
224 |         """Get current status of a job"""
225 |         return self._job_cache.get(job_id)
226 |     
    | ^^^^
227 |     async def cancel_job(self, job_id: str) -> bool:
228 |         """Cancel a pending job"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:234:1
    |
232 |                 logger.warning(f"Job {job_id} not found for cancellation")
233 |                 return False
234 |             
    | ^^^^^^^^^^^^
235 |             if job.status in [JobStatus.PROCESSING, JobStatus.COMPLETED, JobStatus.FAILED]:
236 |                 logger.warning(f"Cannot cancel job {job_id} in status {job.status}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:238:1
    |
236 |                 logger.warning(f"Cannot cancel job {job_id} in status {job.status}")
237 |                 return False
238 |             
    | ^^^^^^^^^^^^
239 |             job.update_status(JobStatus.CANCELLED)
240 |             logger.info(f"Cancelled job {job_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:242:1
    |
240 |             logger.info(f"Cancelled job {job_id}")
241 |             return True
242 |             
    | ^^^^^^^^^^^^
243 |         except Exception as e:
244 |             logger.error(f"Failed to cancel job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:246:1
    |
244 |             logger.error(f"Failed to cancel job {job_id}: {str(e)}")
245 |             return False
246 |     
    | ^^^^
247 |     async def get_metrics(self) -> QueueMetrics:
248 |         """Get queue metrics including DLQ statistics"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:251:1
    |
249 |         try:
250 |             loop = asyncio.get_event_loop()
251 |             
    | ^^^^^^^^^^^^
252 |             # Get main queue attributes
253 |             main_attributes = await loop.run_in_executor(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:257:1
    |
255 |                 self._get_queue_attributes_sync
256 |             )
257 |             
    | ^^^^^^^^^^^^
258 |             # Get DLQ attributes if configured
259 |             dlq_attributes = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:268:1
    |
266 |                 except Exception as e:
267 |                     logger.warning(f"Failed to get DLQ metrics: {e}")
268 |             
    | ^^^^^^^^^^^^
269 |             # Parse metrics
270 |             pending_jobs = int(main_attributes.get("ApproximateNumberOfMessages", 0))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:273:1
    |
271 |             processing_jobs = int(main_attributes.get("ApproximateNumberOfMessagesNotVisible", 0))
272 |             dlq_messages = int(dlq_attributes.get("ApproximateNumberOfMessages", 0))
273 |             
    | ^^^^^^^^^^^^
274 |             return QueueMetrics(
275 |                 queue_name=self.queue_url.split("/")[-1],
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:284:1
    |
282 |                 last_updated=datetime.now(UTC)
283 |             )
284 |             
    | ^^^^^^^^^^^^
285 |         except Exception as e:
286 |             logger.error(f"Failed to get queue metrics: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:328:1
    |
326 |             logger.error(f"Failed to get job progress for {job_id}: {e}")
327 |             return None
328 |     
    | ^^^^
329 |     def _serialize_job(self, job: Job[MonteCarloJobPayload]) -> str:
330 |         """Serialize job to JSON string"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:359:1
    |
357 |         }
358 |         return json.dumps(job_dict)
359 |     
    | ^^^^
360 |     def _deserialize_job(self, message_body: str) -> Job[MonteCarloJobPayload]:
361 |         """Deserialize job from JSON string"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:363:1
    |
361 |         """Deserialize job from JSON string"""
362 |         job_dict = json.loads(message_body)
363 |         
    | ^^^^^^^^
364 |         # Reconstruct payload
365 |         payload_dict = job_dict["payload"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:377:1
    |
375 |             include_equity_envelope=payload_dict["include_equity_envelope"]
376 |         )
377 |         
    | ^^^^^^^^
378 |         # Reconstruct metadata
379 |         metadata_dict = job_dict["metadata"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:392:1
    |
390 |             correlation_id=metadata_dict["correlation_id"]
391 |         )
392 |         
    | ^^^^^^^^
393 |         return Job(
394 |             payload=payload,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:399:1
    |
397 |             progress=job_dict["progress"]
398 |         )
399 |     
    | ^^^^
400 |     def _create_message_attributes(self, job: Job[MonteCarloJobPayload]) -> Dict[str, Any]:
401 |         """Create SQS message attributes from job metadata"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:409:1
    |
407 |             "Method": {"StringValue": job.payload.method, "DataType": "String"}
408 |         }
409 |         
    | ^^^^^^^^
410 |         if job.metadata.user_id:
411 |             attributes["UserId"] = {"StringValue": job.metadata.user_id, "DataType": "String"}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:412:1
    |
410 |         if job.metadata.user_id:
411 |             attributes["UserId"] = {"StringValue": job.metadata.user_id, "DataType": "String"}
412 |         
    | ^^^^^^^^
413 |         if job.metadata.correlation_id:
414 |             attributes["CorrelationId"] = {"StringValue": job.metadata.correlation_id, "DataType": "String"}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:415:1
    |
413 |         if job.metadata.correlation_id:
414 |             attributes["CorrelationId"] = {"StringValue": job.metadata.correlation_id, "DataType": "String"}
415 |         
    | ^^^^^^^^
416 |         return attributes
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:417:1
    |
416 |         return attributes
417 |     
    | ^^^^
418 |     # Synchronous methods for thread pool execution
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:419:1
    |
418 |     # Synchronous methods for thread pool execution
419 |     
    | ^^^^
420 |     def _send_message_sync(self, message_body: str, message_attributes: Dict[str, Any], deduplication_id: str) -> Dict[str, Any]:
421 |         """Send message to SQS (synchronous)"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:427:1
    |
425 |             "MessageAttributes": message_attributes
426 |         }
427 |         
    | ^^^^^^^^
428 |         # Add deduplication ID for FIFO queues
429 |         if self.queue_url.endswith(".fifo"):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:432:1
    |
430 |             params["MessageDeduplicationId"] = deduplication_id
431 |             params["MessageGroupId"] = "monte-carlo-jobs"
432 |         
    | ^^^^^^^^
433 |         return self.sqs_client.send_message(**params)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:434:1
    |
433 |         return self.sqs_client.send_message(**params)
434 |     
    | ^^^^
435 |     def _receive_messages_sync(self, wait_time: int) -> List[Dict[str, Any]]:
436 |         """Receive messages from SQS (synchronous)"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:445:1
    |
443 |         )
444 |         return response.get("Messages", [])
445 |     
    | ^^^^
446 |     def _delete_message_sync(self, receipt_handle: str) -> None:
447 |         """Delete message from SQS (synchronous)"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:452:1
    |
450 |             ReceiptHandle=receipt_handle
451 |         )
452 |     
    | ^^^^
453 |     def _change_message_visibility_sync(self, receipt_handle: str, visibility_timeout: int) -> None:
454 |         """Change message visibility timeout (synchronous)"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:460:1
    |
458 |             VisibilityTimeout=visibility_timeout
459 |         )
460 |     
    | ^^^^
461 |     def _get_queue_attributes_sync(self) -> Dict[str, str]:
462 |         """Get queue attributes (synchronous)"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:468:1
    |
466 |         )
467 |         return response.get("Attributes", {})
468 |     
    | ^^^^
469 |     def _get_dlq_attributes_sync(self) -> Dict[str, str]:
470 |         """Get DLQ attributes synchronously"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:473:1
    |
471 |         if not self.dead_letter_queue_url:
472 |             return {}
473 |             
    | ^^^^^^^^^^^^
474 |         try:
475 |             response = self.sqs_client.get_queue_attributes(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:489:1
    |
487 |         for job_id in list(self._active_heartbeats):
488 |             await self._stop_heartbeat(job_id)
489 |         
    | ^^^^^^^^
490 |         self.executor.shutdown(wait=True)
491 |         logger.info("SQS adapter cleanup completed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:492:1
    |
490 |         self.executor.shutdown(wait=True)
491 |         logger.info("SQS adapter cleanup completed")
492 |     
    | ^^^^
493 |     async def _start_heartbeat(self, job_id: str, receipt_handle: str) -> None:
494 |         """Start heartbeat task to extend message visibility timeout"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:498:1
    |
496 |             logger.warning(f"Heartbeat already active for job {job_id}")
497 |             return
498 |         
    | ^^^^^^^^
499 |         self._active_heartbeats.add(job_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:500:1
    |
499 |         self._active_heartbeats.add(job_id)
500 |         
    | ^^^^^^^^
501 |         async def heartbeat_loop():
502 |             """Background task to extend visibility timeout every 15 seconds"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:506:1
    |
504 |                 while job_id in self._active_heartbeats:
505 |                     await asyncio.sleep(15)  # Wait 15 seconds
506 |                     
    | ^^^^^^^^^^^^^^^^^^^^
507 |                     if job_id not in self._active_heartbeats:
508 |                         break
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:509:1
    |
507 |                     if job_id not in self._active_heartbeats:
508 |                         break
509 |                     
    | ^^^^^^^^^^^^^^^^^^^^
510 |                     try:
511 |                         # Extend visibility timeout by the original timeout value
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:523:1
    |
521 |                         logger.error(f"Failed to extend visibility timeout for job {job_id}: {e}")
522 |                         # Continue the loop - transient errors shouldn't stop heartbeat
523 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
524 |             except asyncio.CancelledError:
525 |                 logger.debug(f"Heartbeat cancelled for job {job_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:531:1
    |
529 |                 self._active_heartbeats.discard(job_id)
530 |                 self._heartbeat_tasks.pop(job_id, None)
531 |         
    | ^^^^^^^^
532 |         # Start the heartbeat task
533 |         task = asyncio.create_task(heartbeat_loop())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:535:1
    |
533 |         task = asyncio.create_task(heartbeat_loop())
534 |         self._heartbeat_tasks[job_id] = task
535 |         
    | ^^^^^^^^
536 |         logger.debug(f"Started heartbeat for job {job_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:537:1
    |
536 |         logger.debug(f"Started heartbeat for job {job_id}")
537 |     
    | ^^^^
538 |     async def _stop_heartbeat(self, job_id: str) -> None:
539 |         """Stop heartbeat task for a job"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:542:1
    |
540 |         if job_id not in self._active_heartbeats:
541 |             return
542 |         
    | ^^^^^^^^
543 |         # Remove from active set
544 |         self._active_heartbeats.discard(job_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:545:1
    |
543 |         # Remove from active set
544 |         self._active_heartbeats.discard(job_id)
545 |         
    | ^^^^^^^^
546 |         # Cancel the task if it exists
547 |         task = self._heartbeat_tasks.pop(job_id, None)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/queue/sqs_adapter.py:554:1
    |
552 |             except asyncio.CancelledError:
553 |                 pass
554 |         
    | ^^^^^^^^
555 |         logger.debug(f"Stopped heartbeat for job {job_id}")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/queue/sqs_adapter.py:555:60
    |
553 |                 pass
554 |         
555 |         logger.debug(f"Stopped heartbeat for job {job_id}")
    |                                                            ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/redis_pubsub.py:13:1
   |
11 |   - Graceful error handling and recovery
12 |   """
13 | / import asyncio
14 | | import json
15 | | import logging
16 | | import time
17 | | import uuid
18 | | from collections import defaultdict, deque
19 | | from contextlib import asynccontextmanager
20 | | from dataclasses import dataclass, field
21 | | from datetime import datetime, timedelta
22 | | from typing import Any, AsyncGenerator, Dict, List, Optional, Set, Callable, Union
23 | | import redis.asyncio as redis
24 | | from redis.asyncio import Redis, ConnectionPool
25 | | from redis.exceptions import ConnectionError, TimeoutError, RedisError
26 | |
27 | | from core.config import get_settings
   | |____________________________________^
28 |
29 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

F401 [*] `dataclasses.field` imported but unused
  --> src/infrastructure/redis_pubsub.py:20:36
   |
18 | from collections import defaultdict, deque
19 | from contextlib import asynccontextmanager
20 | from dataclasses import dataclass, field
   |                                    ^^^^^
21 | from datetime import datetime, timedelta
22 | from typing import Any, AsyncGenerator, Dict, List, Optional, Set, Callable, Union
   |
help: Remove unused import: `dataclasses.field`

F401 [*] `datetime.datetime` imported but unused
  --> src/infrastructure/redis_pubsub.py:21:22
   |
19 | from contextlib import asynccontextmanager
20 | from dataclasses import dataclass, field
21 | from datetime import datetime, timedelta
   |                      ^^^^^^^^
22 | from typing import Any, AsyncGenerator, Dict, List, Optional, Set, Callable, Union
23 | import redis.asyncio as redis
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> src/infrastructure/redis_pubsub.py:21:32
   |
19 | from contextlib import asynccontextmanager
20 | from dataclasses import dataclass, field
21 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
22 | from typing import Any, AsyncGenerator, Dict, List, Optional, Set, Callable, Union
23 | import redis.asyncio as redis
   |
help: Remove unused import

F401 [*] `typing.Union` imported but unused
  --> src/infrastructure/redis_pubsub.py:22:78
   |
20 | from dataclasses import dataclass, field
21 | from datetime import datetime, timedelta
22 | from typing import Any, AsyncGenerator, Dict, List, Optional, Set, Callable, Union
   |                                                                              ^^^^^
23 | import redis.asyncio as redis
24 | from redis.asyncio import Redis, ConnectionPool
   |
help: Remove unused import: `typing.Union`

F401 [*] `redis.asyncio` imported but unused
  --> src/infrastructure/redis_pubsub.py:23:25
   |
21 | from datetime import datetime, timedelta
22 | from typing import Any, AsyncGenerator, Dict, List, Optional, Set, Callable, Union
23 | import redis.asyncio as redis
   |                         ^^^^^
24 | from redis.asyncio import Redis, ConnectionPool
25 | from redis.exceptions import ConnectionError, TimeoutError, RedisError
   |
help: Remove unused import: `redis.asyncio`

F401 [*] `redis.exceptions.ConnectionError` imported but unused
  --> src/infrastructure/redis_pubsub.py:25:30
   |
23 | import redis.asyncio as redis
24 | from redis.asyncio import Redis, ConnectionPool
25 | from redis.exceptions import ConnectionError, TimeoutError, RedisError
   |                              ^^^^^^^^^^^^^^^
26 |
27 | from core.config import get_settings
   |
help: Remove unused import

F401 [*] `redis.exceptions.TimeoutError` imported but unused
  --> src/infrastructure/redis_pubsub.py:25:47
   |
23 | import redis.asyncio as redis
24 | from redis.asyncio import Redis, ConnectionPool
25 | from redis.exceptions import ConnectionError, TimeoutError, RedisError
   |                                               ^^^^^^^^^^^^
26 |
27 | from core.config import get_settings
   |
help: Remove unused import

F401 [*] `redis.exceptions.RedisError` imported but unused
  --> src/infrastructure/redis_pubsub.py:25:61
   |
23 | import redis.asyncio as redis
24 | from redis.asyncio import Redis, ConnectionPool
25 | from redis.exceptions import ConnectionError, TimeoutError, RedisError
   |                                                             ^^^^^^^^^^
26 |
27 | from core.config import get_settings
   |
help: Remove unused import

W293 [*] Blank line contains whitespace
  --> src/infrastructure/redis_pubsub.py:42:1
   |
40 |     sequence_number: Optional[int] = None
41 |     retry_count: int = 0
42 |     
   | ^^^^
43 |     def to_dict(self) -> Dict[str, Any]:
44 |         """Convert message to dictionary for serialization"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/redis_pubsub.py:68:1
   |
66 |     average_receive_latency: float = 0.0
67 |     active_subscriptions: int = 0
68 |     
   | ^^^^
69 |     def to_dict(self) -> Dict[str, Any]:
70 |         """Convert metrics to dictionary"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/redis_pubsub.py:87:1
   |
85 | class MessageOrderingManager:
86 |     """Manages message ordering and duplicate detection"""
87 |     
   | ^^^^
88 |     def __init__(self, max_history_size: int = 1000):
89 |         self.max_history_size = max_history_size
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/redis_pubsub.py:93:1
   |
91 |         self.message_history: Dict[str, deque] = defaultdict(lambda: deque(maxlen=max_history_size))
92 |         self.pending_messages: Dict[str, Dict[int, PubSubMessage]] = defaultdict(dict)
93 |         
   | ^^^^^^^^
94 |     def get_next_sequence(self, channel: str) -> int:
95 |         """Get next sequence number for a channel"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:98:1
    |
 96 |         self.channel_sequences[channel] += 1
 97 |         return self.channel_sequences[channel]
 98 |     
    | ^^^^
 99 |     def is_duplicate(self, message: PubSubMessage) -> bool:
100 |         """Check if message is a duplicate"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:103:1
    |
101 |         channel_history = self.message_history[message.channel]
102 |         return message.message_id in [msg.message_id for msg in channel_history]
103 |     
    | ^^^^
104 |     def add_message(self, message: PubSubMessage) -> bool:
105 |         """Add message to history and check for duplicates"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:108:1
    |
106 |         if self.is_duplicate(message):
107 |             return False
108 |         
    | ^^^^^^^^
109 |         self.message_history[message.channel].append(message)
110 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:111:1
    |
109 |         self.message_history[message.channel].append(message)
110 |         return True
111 |     
    | ^^^^
112 |     def process_ordered_message(self, message: PubSubMessage) -> List[PubSubMessage]:
113 |         """Process message with ordering guarantees"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:119:1
    |
117 |                 return [message]
118 |             return []
119 |         
    | ^^^^^^^^
120 |         channel = message.channel
121 |         expected_seq = self.channel_sequences.get(channel, 0) + 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:122:1
    |
120 |         channel = message.channel
121 |         expected_seq = self.channel_sequences.get(channel, 0) + 1
122 |         
    | ^^^^^^^^
123 |         if message.sequence_number == expected_seq:
124 |             # Message is in order
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:128:1
    |
126 |                 self.channel_sequences[channel] = message.sequence_number
127 |                 result = [message]
128 |                 
    | ^^^^^^^^^^^^^^^^
129 |                 # Check for pending messages that can now be processed
130 |                 pending = self.pending_messages[channel]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:132:1
    |
130 |                 pending = self.pending_messages[channel]
131 |                 next_seq = message.sequence_number + 1
132 |                 
    | ^^^^^^^^^^^^^^^^
133 |                 while next_seq in pending:
134 |                     next_message = pending.pop(next_seq)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:139:1
    |
137 |                         self.channel_sequences[channel] = next_seq
138 |                     next_seq += 1
139 |                 
    | ^^^^^^^^^^^^^^^^
140 |                 return result
141 |             return []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:142:1
    |
140 |                 return result
141 |             return []
142 |         
    | ^^^^^^^^
143 |         elif message.sequence_number > expected_seq:
144 |             # Message is out of order, store for later
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:148:1
    |
146 |                 self.pending_messages[channel][message.sequence_number] = message
147 |             return []
148 |         
    | ^^^^^^^^
149 |         else:
150 |             # Message is old or duplicate
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:156:1
    |
154 | class EnhancedRedisPubSub:
155 |     """Enhanced Redis pub/sub with automatic reconnection and advanced features"""
156 |     
    | ^^^^
157 |     def __init__(
158 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:171:1
    |
169 |         """
170 |         Initialize enhanced Redis pub/sub manager.
171 |         
    | ^^^^^^^^
172 |         Args:
173 |             redis_url: Redis connection URL
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:192:1
    |
190 |         self.duplicate_detection = duplicate_detection
191 |         self.health_check_interval = health_check_interval
192 |         
    | ^^^^^^^^
193 |         # Connection management
194 |         self._connection_pool: Optional[ConnectionPool] = None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:198:1
    |
196 |         self._pubsub_connections: Dict[str, Redis] = {}
197 |         self._active_subscriptions: Dict[str, Set[str]] = defaultdict(set)
198 |         
    | ^^^^^^^^
199 |         # Reconnection state
200 |         self._reconnect_tasks: Dict[str, asyncio.Task] = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:202:1
    |
200 |         self._reconnect_tasks: Dict[str, asyncio.Task] = {}
201 |         self._connection_healthy: Dict[str, bool] = defaultdict(lambda: True)
202 |         
    | ^^^^^^^^
203 |         # Message management
204 |         self._ordering_manager = MessageOrderingManager() if message_ordering else None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:206:1
    |
204 |         self._ordering_manager = MessageOrderingManager() if message_ordering else None
205 |         self._message_callbacks: Dict[str, List[Callable]] = defaultdict(list)
206 |         
    | ^^^^^^^^
207 |         # Metrics and monitoring
208 |         self.metrics = PubSubMetrics()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:211:1
    |
209 |         self._health_check_task: Optional[asyncio.Task] = None
210 |         self._last_health_check = time.time()
211 |         
    | ^^^^^^^^
212 |         # Shutdown flag
213 |         self._shutdown = False
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:214:1
    |
212 |         # Shutdown flag
213 |         self._shutdown = False
214 |     
    | ^^^^
215 |     async def initialize(self) -> None:
216 |         """Initialize the Redis pub/sub manager"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:227:1
    |
225 |                 health_check_interval=30
226 |             )
227 |             
    | ^^^^^^^^^^^^
228 |             # Create main Redis connection
229 |             self._redis = Redis(connection_pool=self._connection_pool)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:230:1
    |
228 |             # Create main Redis connection
229 |             self._redis = Redis(connection_pool=self._connection_pool)
230 |             
    | ^^^^^^^^^^^^
231 |             # Test connection
232 |             await self._redis.ping()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:233:1
    |
231 |             # Test connection
232 |             await self._redis.ping()
233 |             
    | ^^^^^^^^^^^^
234 |             # Start health check task
235 |             self._health_check_task = asyncio.create_task(self._health_check_loop())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:236:1
    |
234 |             # Start health check task
235 |             self._health_check_task = asyncio.create_task(self._health_check_loop())
236 |             
    | ^^^^^^^^^^^^
237 |             logger.info("Enhanced Redis pub/sub initialized successfully")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:238:1
    |
237 |             logger.info("Enhanced Redis pub/sub initialized successfully")
238 |             
    | ^^^^^^^^^^^^
239 |         except Exception as e:
240 |             logger.error(f"Failed to initialize Redis pub/sub: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:242:1
    |
240 |             logger.error(f"Failed to initialize Redis pub/sub: {e}")
241 |             raise
242 |     
    | ^^^^
243 |     async def shutdown(self) -> None:
244 |         """Shutdown the Redis pub/sub manager"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:246:1
    |
244 |         """Shutdown the Redis pub/sub manager"""
245 |         self._shutdown = True
246 |         
    | ^^^^^^^^
247 |         # Cancel health check task
248 |         if self._health_check_task:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:254:1
    |
252 |             except asyncio.CancelledError:
253 |                 pass
254 |         
    | ^^^^^^^^
255 |         # Cancel reconnection tasks
256 |         for task in self._reconnect_tasks.values():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:258:1
    |
256 |         for task in self._reconnect_tasks.values():
257 |             task.cancel()
258 |         
    | ^^^^^^^^
259 |         # Close all pub/sub connections
260 |         for connection in self._pubsub_connections.values():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:265:1
    |
263 |             except Exception:
264 |                 pass
265 |         
    | ^^^^^^^^
266 |         # Close main connection
267 |         if self._redis:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:269:1
    |
267 |         if self._redis:
268 |             await self._redis.close()
269 |         
    | ^^^^^^^^
270 |         # Close connection pool
271 |         if self._connection_pool:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:273:1
    |
271 |         if self._connection_pool:
272 |             await self._connection_pool.disconnect()
273 |         
    | ^^^^^^^^
274 |         logger.info("Enhanced Redis pub/sub shutdown completed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:275:1
    |
274 |         logger.info("Enhanced Redis pub/sub shutdown completed")
275 |     
    | ^^^^
276 |     async def _health_check_loop(self) -> None:
277 |         """Periodic health check for connections"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:286:1
    |
284 |             except Exception as e:
285 |                 logger.error(f"Health check error: {e}")
286 |     
    | ^^^^
287 |     async def _perform_health_check(self) -> None:
288 |         """Perform health check on all connections"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:290:1
    |
288 |         """Perform health check on all connections"""
289 |         self._last_health_check = time.time()
290 |         
    | ^^^^^^^^
291 |         # Check main connection
292 |         if self._redis:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:299:1
    |
297 |                 self._connection_healthy['main'] = False
298 |                 logger.warning("Main Redis connection unhealthy")
299 |         
    | ^^^^^^^^
300 |         # Check pub/sub connections
301 |         for conn_id, connection in self._pubsub_connections.items():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:308:1
    |
306 |                 self._connection_healthy[conn_id] = False
307 |                 logger.warning(f"Redis pub/sub connection {conn_id} unhealthy")
308 |                 
    | ^^^^^^^^^^^^^^^^
309 |                 # Trigger reconnection if not already in progress
310 |                 if conn_id not in self._reconnect_tasks:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:314:1
    |
312 |                         self._reconnect_pubsub(conn_id)
313 |                     )
314 |     
    | ^^^^
315 |     async def _reconnect_pubsub(self, connection_id: str) -> None:
316 |         """Reconnect a pub/sub connection with exponential backoff"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:319:1
    |
317 |         attempt = 0
318 |         delay = self.reconnect_delay
319 |         
    | ^^^^^^^^
320 |         while not self._shutdown and (self.max_reconnect_attempts == -1 or attempt < self.max_reconnect_attempts):
321 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:324:1
    |
322 |                 attempt += 1
323 |                 self.metrics.reconnection_attempts += 1
324 |                 
    | ^^^^^^^^^^^^^^^^
325 |                 logger.info(f"Attempting to reconnect pub/sub connection {connection_id} (attempt {attempt})")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:326:1
    |
325 |                 logger.info(f"Attempting to reconnect pub/sub connection {connection_id} (attempt {attempt})")
326 |                 
    | ^^^^^^^^^^^^^^^^
327 |                 # Close existing connection
328 |                 if connection_id in self._pubsub_connections:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:333:1
    |
331 |                     except Exception:
332 |                         pass
333 |                 
    | ^^^^^^^^^^^^^^^^
334 |                 # Create new connection
335 |                 new_connection = Redis(connection_pool=self._connection_pool)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:337:1
    |
335 |                 new_connection = Redis(connection_pool=self._connection_pool)
336 |                 await new_connection.ping()
337 |                 
    | ^^^^^^^^^^^^^^^^
338 |                 # Resubscribe to channels
339 |                 channels = self._active_subscriptions.get(connection_id, set())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:344:1
    |
342 |                     await pubsub.subscribe(*channels)
343 |                     self._pubsub_connections[connection_id] = new_connection
344 |                 
    | ^^^^^^^^^^^^^^^^
345 |                 self._connection_healthy[connection_id] = True
346 |                 self.metrics.successful_reconnections += 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:347:1
    |
345 |                 self._connection_healthy[connection_id] = True
346 |                 self.metrics.successful_reconnections += 1
347 |                 
    | ^^^^^^^^^^^^^^^^
348 |                 logger.info(f"Successfully reconnected pub/sub connection {connection_id}")
349 |                 break
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:350:1
    |
348 |                 logger.info(f"Successfully reconnected pub/sub connection {connection_id}")
349 |                 break
350 |                 
    | ^^^^^^^^^^^^^^^^
351 |             except Exception as e:
352 |                 self.metrics.connection_failures += 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:354:1
    |
352 |                 self.metrics.connection_failures += 1
353 |                 logger.warning(f"Reconnection attempt {attempt} failed for {connection_id}: {e}")
354 |                 
    | ^^^^^^^^^^^^^^^^
355 |                 if not self._shutdown:
356 |                     await asyncio.sleep(delay)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:358:1
    |
356 |                     await asyncio.sleep(delay)
357 |                     delay = min(delay * self.reconnect_backoff, self.max_reconnect_delay)
358 |         
    | ^^^^^^^^
359 |         # Clean up reconnection task
360 |         if connection_id in self._reconnect_tasks:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:362:1
    |
360 |         if connection_id in self._reconnect_tasks:
361 |             del self._reconnect_tasks[connection_id]
362 |     
    | ^^^^
363 |     async def publish(
364 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:372:1
    |
370 |         """
371 |         Publish a message to a Redis channel with enhanced features.
372 |         
    | ^^^^^^^^
373 |         Args:
374 |             channel: Channel name
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:378:1
    |
376 |             ensure_delivery: Whether to ensure message delivery
377 |             timeout: Publish timeout in seconds
378 |             
    | ^^^^^^^^^^^^
379 |         Returns:
380 |             True if message was published successfully
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:384:1
    |
382 |         if not self._redis or self._shutdown:
383 |             return False
384 |         
    | ^^^^^^^^
385 |         start_time = time.time()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:386:1
    |
385 |         start_time = time.time()
386 |         
    | ^^^^^^^^
387 |         try:
388 |             # Create enhanced message
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:396:1
    |
394 |                 sequence_number=self._ordering_manager.get_next_sequence(channel) if self._ordering_manager else None
395 |             )
396 |             
    | ^^^^^^^^^^^^
397 |             # Serialize message
398 |             serialized_message = json.dumps(enhanced_message.to_dict())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:399:1
    |
397 |             # Serialize message
398 |             serialized_message = json.dumps(enhanced_message.to_dict())
399 |             
    | ^^^^^^^^^^^^
400 |             # Publish with timeout
401 |             subscribers = await asyncio.wait_for(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:405:1
    |
403 |                 timeout=timeout
404 |             )
405 |             
    | ^^^^^^^^^^^^
406 |             # Update metrics
407 |             self.metrics.messages_published += 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:413:1
    |
411 |                 self.metrics.messages_published
412 |             )
413 |             
    | ^^^^^^^^^^^^
414 |             if ensure_delivery and subscribers == 0:
415 |                 logger.warning(f"No subscribers for channel {channel}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:417:1
    |
415 |                 logger.warning(f"No subscribers for channel {channel}")
416 |                 return False
417 |             
    | ^^^^^^^^^^^^
418 |             logger.debug(f"Published message to {channel} ({subscribers} subscribers)")
419 |             return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:420:1
    |
418 |             logger.debug(f"Published message to {channel} ({subscribers} subscribers)")
419 |             return True
420 |             
    | ^^^^^^^^^^^^
421 |         except asyncio.TimeoutError:
422 |             logger.error(f"Publish timeout for channel {channel}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:428:1
    |
426 |             self.metrics.connection_failures += 1
427 |             return False
428 |     
    | ^^^^
429 |     @asynccontextmanager
430 |     async def subscribe(
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:438:1
    |
436 |         """
437 |         Subscribe to Redis channels with enhanced features.
438 |         
    | ^^^^^^^^
439 |         Args:
440 |             channels: Channel names to subscribe to
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:443:1
    |
441 |             connection_id: Optional connection identifier
442 |             auto_reconnect: Whether to automatically reconnect on failures
443 |             
    | ^^^^^^^^^^^^
444 |         Yields:
445 |             Async generator of enhanced messages
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:449:1
    |
447 |         if not self._redis or self._shutdown:
448 |             return
449 |         
    | ^^^^^^^^
450 |         conn_id = connection_id or f"sub_{uuid.uuid4().hex[:8]}"
451 |         pubsub = None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:452:1
    |
450 |         conn_id = connection_id or f"sub_{uuid.uuid4().hex[:8]}"
451 |         pubsub = None
452 |         
    | ^^^^^^^^
453 |         try:
454 |             # Create dedicated connection for subscription
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:457:1
    |
455 |             connection = Redis(connection_pool=self._connection_pool)
456 |             pubsub = connection.pubsub()
457 |             
    | ^^^^^^^^^^^^
458 |             # Subscribe to channels
459 |             await pubsub.subscribe(*channels)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:463:1
    |
461 |             self._active_subscriptions[conn_id].update(channels)
462 |             self.metrics.active_subscriptions += 1
463 |             
    | ^^^^^^^^^^^^
464 |             logger.info(f"Subscribed to channels {channels} with connection {conn_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:465:1
    |
464 |             logger.info(f"Subscribed to channels {channels} with connection {conn_id}")
465 |             
    | ^^^^^^^^^^^^
466 |             async def message_generator():
467 |                 """Generate enhanced messages from subscription"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:475:1
    |
473 | …                     message_data = json.loads(raw_message['data'])
474 | …                     message = PubSubMessage(**message_data)
475 | …                     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
476 | …                     # Process with ordering manager if enabled
477 | …                     if self._ordering_manager:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:489:1
    |
487 | …                             else:
488 | …                                 self.metrics.messages_duplicated += 1
489 | …                                 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
490 | …                     except (json.JSONDecodeError, TypeError) as e:
491 | …                         logger.warning(f"Failed to parse message from {raw_message['channel']}: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:501:1
    |
499 |                                 self.metrics.messages_received += 1
500 |                                 yield simple_message
501 |                                 
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
502 |                 except Exception as e:
503 |                     logger.error(f"Subscription error for connection {conn_id}: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:510:1
    |
508 |                                 self._reconnect_pubsub(conn_id)
509 |                             )
510 |             
    | ^^^^^^^^^^^^
511 |             yield message_generator()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:512:1
    |
511 |             yield message_generator()
512 |             
    | ^^^^^^^^^^^^
513 |         except Exception as e:
514 |             logger.error(f"Failed to create subscription {conn_id}: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:525:1
    |
523 |                 except Exception:
524 |                     pass
525 |             
    | ^^^^^^^^^^^^
526 |             if conn_id in self._pubsub_connections:
527 |                 try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:532:1
    |
530 |                 except Exception:
531 |                     pass
532 |             
    | ^^^^^^^^^^^^
533 |             if conn_id in self._active_subscriptions:
534 |                 del self._active_subscriptions[conn_id]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:535:1
    |
533 |             if conn_id in self._active_subscriptions:
534 |                 del self._active_subscriptions[conn_id]
535 |             
    | ^^^^^^^^^^^^
536 |             self.metrics.active_subscriptions = max(0, self.metrics.active_subscriptions - 1)
537 |             logger.info(f"Unsubscribed from channels {channels} (connection {conn_id})")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:538:1
    |
536 |             self.metrics.active_subscriptions = max(0, self.metrics.active_subscriptions - 1)
537 |             logger.info(f"Unsubscribed from channels {channels} (connection {conn_id})")
538 |     
    | ^^^^
539 |     def get_metrics(self) -> Dict[str, Any]:
540 |         """Get current pub/sub metrics"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/redis_pubsub.py:542:1
    |
540 |         """Get current pub/sub metrics"""
541 |         return self.metrics.to_dict()
542 |     
    | ^^^^
543 |     def get_health_status(self) -> Dict[str, Any]:
544 |         """Get health status of all connections"""
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/redis_pubsub.py:556:40
    |
555 | # Global enhanced pub/sub manager instance
556 | enhanced_pubsub = EnhancedRedisPubSub()
    |                                        ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/repositories/db_utils.py:7:1
   |
 5 |   retry logic, and monitor database performance for the trading platform.
 6 |   """
 7 | / import asyncio
 8 | | import logging
 9 | | import time
10 | | from contextlib import asynccontextmanager
11 | | from typing import Optional, Callable, Any, Dict, List, TypeVar, Awaitable
12 | | from functools import wraps
13 | | from sqlalchemy.ext.asyncio import AsyncSession
14 | | from sqlalchemy.exc import (
15 | |     DisconnectionError, 
16 | |     TimeoutError, 
17 | |     OperationalError,
18 | |     StatementError
19 | | )
   | |_^
20 |
21 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

F401 [*] `typing.Optional` imported but unused
  --> src/infrastructure/repositories/db_utils.py:11:20
   |
 9 | import time
10 | from contextlib import asynccontextmanager
11 | from typing import Optional, Callable, Any, Dict, List, TypeVar, Awaitable
   |                    ^^^^^^^^
12 | from functools import wraps
13 | from sqlalchemy.ext.asyncio import AsyncSession
   |
help: Remove unused import: `typing.Optional`

W291 [*] Trailing whitespace
  --> src/infrastructure/repositories/db_utils.py:15:24
   |
13 | from sqlalchemy.ext.asyncio import AsyncSession
14 | from sqlalchemy.exc import (
15 |     DisconnectionError, 
   |                        ^
16 |     TimeoutError, 
17 |     OperationalError,
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> src/infrastructure/repositories/db_utils.py:16:18
   |
14 | from sqlalchemy.exc import (
15 |     DisconnectionError, 
16 |     TimeoutError, 
   |                  ^
17 |     OperationalError,
18 |     StatementError
   |
help: Remove trailing whitespace

F401 [*] `sqlalchemy.exc.StatementError` imported but unused
  --> src/infrastructure/repositories/db_utils.py:18:5
   |
16 |     TimeoutError, 
17 |     OperationalError,
18 |     StatementError
   |     ^^^^^^^^^^^^^^
19 | )
   |
help: Remove unused import: `sqlalchemy.exc.StatementError`

W293 Blank line contains whitespace
  --> src/infrastructure/repositories/db_utils.py:54:1
   |
52 |     """
53 |     Determine if a database error is retryable.
54 |     
   | ^^^^
55 |     Args:
56 |         error: The exception to check
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/repositories/db_utils.py:57:1
   |
55 |     Args:
56 |         error: The exception to check
57 |         
   | ^^^^^^^^
58 |     Returns:
59 |         True if the error is retryable, False otherwise
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/db_utils.py:68:1
   |
66 |         OSError
67 |     )
68 |     
   | ^^^^
69 |     # Check for specific error messages that indicate retryable conditions
70 |     error_message = str(error).lower()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/db_utils.py:80:1
   |
78 |         "connection pool exhausted"
79 |     ]
80 |     
   | ^^^^
81 |     return (
82 |         isinstance(error, retryable_errors) or
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/repositories/db_utils.py:96:1
   |
94 |     """
95 |     Decorator for database operations with retry logic.
96 |     
   | ^^^^
97 |     Args:
98 |         max_retries: Maximum number of retry attempts
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:103:1
    |
101 |         max_delay: Maximum delay between retries
102 |         exceptions: Tuple of exceptions to catch and retry on
103 |         
    | ^^^^^^^^
104 |     Returns:
105 |         Decorated function with retry logic
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:109:1
    |
107 |     if exceptions is None:
108 |         exceptions = (DatabaseError, DisconnectionError, TimeoutError, OperationalError)
109 |     
    | ^^^^
110 |     def decorator(func: Callable[..., Awaitable[T]]) -> Callable[..., Awaitable[T]]:
111 |         @wraps(func)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:115:1
    |
113 |             current_delay = delay
114 |             last_exception = None
115 |             
    | ^^^^^^^^^^^^
116 |             for attempt in range(max_retries + 1):
117 |                 try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:121:1
    |
119 |                 except Exception as e:
120 |                     last_exception = e
121 |                     
    | ^^^^^^^^^^^^^^^^^^^^
122 |                     if attempt == max_retries:
123 |                         logger.error(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:134:1
    |
132 |                         )
133 |                         raise DatabaseError(f"Operation failed after {max_retries} retries: {str(e)}") from e
134 |                     
    | ^^^^^^^^^^^^^^^^^^^^
135 |                     if not (isinstance(e, exceptions) or is_retryable_error(e)):
136 |                         logger.error(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:145:1
    |
143 |                         )
144 |                         raise
145 |                     
    | ^^^^^^^^^^^^^^^^^^^^
146 |                     logger.warning(
147 |                         "Database operation failed, retrying",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:157:1
    |
155 |                         }
156 |                     )
157 |                     
    | ^^^^^^^^^^^^^^^^^^^^
158 |                     await asyncio.sleep(current_delay)
159 |                     current_delay = min(current_delay * backoff, max_delay)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:160:1
    |
158 |                     await asyncio.sleep(current_delay)
159 |                     current_delay = min(current_delay * backoff, max_delay)
160 |             
    | ^^^^^^^^^^^^
161 |             # This should never be reached, but just in case
162 |             raise last_exception
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:163:1
    |
161 |             # This should never be reached, but just in case
162 |             raise last_exception
163 |         
    | ^^^^^^^^
164 |         return wrapper
165 |     return decorator
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:172:1
    |
170 |     """
171 |     Context manager for monitoring database operation performance.
172 |     
    | ^^^^
173 |     Args:
174 |         operation_name: Name of the database operation
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:176:1
    |
174 |         operation_name: Name of the database operation
175 |         session: Database session
176 |         
    | ^^^^^^^^
177 |     Yields:
178 |         Dictionary containing operation metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:188:1
    |
186 |         "error": None
187 |     }
188 |     
    | ^^^^
189 |     try:
190 |         logger.debug(f"Starting database operation: {operation_name}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:192:1
    |
190 |         logger.debug(f"Starting database operation: {operation_name}")
191 |         yield metrics
192 |         
    | ^^^^^^^^
193 |         metrics["success"] = True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:194:1
    |
193 |         metrics["success"] = True
194 |         
    | ^^^^^^^^
195 |     except Exception as e:
196 |         metrics["error"] = str(e)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:198:1
    |
196 |         metrics["error"] = str(e)
197 |         metrics["error_type"] = type(e).__name__
198 |         
    | ^^^^^^^^
199 |         logger.error(
200 |             "Database operation failed",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:209:1
    |
207 |         )
208 |         raise
209 |         
    | ^^^^^^^^
210 |     finally:
211 |         end_time = time.time()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:213:1
    |
211 |         end_time = time.time()
212 |         metrics["duration"] = end_time - start_time
213 |         
    | ^^^^^^^^
214 |         # Log performance metrics
215 |         if metrics["duration"] > VERY_SLOW_QUERY_THRESHOLD:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:240:1
    |
238 |     """
239 |     Execute a database operation with timeout.
240 |     
    | ^^^^
241 |     Args:
242 |         session: Database session
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:246:1
    |
244 |         timeout: Timeout in seconds
245 |         operation_name: Name for logging purposes
246 |         
    | ^^^^^^^^
247 |     Returns:
248 |         Result of the operation
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:249:1
    |
247 |     Returns:
248 |         Result of the operation
249 |         
    | ^^^^^^^^
250 |     Raises:
251 |         DatabaseTimeoutError: If operation times out
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:275:1
    |
273 |                 }
274 |             )
275 |         
    | ^^^^^^^^
276 |         raise DatabaseTimeoutError(f"Operation '{operation_name}' timed out after {timeout} seconds")
277 |     except Exception as e:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:291:1
    |
289 | class BatchOperationManager:
290 |     """Manager for batch database operations to reduce round trips"""
291 |     
    | ^^^^
292 |     def __init__(self, session: AsyncSession, batch_size: int = 100):
293 |         self.session = session
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:296:1
    |
294 |         self.batch_size = batch_size
295 |         self.pending_operations: List[Dict[str, Any]] = []
296 |     
    | ^^^^
297 |     def add_operation(self, operation_type: str, **kwargs):
298 |         """Add an operation to the batch"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:303:1
    |
301 |             "data": kwargs
302 |         })
303 |     
    | ^^^^
304 |     async def execute_batch(self) -> Dict[str, int]:
305 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:307:1
    |
305 |         """
306 |         Execute all pending operations in batches.
307 |         
    | ^^^^^^^^
308 |         Returns:
309 |             Dictionary with operation counts
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:313:1
    |
311 |         if not self.pending_operations:
312 |             return {"total": 0}
313 |         
    | ^^^^^^^^
314 |         results = {"total": len(self.pending_operations)}
315 |         operation_groups = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:316:1
    |
314 |         results = {"total": len(self.pending_operations)}
315 |         operation_groups = {}
316 |         
    | ^^^^^^^^
317 |         # Group operations by type
318 |         for op in self.pending_operations:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:323:1
    |
321 |                 operation_groups[op_type] = []
322 |             operation_groups[op_type].append(op["data"])
323 |         
    | ^^^^^^^^
324 |         # Execute each group in batches
325 |         for op_type, operations in operation_groups.items():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:327:1
    |
325 |         for op_type, operations in operation_groups.items():
326 |             results[op_type] = len(operations)
327 |             
    | ^^^^^^^^^^^^
328 |             for i in range(0, len(operations), self.batch_size):
329 |                 batch = operations[i:i + self.batch_size]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:331:1
    |
329 |                 batch = operations[i:i + self.batch_size]
330 |                 await self._execute_batch_by_type(op_type, batch)
331 |         
    | ^^^^^^^^
332 |         # Clear pending operations
333 |         self.pending_operations.clear()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:334:1
    |
332 |         # Clear pending operations
333 |         self.pending_operations.clear()
334 |         
    | ^^^^^^^^
335 |         return results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:336:1
    |
335 |         return results
336 |     
    | ^^^^
337 |     async def _execute_batch_by_type(self, operation_type: str, batch: List[Dict[str, Any]]):
338 |         """Execute a batch of operations of the same type"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:346:1
    |
344 |             else:
345 |                 logger.warning(f"Unknown batch operation type: {operation_type}")
346 |                 
    | ^^^^^^^^^^^^^^^^
347 |         except Exception as e:
348 |             logger.error(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:357:1
    |
355 |             )
356 |             raise
357 |     
    | ^^^^
358 |     async def _batch_update_job_status(self, batch: List[Dict[str, Any]]):
359 |         """Execute batch job status updates"""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> src/infrastructure/repositories/db_utils.py:360:9
    |
358 |       async def _batch_update_job_status(self, batch: List[Dict[str, Any]]):
359 |           """Execute batch job status updates"""
360 | /         from sqlalchemy import update
361 | |         from infrastructure.models import Job
    | |_____________________________________________^
362 |           
363 |           for job_data in batch:
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:362:1
    |
360 |         from sqlalchemy import update
361 |         from infrastructure.models import Job
362 |         
    | ^^^^^^^^
363 |         for job_data in batch:
364 |             await self.session.execute(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:377:1
    |
375 |                 )
376 |             )
377 |         
    | ^^^^^^^^
378 |         await self.session.commit()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:379:1
    |
378 |         await self.session.commit()
379 |     
    | ^^^^
380 |     async def _batch_update_job_progress(self, batch: List[Dict[str, Any]]):
381 |         """Execute batch job progress updates"""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> src/infrastructure/repositories/db_utils.py:382:9
    |
380 |       async def _batch_update_job_progress(self, batch: List[Dict[str, Any]]):
381 |           """Execute batch job progress updates"""
382 | /         from sqlalchemy import update
383 | |         from infrastructure.models import Job
    | |_____________________________________________^
384 |           
385 |           for job_data in batch:
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:384:1
    |
382 |         from sqlalchemy import update
383 |         from infrastructure.models import Job
384 |         
    | ^^^^^^^^
385 |         for job_data in batch:
386 |             await self.session.execute(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:395:1
    |
393 |                 )
394 |             )
395 |         
    | ^^^^^^^^
396 |         await self.session.commit()
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:402:1
    |
400 |     """
401 |     Check if database connection is healthy.
402 |     
    | ^^^^
403 |     Args:
404 |         session: Database session to check
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/db_utils.py:405:1
    |
403 |     Args:
404 |         session: Database session to check
405 |         
    | ^^^^^^^^
406 |     Returns:
407 |         True if connection is healthy, False otherwise
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/repositories/db_utils.py:420:21
    |
418 |             }
419 |         )
420 |         return False
    |                     ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/repositories/jobs.py:7:1
   |
 5 |   and status tracking in the Monte Carlo queue system.
 6 |   """
 7 | / import json
 8 | | import logging
 9 | | import base64
10 | | from datetime import datetime, timedelta
11 | | from typing import Optional, List, Dict, Any
12 | | from sqlalchemy import select, update, and_, or_, text
13 | | from sqlalchemy.ext.asyncio import AsyncSession
14 | | from sqlalchemy.exc import IntegrityError
15 | |
16 | | from infrastructure.models import Job
17 | | from domain.queue import JobStatus
18 | | from infrastructure.cache import cache_manager, cached_result
19 | | from infrastructure.repositories.db_utils import (
20 | |     db_retry,
21 | |     db_operation_monitor,
22 | |     execute_with_timeout,
23 | |     BatchOperationManager,
24 | |     check_connection_health,
25 | |     DatabaseError,
26 | |     DatabaseTimeoutError
27 | | )
   | |_^
28 |
29 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

F401 [*] `json` imported but unused
 --> src/infrastructure/repositories/jobs.py:7:8
  |
5 | and status tracking in the Monte Carlo queue system.
6 | """
7 | import json
  |        ^^^^
8 | import logging
9 | import base64
  |
help: Remove unused import: `json`

F401 [*] `sqlalchemy.exc.IntegrityError` imported but unused
  --> src/infrastructure/repositories/jobs.py:14:28
   |
12 | from sqlalchemy import select, update, and_, or_, text
13 | from sqlalchemy.ext.asyncio import AsyncSession
14 | from sqlalchemy.exc import IntegrityError
   |                            ^^^^^^^^^^^^^^
15 |
16 | from infrastructure.models import Job
   |
help: Remove unused import: `sqlalchemy.exc.IntegrityError`

F401 [*] `domain.queue.JobStatus` imported but unused
  --> src/infrastructure/repositories/jobs.py:17:26
   |
16 | from infrastructure.models import Job
17 | from domain.queue import JobStatus
   |                          ^^^^^^^^^
18 | from infrastructure.cache import cache_manager, cached_result
19 | from infrastructure.repositories.db_utils import (
   |
help: Remove unused import: `domain.queue.JobStatus`

F401 [*] `infrastructure.repositories.db_utils.check_connection_health` imported but unused
  --> src/infrastructure/repositories/jobs.py:24:5
   |
22 |     execute_with_timeout,
23 |     BatchOperationManager,
24 |     check_connection_health,
   |     ^^^^^^^^^^^^^^^^^^^^^^^
25 |     DatabaseError,
26 |     DatabaseTimeoutError
   |
help: Remove unused import

F401 [*] `infrastructure.repositories.db_utils.DatabaseTimeoutError` imported but unused
  --> src/infrastructure/repositories/jobs.py:26:5
   |
24 |     check_connection_health,
25 |     DatabaseError,
26 |     DatabaseTimeoutError
   |     ^^^^^^^^^^^^^^^^^^^^
27 | )
   |
help: Remove unused import

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:34:1
   |
32 | class JobRepository:
33 |     """Repository for job database operations"""
34 |     
   | ^^^^
35 |     def __init__(self, session: AsyncSession):
36 |         self.session = session
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:38:1
   |
36 |         self.session = session
37 |         self._batch_manager = BatchOperationManager(session)
38 |     
   | ^^^^
39 |     async def batch_update_job_statuses(self, updates: List[Dict[str, Any]]) -> Dict[str, int]:
40 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:42:1
   |
40 |         """
41 |         Batch update multiple job statuses to reduce database round trips.
42 |         
   | ^^^^^^^^
43 |         Args:
44 |             updates: List of job update dictionaries containing job_id, status, and other fields
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:45:1
   |
43 |         Args:
44 |             updates: List of job update dictionaries containing job_id, status, and other fields
45 |             
   | ^^^^^^^^^^^^
46 |         Returns:
47 |             Dictionary with operation counts
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:48:1
   |
46 |         Returns:
47 |             Dictionary with operation counts
48 |             
   | ^^^^^^^^^^^^
49 |         Raises:
50 |             DatabaseError: If batch operation fails
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:55:1
   |
53 |             for update_data in updates:
54 |                 self._batch_manager.add_operation("job_status_update", **update_data)
55 |             
   | ^^^^^^^^^^^^
56 |             results = await self._batch_manager.execute_batch()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:57:1
   |
56 |             results = await self._batch_manager.execute_batch()
57 |             
   | ^^^^^^^^^^^^
58 |             # Invalidate caches for all updated jobs
59 |             for update_data in updates:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:62:1
   |
60 |                 if "job_id" in update_data:
61 |                     await self._invalidate_job_caches(update_data["job_id"])
62 |             
   | ^^^^^^^^^^^^
63 |             logger.info("Batch job status update completed", extra={
64 |                 "total_updates": len(updates),
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:67:1
   |
65 |                 "results": results
66 |             })
67 |             
   | ^^^^^^^^^^^^
68 |             return results
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:69:1
   |
68 |             return results
69 |             
   | ^^^^^^^^^^^^
70 |         except Exception as e:
71 |             logger.error("Batch job status update failed", extra={
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:76:1
   |
74 |             })
75 |             raise DatabaseError(f"Batch update failed: {str(e)}") from e
76 |     
   | ^^^^
77 |     async def batch_update_job_progress(self, updates: List[Dict[str, Any]]) -> Dict[str, int]:
78 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:80:1
   |
78 |         """
79 |         Batch update multiple job progress values to reduce database round trips.
80 |         
   | ^^^^^^^^
81 |         Args:
82 |             updates: List of job progress update dictionaries
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:83:1
   |
81 |         Args:
82 |             updates: List of job progress update dictionaries
83 |             
   | ^^^^^^^^^^^^
84 |         Returns:
85 |             Dictionary with operation counts
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:86:1
   |
84 |         Returns:
85 |             Dictionary with operation counts
86 |             
   | ^^^^^^^^^^^^
87 |         Raises:
88 |             DatabaseError: If batch operation fails
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:95:1
   |
93 |                 if "progress" in update_data:
94 |                     update_data["progress"] = max(0.0, min(1.0, update_data["progress"]))
95 |                 
   | ^^^^^^^^^^^^^^^^
96 |                 self._batch_manager.add_operation("job_progress_update", **update_data)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/repositories/jobs.py:97:1
   |
96 |                 self._batch_manager.add_operation("job_progress_update", **update_data)
97 |             
   | ^^^^^^^^^^^^
98 |             results = await self._batch_manager.execute_batch()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:99:1
    |
 98 |             results = await self._batch_manager.execute_batch()
 99 |             
    | ^^^^^^^^^^^^
100 |             logger.info("Batch job progress update completed", extra={
101 |                 "total_updates": len(updates),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:104:1
    |
102 |                 "results": results
103 |             })
104 |             
    | ^^^^^^^^^^^^
105 |             return results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:106:1
    |
105 |             return results
106 |             
    | ^^^^^^^^^^^^
107 |         except Exception as e:
108 |             logger.error("Batch job progress update failed", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:113:1
    |
111 |             })
112 |             raise DatabaseError(f"Batch progress update failed: {str(e)}") from e
113 |     
    | ^^^^
114 |     @db_retry(max_retries=3, delay=1.0)
115 |     async def create_job(
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:125:1
    |
123 |         """
124 |         Create a new job in the database with retry logic and performance monitoring.
125 |         
    | ^^^^^^^^
126 |         Args:
127 |             job_id: Unique job identifier
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:132:1
    |
130 |             priority: Job priority
131 |             dedup_key: Deduplication key for idempotence
132 |             
    | ^^^^^^^^^^^^
133 |         Returns:
134 |             Created job instance
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:135:1
    |
133 |         Returns:
134 |             Created job instance
135 |             
    | ^^^^^^^^^^^^
136 |         Raises:
137 |             IntegrityError: If dedup_key already exists
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:161:1
    |
159 |                 dedup_key=dedup_key
160 |             )
161 |             
    | ^^^^^^^^^^^^
162 |             async def create_operation():
163 |                 self.session.add(job)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:167:1
    |
165 |                 await self.session.refresh(job)
166 |                 return job
167 |             
    | ^^^^^^^^^^^^
168 |             return await execute_with_timeout(
169 |                 self.session,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:174:1
    |
172 |                 operation_name="create_job"
173 |             )
174 |     
    | ^^^^
175 |     @cached_result("job", ttl=300)  # Cache for 5 minutes
176 |     async def get_job_by_id(self, job_id: str) -> Optional[Job]:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:180:1
    |
178 |         result = await self.session.execute(select(Job).where(Job.id == job_id))
179 |         job = result.scalar_one_or_none()
180 |         
    | ^^^^^^^^
181 |         # Invalidate cache if job is completed or failed
182 |         if job and job.status in ["completed", "failed"]:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:185:1
    |
183 |             cache_key = cache_manager._generate_key("job", "get_job_by_id", args=str((job_id,)), kwargs=[])
184 |             await cache_manager.delete(cache_key)
185 |         
    | ^^^^^^^^
186 |         return job
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:187:1
    |
186 |         return job
187 |     
    | ^^^^
188 |     async def get_job_by_dedup_key(self, dedup_key: str) -> Optional[Job]:
189 |         """Get job by deduplication key"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:194:1
    |
192 |         )
193 |         return result.scalar_one_or_none()
194 |     
    | ^^^^
195 |     async def find_existing_job(self, dedup_key: str) -> Optional[Job]:
196 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:198:1
    |
196 |         """
197 |         Find existing job with same dedup_key in PENDING or PROCESSING status.
198 |         
    | ^^^^^^^^
199 |         Args:
200 |             dedup_key: Deduplication key to search for
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:201:1
    |
199 |         Args:
200 |             dedup_key: Deduplication key to search for
201 |             
    | ^^^^^^^^^^^^
202 |         Returns:
203 |             Existing job if found, None otherwise
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:207:1
    |
205 |         if not dedup_key:
206 |             return None
207 |             
    | ^^^^^^^^^^^^
208 |         result = await self.session.execute(
209 |             select(Job).where(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:220:1
    |
218 |         )
219 |         return result.scalar_one_or_none()
220 |     
    | ^^^^
221 |     @cached_result("job_counts", ttl=60)  # Cache for 1 minute
222 |     async def get_job_counts_by_status(self) -> Dict[str, int]:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:225:1
    |
223 |         """
224 |         Get job counts grouped by status for metrics with caching.
225 |         
    | ^^^^^^^^
226 |         Returns:
227 |             Dictionary mapping status to count
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:238:1
    |
236 |                 """)
237 |             )
238 |             
    | ^^^^^^^^^^^^
239 |             rows = result.fetchall()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:240:1
    |
239 |             rows = result.fetchall()
240 |             
    | ^^^^^^^^^^^^
241 |             # Convert to dictionary
242 |             counts = {row.status: row.count for row in rows}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:243:1
    |
241 |             # Convert to dictionary
242 |             counts = {row.status: row.count for row in rows}
243 |             
    | ^^^^^^^^^^^^
244 |             # Ensure all statuses are represented
245 |             all_statuses = ['pending', 'processing', 'completed', 'failed', 'retry']
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:249:1
    |
247 |                 if status not in counts:
248 |                     counts[status] = 0
249 |                     
    | ^^^^^^^^^^^^^^^^^^^^
250 |             logger.debug("Retrieved job counts by status", extra={
251 |                 "counts": counts,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:254:1
    |
252 |                 "total_jobs": sum(counts.values())
253 |             })
254 |                     
    | ^^^^^^^^^^^^^^^^^^^^
255 |             return counts
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:256:1
    |
255 |             return counts
256 |             
    | ^^^^^^^^^^^^
257 |         except Exception as e:
258 |             logger.error("Failed to get job counts by status", extra={
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:275:1
    |
273 |         """
274 |         Update job progress and timing information.
275 |         
    | ^^^^^^^^
276 |         Args:
277 |             job_id: Job identifier
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:284:1
    |
282 |             started_at: Job start timestamp
283 |             completed_at: Job completion timestamp
284 |             
    | ^^^^^^^^^^^^
285 |         Returns:
286 |             True if update successful, False otherwise
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:291:1
    |
289 |             # Clamp progress between 0 and 1
290 |             progress = max(0.0, min(1.0, progress))
291 |             
    | ^^^^^^^^^^^^
292 |             # Build update values
293 |             update_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:297:1
    |
295 |                 "updated_at": datetime.utcnow()
296 |             }
297 |             
    | ^^^^^^^^^^^^
298 |             # Add timing fields if provided
299 |             if started_at is not None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:303:1
    |
301 |             if completed_at is not None:
302 |                 update_data["completed_at"] = completed_at
303 |             
    | ^^^^^^^^^^^^
304 |             # Get current job to update payload
305 |             result = await self.session.execute(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:309:1
    |
307 |             )
308 |             job = result.scalar_one_or_none()
309 |             
    | ^^^^^^^^^^^^
310 |             if job:
311 |                 payload = job.payload.copy() if job.payload else {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:319:1
    |
317 |                     payload["total_runs"] = total_runs
318 |                 update_data["payload"] = payload
319 |             
    | ^^^^^^^^^^^^
320 |             result = await self.session.execute(
321 |                 update(Job)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:325:1
    |
323 |                 .values(**update_data)
324 |             )
325 |             
    | ^^^^^^^^^^^^
326 |             await self.session.commit()
327 |             return result.rowcount > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:328:1
    |
326 |             await self.session.commit()
327 |             return result.rowcount > 0
328 |             
    | ^^^^^^^^^^^^
329 |         except Exception as e:
330 |             await self.session.rollback()
    |
help: Remove whitespace from blank line

F841 [*] Local variable `e` is assigned to but never used
   --> src/infrastructure/repositories/jobs.py:329:29
    |
327 |             return result.rowcount > 0
328 |             
329 |         except Exception as e:
    |                             ^
330 |             await self.session.rollback()
331 |             return False
    |
help: Remove assignment to unused variable `e`

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:346:1
    |
344 |         """
345 |         Update job status with retry logic, timeout handling, and cache invalidation.
346 |         
    | ^^^^^^^^
347 |         Args:
348 |             job_id: Job identifier
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:355:1
    |
353 |             artifact_url: URL to job artifacts
354 |             completed_at: Job completion timestamp
355 |             
    | ^^^^^^^^^^^^
356 |         Returns:
357 |             True if update successful, False otherwise
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:358:1
    |
356 |         Returns:
357 |             True if update successful, False otherwise
358 |             
    | ^^^^^^^^^^^^
359 |         Raises:
360 |             DatabaseError: If operation fails after retries
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:369:1
    |
367 |                     "updated_at": datetime.utcnow()
368 |                 }
369 |                 
    | ^^^^^^^^^^^^^^^^
370 |                 if worker_id is not None:
371 |                     update_data["worker_id"] = worker_id
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:380:1
    |
378 |                 if completed_at is not None:
379 |                     update_data["completed_at"] = completed_at
380 |                 
    | ^^^^^^^^^^^^^^^^
381 |                 async def update_operation():
382 |                     result = await self.session.execute(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:389:1
    |
387 |                     await self.session.commit()
388 |                     return result.rowcount > 0
389 |                 
    | ^^^^^^^^^^^^^^^^
390 |                 success = await execute_with_timeout(
391 |                     self.session,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:396:1
    |
394 |                     operation_name="update_job_status"
395 |                 )
396 |                 
    | ^^^^^^^^^^^^^^^^
397 |                 # Invalidate caches after successful update
398 |                 if success:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:406:1
    |
404 |                         "progress": progress
405 |                     })
406 |                 
    | ^^^^^^^^^^^^^^^^
407 |                 return success
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:408:1
    |
407 |                 return success
408 |                 
    | ^^^^^^^^^^^^^^^^
409 |             except Exception as e:
410 |                 try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:417:1
    |
415 |                         "rollback_error": str(rollback_error)
416 |                     })
417 |                 
    | ^^^^^^^^^^^^^^^^
418 |                 logger.error("Failed to update job status", extra={
419 |                     "job_id": job_id,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:424:1
    |
422 |                 })
423 |                 raise DatabaseError(f"Failed to update job status: {str(e)}") from e
424 |     
    | ^^^^
425 |     async def _invalidate_job_caches(self, job_id: str) -> None:
426 |         """Invalidate caches related to a specific job"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:431:1
    |
429 |             job_cache_key = cache_manager._generate_key("job", "get_job_by_id", args=str((job_id,)), kwargs=[])
430 |             await cache_manager.delete(job_cache_key)
431 |             
    | ^^^^^^^^^^^^
432 |             # Invalidate job counts cache
433 |             await cache_manager.delete_pattern("job_counts:*")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:434:1
    |
432 |             # Invalidate job counts cache
433 |             await cache_manager.delete_pattern("job_counts:*")
434 |             
    | ^^^^^^^^^^^^
435 |             logger.debug("Invalidated job caches", extra={"job_id": job_id})
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:436:1
    |
435 |             logger.debug("Invalidated job caches", extra={"job_id": job_id})
436 |             
    | ^^^^^^^^^^^^
437 |         except Exception as e:
438 |             logger.warning("Failed to invalidate job caches", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:442:1
    |
440 |                 "error": str(e)
441 |             })
442 |     
    | ^^^^
443 |     async def increment_attempts(self, job_id: str) -> bool:
444 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:446:1
    |
444 |         """
445 |         Increment job attempt count.
446 |         
    | ^^^^^^^^
447 |         Args:
448 |             job_id: Job identifier
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:449:1
    |
447 |         Args:
448 |             job_id: Job identifier
449 |             
    | ^^^^^^^^^^^^
450 |         Returns:
451 |             True if job was updated, False if not found
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:461:1
    |
459 |             )
460 |         )
461 |         
    | ^^^^^^^^
462 |         await self.session.commit()
463 |         return result.rowcount > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:464:1
    |
462 |         await self.session.commit()
463 |         return result.rowcount > 0
464 |     
    | ^^^^
465 |     async def list_jobs(
466 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:474:1
    |
472 |         """
473 |         List jobs with optional filtering.
474 |         
    | ^^^^^^^^
475 |         Args:
476 |             status: Filter by status
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:480:1
    |
478 |             limit: Maximum number of jobs to return
479 |             offset: Number of jobs to skip
480 |             
    | ^^^^^^^^^^^^
481 |         Returns:
482 |             List of jobs
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:485:1
    |
483 |         """
484 |         query = select(Job)
485 |         
    | ^^^^^^^^
486 |         if status:
487 |             query = query.where(Job.status == status)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:490:1
    |
488 |         if worker_id:
489 |             query = query.where(Job.worker_id == worker_id)
490 |             
    | ^^^^^^^^^^^^
491 |         query = query.order_by(Job.created_at.desc()).limit(limit).offset(offset)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:492:1
    |
491 |         query = query.order_by(Job.created_at.desc()).limit(limit).offset(offset)
492 |         
    | ^^^^^^^^
493 |         result = await self.session.execute(query)
494 |         return list(result.scalars().all())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:495:1
    |
493 |         result = await self.session.execute(query)
494 |         return list(result.scalars().all())
495 |     
    | ^^^^
496 |     async def get_job_counts_by_status_simple(self) -> Dict[str, int]:
497 |         """Get count of jobs by status (simple version without caching)"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:499:1
    |
497 |         """Get count of jobs by status (simple version without caching)"""
498 |         from sqlalchemy import func
499 |         
    | ^^^^^^^^
500 |         result = await self.session.execute(
501 |             select(Job.status, func.count(Job.id))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:504:1
    |
502 |             .group_by(Job.status)
503 |         )
504 |         
    | ^^^^^^^^
505 |         return {status: count for status, count in result.all()}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:506:1
    |
505 |         return {status: count for status, count in result.all()}
506 |     
    | ^^^^
507 |     async def cleanup_old_jobs(self, older_than_hours: int = 24) -> int:
508 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:510:1
    |
508 |         """
509 |         Clean up old completed/failed jobs.
510 |         
    | ^^^^^^^^
511 |         Args:
512 |             older_than_hours: Remove jobs older than this many hours
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:513:1
    |
511 |         Args:
512 |             older_than_hours: Remove jobs older than this many hours
513 |             
    | ^^^^^^^^^^^^
514 |         Returns:
515 |             Number of jobs removed
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:518:1
    |
516 |         """
517 |         from sqlalchemy import delete
518 |         
    | ^^^^^^^^
519 |         cutoff_time = datetime.utcnow() - timedelta(hours=older_than_hours)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:520:1
    |
519 |         cutoff_time = datetime.utcnow() - timedelta(hours=older_than_hours)
520 |         
    | ^^^^^^^^
521 |         result = await self.session.execute(
522 |             delete(Job).where(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/repositories/jobs.py:533:1
    |
531 |             )
532 |         )
533 |         
    | ^^^^^^^^
534 |         await self.session.commit()
535 |         return result.rowcount
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/repositories/jobs.py:535:31
    |
534 |         await self.session.commit()
535 |         return result.rowcount
    |                               ^
    |
help: Add trailing newline

W292 [*] No newline at end of file
  --> src/infrastructure/repositories/users.py:19:16
   |
17 |     await db.commit()
18 |     await db.refresh(user)
19 |     return user
   |                ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/security/__init__.py:5:1
   |
 3 |   This module provides IAM policy management, credential management, and security utilities."""
 4 |
 5 | / from .iam_policies import (
 6 | |     IAMPolicy,
 7 | |     IAMPolicyBuilder,
 8 | |     generate_terraform_policies,
 9 | |     validate_policy_permissions
10 | | )
11 | | from .credential_manager import (
12 | |     CredentialManager,
13 | |     AWSCredentials,
14 | |     CredentialSource
15 | | )
   | |_^
16 |
17 |   __all__ = [
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> src/infrastructure/security/__init__.py:19:24
   |
17 | __all__ = [
18 |     "IAMPolicy",
19 |     "IAMPolicyBuilder", 
   |                        ^
20 |     "generate_terraform_policies",
21 |     "validate_policy_permissions",
   |
help: Remove trailing whitespace

W292 [*] No newline at end of file
  --> src/infrastructure/security/__init__.py:25:2
   |
23 |     "AWSCredentials",
24 |     "CredentialSource"
25 | ]
   |  ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/security/credential_manager.py:7:1
   |
 5 |   and other sensitive configuration data with security best practices.
 6 |   """
 7 | / import os
 8 | | import logging
 9 | | from typing import Optional, Dict, Any
10 | | from dataclasses import dataclass
11 | | from enum import Enum
   | |_____________________^
12 |
13 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/credential_manager.py:35:1
   |
33 |     role_arn: Optional[str] = None
34 |     source: CredentialSource = CredentialSource.ENVIRONMENT
35 |     
   | ^^^^
36 |     def is_valid(self) -> bool:
37 |         """Check if credentials are valid for authentication"""
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> src/infrastructure/security/credential_manager.py:43:55
   |
41 |             return self.profile is not None
42 |         elif self.source == CredentialSource.ENVIRONMENT:
43 |             return (self.access_key_id is not None and 
   |                                                       ^
44 |                    self.secret_access_key is not None)
45 |         else:
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/credential_manager.py:48:1
   |
46 |             # Instance/container metadata doesn't require explicit credentials
47 |             return True
48 |     
   | ^^^^
49 |     def to_boto3_config(self) -> Dict[str, Any]:
50 |         """Convert to boto3 session configuration"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/credential_manager.py:52:1
   |
50 |         """Convert to boto3 session configuration"""
51 |         config = {"region_name": self.region}
52 |         
   | ^^^^^^^^
53 |         if self.source == CredentialSource.ENVIRONMENT and self.is_valid():
54 |             config.update({
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/credential_manager.py:62:1
   |
60 |         elif self.source == CredentialSource.AWS_PROFILE and self.profile:
61 |             config["profile_name"] = self.profile
62 |         
   | ^^^^^^^^
63 |         return config
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/credential_manager.py:64:1
   |
63 |         return config
64 |     
   | ^^^^
65 |     def mask_sensitive_data(self) -> Dict[str, Any]:
66 |         """Return credential info with sensitive data masked"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/credential_manager.py:80:1
   |
78 | class CredentialManager:
79 |     """Secure credential management with fallback strategies"""
80 |     
   | ^^^^
81 |     @staticmethod
82 |     def resolve_aws_credentials(
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/security/credential_manager.py:88:1
   |
86 |         """
87 |         Resolve AWS credentials using secure fallback strategy.
88 |         
   | ^^^^^^^^
89 |         Priority order:
90 |         1. IAM Role (if prefer_iam_role=True and in AWS environment)
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/security/credential_manager.py:94:1
   |
92 |         3. Environment variables
93 |         4. Instance/Container metadata (if in AWS environment)
94 |         
   | ^^^^^^^^
95 |         Args:
96 |             environment: Current environment (development, staging, production)
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:98:1
    |
 96 |             environment: Current environment (development, staging, production)
 97 |             prefer_iam_role: Whether to prefer IAM roles over explicit credentials
 98 |             
    | ^^^^^^^^^^^^
 99 |         Returns:
100 |             AWSCredentials configuration
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:103:1
    |
101 |         """
102 |         region = os.getenv("AWS_REGION", "us-east-1")
103 |         
    | ^^^^^^^^
104 |         # Check for IAM role configuration (preferred for production)
105 |         role_arn = os.getenv("AWS_ROLE_ARN")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:116:1
    |
114 |                 source=CredentialSource.IAM_ROLE
115 |             )
116 |         
    | ^^^^^^^^
117 |         # Check for AWS profile
118 |         profile = os.getenv("AWS_PROFILE")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:129:1
    |
127 |                 source=CredentialSource.AWS_PROFILE
128 |             )
129 |         
    | ^^^^^^^^
130 |         # Check for explicit environment variables
131 |         access_key = os.getenv("AWS_ACCESS_KEY_ID")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:134:1
    |
132 |         secret_key = os.getenv("AWS_SECRET_ACCESS_KEY")
133 |         session_token = os.getenv("AWS_SESSION_TOKEN")
134 |         
    | ^^^^^^^^
135 |         if access_key and secret_key:
136 |             logger.info("Using environment variables for AWS authentication", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:147:1
    |
145 |                 source=CredentialSource.ENVIRONMENT
146 |             )
147 |         
    | ^^^^^^^^
148 |         # Fallback to instance/container metadata (for EC2/ECS/Lambda)
149 |         if environment in ("staging", "production"):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:157:1
    |
155 |                 source=CredentialSource.INSTANCE_METADATA
156 |             )
157 |         
    | ^^^^^^^^
158 |         # No credentials found
159 |         logger.warning("No AWS credentials found", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:164:1
    |
162 |         })
163 |         return AWSCredentials(region=region)
164 |     
    | ^^^^
165 |     @staticmethod
166 |     def validate_credentials(credentials: AWSCredentials) -> bool:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:169:1
    |
167 |         """
168 |         Validate AWS credentials without exposing sensitive data.
169 |         
    | ^^^^^^^^
170 |         Args:
171 |             credentials: AWS credentials to validate
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:172:1
    |
170 |         Args:
171 |             credentials: AWS credentials to validate
172 |             
    | ^^^^^^^^^^^^
173 |         Returns:
174 |             True if credentials appear valid
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:179:1
    |
177 |             logger.error("No AWS credentials provided")
178 |             return False
179 |         
    | ^^^^^^^^
180 |         # Debug logging for troubleshooting
181 |         logger.debug("Validating credentials", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:185:1
    |
183 |             "is_valid": credentials.is_valid()
184 |         })
185 |             
    | ^^^^^^^^^^^^
186 |         if not credentials.is_valid():
187 |             logger.error("Invalid AWS credentials configuration", extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:191:1
    |
189 |             })
190 |             return False
191 |         
    | ^^^^^^^^
192 |         # For testing environment, allow mock credentials
193 |         if (credentials.source == CredentialSource.ENVIRONMENT and 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/infrastructure/security/credential_manager.py:193:67
    |
192 |         # For testing environment, allow mock credentials
193 |         if (credentials.source == CredentialSource.ENVIRONMENT and 
    |                                                                   ^
194 |             credentials.access_key_id == 'testing' and 
195 |             credentials.secret_access_key == 'testing'):
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/infrastructure/security/credential_manager.py:194:55
    |
192 |         # For testing environment, allow mock credentials
193 |         if (credentials.source == CredentialSource.ENVIRONMENT and 
194 |             credentials.access_key_id == 'testing' and 
    |                                                       ^
195 |             credentials.secret_access_key == 'testing'):
196 |             logger.info("Using mock AWS credentials for testing", extra={
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:200:1
    |
198 |             })
199 |             return True
200 |         
    | ^^^^^^^^
201 |         logger.info("AWS credentials validated", extra={
202 |             "credential_info": credentials.mask_sensitive_data()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:205:1
    |
203 |         })
204 |         return True
205 |     
    | ^^^^
206 |     @staticmethod
207 |     def get_database_url(mask_in_logs: bool = True) -> Optional[str]:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:210:1
    |
208 |         """
209 |         Get database URL with optional masking for logs.
210 |         
    | ^^^^^^^^
211 |         Args:
212 |             mask_in_logs: Whether to mask the URL in logs
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:213:1
    |
211 |         Args:
212 |             mask_in_logs: Whether to mask the URL in logs
213 |             
    | ^^^^^^^^^^^^
214 |         Returns:
215 |             Database URL or None if not configured
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:218:1
    |
216 |         """
217 |         db_url = os.getenv("DATABASE_URL") or os.getenv("DB_URL")
218 |         
    | ^^^^^^^^
219 |         if db_url and mask_in_logs:
220 |             # Log presence without exposing credentials
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:227:1
    |
225 |         elif not db_url:
226 |             logger.warning("No database URL configured")
227 |         
    | ^^^^^^^^
228 |         return db_url
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:229:1
    |
228 |         return db_url
229 |     
    | ^^^^
230 |     @staticmethod
231 |     def mask_url(url: str) -> str:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:234:1
    |
232 |         """
233 |         Mask sensitive parts of a URL for logging.
234 |         
    | ^^^^^^^^
235 |         Args:
236 |             url: URL to mask
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:237:1
    |
235 |         Args:
236 |             url: URL to mask
237 |             
    | ^^^^^^^^^^^^
238 |         Returns:
239 |             Masked URL safe for logging
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:243:1
    |
241 |         if not url:
242 |             return url
243 |         
    | ^^^^^^^^
244 |         # Basic URL masking - hide credentials but keep structure
245 |         if "://" in url:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:250:1
    |
248 |                 credentials, host_part = rest.split("@", 1)
249 |                 return f"{scheme}://[REDACTED]@{host_part}"
250 |         
    | ^^^^^^^^
251 |         return url
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:252:1
    |
251 |         return url
252 |     
    | ^^^^
253 |     @staticmethod
254 |     def get_secure_config() -> Dict[str, Any]:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:257:1
    |
255 |         """
256 |         Get application configuration with sensitive data masked.
257 |         
    | ^^^^^^^^
258 |         Returns:
259 |             Configuration dictionary safe for logging
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/credential_manager.py:271:1
    |
269 |             "monitoring_enabled": os.getenv("MONITORING_ENABLED", "true").lower() == "true"
270 |         }
271 |         
    | ^^^^^^^^
272 |         return config
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/security/credential_manager.py:272:22
    |
270 |         }
271 |         
272 |         return config
    |                      ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> src/infrastructure/security/iam_policies.py:7:1
  |
5 |   following the principle of least privilege for security best practices.
6 |   """
7 | / import json
8 | | from typing import Dict, Any, List, Optional
9 | | from dataclasses import dataclass
  | |_________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/iam_policies.py:17:1
   |
15 |     version: str = "2012-10-17"
16 |     statements: List[Dict[str, Any]] = None
17 |     
   | ^^^^
18 |     def __post_init__(self):
19 |         if self.statements is None:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/iam_policies.py:21:1
   |
19 |         if self.statements is None:
20 |             self.statements = []
21 |     
   | ^^^^
22 |     def to_json(self) -> str:
23 |         """Convert policy to JSON string"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/iam_policies.py:28:1
   |
26 |             "Statement": self.statements
27 |         }, indent=2)
28 |     
   | ^^^^
29 |     def to_dict(self) -> Dict[str, Any]:
30 |         """Convert policy to dictionary"""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/security/iam_policies.py:39:1
   |
37 | class IAMPolicyBuilder:
38 |     """Builder for creating IAM policies with least-privilege principles"""
39 |     
   | ^^^^
40 |     @staticmethod
41 |     def monte_carlo_worker_policy(
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/security/iam_policies.py:48:1
   |
46 |         """
47 |         Create IAM policy for Monte Carlo workers with minimal required permissions.
48 |         
   | ^^^^^^^^
49 |         Args:
50 |             sqs_queue_arn: ARN of the SQS queue for job processing
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/security/iam_policies.py:53:1
   |
51 |             s3_bucket_arn: ARN of the S3 bucket for artifact storage
52 |             cloudwatch_log_group_arn: Optional CloudWatch log group ARN
53 |             
   | ^^^^^^^^^^^^
54 |         Returns:
55 |             IAMPolicy with least-privilege permissions
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:102:1
    |
100 |             }
101 |         ]
102 |         
    | ^^^^^^^^
103 |         # Add CloudWatch logging permissions if specified
104 |         if cloudwatch_log_group_arn:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:115:1
    |
113 |                 "Resource": f"{cloudwatch_log_group_arn}:*"
114 |             })
115 |         
    | ^^^^^^^^
116 |         return IAMPolicy(statements=statements)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:117:1
    |
116 |         return IAMPolicy(statements=statements)
117 |     
    | ^^^^
118 |     @staticmethod
119 |     def api_server_policy(
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:126:1
    |
124 |         """
125 |         Create IAM policy for API servers with minimal required permissions.
126 |         
    | ^^^^^^^^
127 |         Args:
128 |             sqs_queue_arn: ARN of the SQS queue for job submission
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:131:1
    |
129 |             s3_bucket_arn: ARN of the S3 bucket for artifact access
130 |             cloudwatch_log_group_arn: Optional CloudWatch log group ARN
131 |             
    | ^^^^^^^^^^^^
132 |         Returns:
133 |             IAMPolicy with least-privilege permissions
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:167:1
    |
165 |             }
166 |         ]
167 |         
    | ^^^^^^^^
168 |         # Add CloudWatch logging permissions if specified
169 |         if cloudwatch_log_group_arn:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:180:1
    |
178 |                 "Resource": f"{cloudwatch_log_group_arn}:*"
179 |             })
180 |         
    | ^^^^^^^^
181 |         return IAMPolicy(statements=statements)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:182:1
    |
181 |         return IAMPolicy(statements=statements)
182 |     
    | ^^^^
183 |     @staticmethod
184 |     def monitoring_policy(
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:189:1
    |
187 |         """
188 |         Create IAM policy for monitoring and metrics collection.
189 |         
    | ^^^^^^^^
190 |         Args:
191 |             cloudwatch_namespace: CloudWatch metrics namespace
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:192:1
    |
190 |         Args:
191 |             cloudwatch_namespace: CloudWatch metrics namespace
192 |             
    | ^^^^^^^^^^^^
193 |         Returns:
194 |             IAMPolicy with monitoring permissions
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:224:1
    |
222 |             }
223 |         ]
224 |         
    | ^^^^^^^^
225 |         return IAMPolicy(statements=statements)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:235:1
    |
233 |     """
234 |     Generate Terraform-compatible IAM policy documents.
235 |     
    | ^^^^
236 |     Args:
237 |         sqs_queue_arn: SQS queue ARN
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:240:1
    |
238 |         s3_bucket_arn: S3 bucket ARN
239 |         cloudwatch_log_group_arn: Optional CloudWatch log group ARN
240 |         
    | ^^^^^^^^
241 |     Returns:
242 |         Dictionary of policy names to JSON policy documents
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:245:1
    |
243 |     """
244 |     builder = IAMPolicyBuilder()
245 |     
    | ^^^^
246 |     return {
247 |         "monte_carlo_worker_policy": builder.monte_carlo_worker_policy(
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:260:1
    |
258 |     """
259 |     Validate that a policy contains all required actions.
260 |     
    | ^^^^
261 |     Args:
262 |         policy: IAM policy to validate
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:264:1
    |
262 |         policy: IAM policy to validate
263 |         required_actions: List of required actions
264 |         
    | ^^^^^^^^
265 |     Returns:
266 |         True if all required actions are present
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:269:1
    |
267 |     """
268 |     policy_actions = set()
269 |     
    | ^^^^
270 |     for statement in policy.statements:
271 |         if statement.get("Effect") == "Allow":
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/security/iam_policies.py:276:1
    |
274 |                 actions = [actions]
275 |             policy_actions.update(actions)
276 |     
    | ^^^^
277 |     return all(action in policy_actions for action in required_actions)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/security/iam_policies.py:277:72
    |
275 |             policy_actions.update(actions)
276 |     
277 |     return all(action in policy_actions for action in required_actions)
    |                                                                        ^
    |
help: Add trailing newline

W292 [*] No newline at end of file
  --> src/infrastructure/storage/__init__.py:10:31
   |
 8 | from .s3_adapter import S3StorageAdapter
 9 |
10 | __all__ = ["S3StorageAdapter"]
   |                               ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/infrastructure/storage/s3_adapter.py:7:1
   |
 5 |   including result files, charts, and reports with lifecycle management.
 6 |   """
 7 | / import json
 8 | | import logging
 9 | | from datetime import datetime, UTC, timedelta
10 | | from typing import Any, Dict, Optional, List, BinaryIO, Union
11 | | import boto3
12 | | from botocore.exceptions import ClientError, BotoCoreError
13 | | import asyncio
14 | | from concurrent.futures import ThreadPoolExecutor
15 | | from pathlib import Path
16 | | import uuid
   | |___________^
17 |
18 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

F401 [*] `json` imported but unused
 --> src/infrastructure/storage/s3_adapter.py:7:8
  |
5 | including result files, charts, and reports with lifecycle management.
6 | """
7 | import json
  |        ^^^^
8 | import logging
9 | from datetime import datetime, UTC, timedelta
  |
help: Remove unused import: `json`

F401 [*] `botocore.exceptions.BotoCoreError` imported but unused
  --> src/infrastructure/storage/s3_adapter.py:12:46
   |
10 | from typing import Any, Dict, Optional, List, BinaryIO, Union
11 | import boto3
12 | from botocore.exceptions import ClientError, BotoCoreError
   |                                              ^^^^^^^^^^^^^
13 | import asyncio
14 | from concurrent.futures import ThreadPoolExecutor
   |
help: Remove unused import: `botocore.exceptions.BotoCoreError`

F401 [*] `uuid` imported but unused
  --> src/infrastructure/storage/s3_adapter.py:16:8
   |
14 | from concurrent.futures import ThreadPoolExecutor
15 | from pathlib import Path
16 | import uuid
   |        ^^^^
17 |
18 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `uuid`

W293 [*] Blank line contains whitespace
  --> src/infrastructure/storage/s3_adapter.py:23:1
   |
21 | class S3StorageAdapter:
22 |     """S3 implementation for artifact storage"""
23 |     
   | ^^^^
24 |     def __init__(
25 |         self,
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/storage/s3_adapter.py:37:1
   |
35 |         """
36 |         Initialize S3 storage adapter.
37 |         
   | ^^^^^^^^
38 |         Args:
39 |             bucket_name: S3 bucket name
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/storage/s3_adapter.py:52:1
   |
50 |         self.lifecycle_days = lifecycle_days
51 |         self.expiration_days = expiration_days
52 |         
   | ^^^^^^^^
53 |         # Initialize S3 client
54 |         session_kwargs = {"region_name": region_name}
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/storage/s3_adapter.py:60:1
   |
58 |                 "aws_secret_access_key": aws_secret_access_key
59 |             })
60 |         
   | ^^^^^^^^
61 |         self.session = boto3.Session(**session_kwargs)
62 |         client_kwargs = {}
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/storage/s3_adapter.py:65:1
   |
63 |         if endpoint_url:
64 |             client_kwargs["endpoint_url"] = endpoint_url
65 |             
   | ^^^^^^^^^^^^
66 |         self.s3_client = self.session.client("s3", **client_kwargs)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/storage/s3_adapter.py:67:1
   |
66 |         self.s3_client = self.session.client("s3", **client_kwargs)
67 |         
   | ^^^^^^^^
68 |         # Thread pool for async operations
69 |         self.executor = ThreadPoolExecutor(max_workers=5, thread_name_prefix="s3-adapter")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/infrastructure/storage/s3_adapter.py:70:1
   |
68 |         # Thread pool for async operations
69 |         self.executor = ThreadPoolExecutor(max_workers=5, thread_name_prefix="s3-adapter")
70 |         
   | ^^^^^^^^
71 |         logger.info(f"Initialized S3 adapter for bucket: {bucket_name}")
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/storage/s3_adapter.py:83:1
   |
81 |         """
82 |         Upload an artifact to S3.
83 |         
   | ^^^^^^^^
84 |         Args:
85 |             job_id: Job identifier
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/infrastructure/storage/s3_adapter.py:90:1
   |
88 |             content_type: MIME type of the content
89 |             metadata: Additional metadata to store with the object
90 |             
   | ^^^^^^^^^^^^
91 |         Returns:
92 |             S3 URL of the uploaded artifact
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:98:1
    |
 96 |             timestamp = datetime.now(UTC).strftime("%Y/%m/%d")
 97 |             key = f"{self.prefix}/{timestamp}/{job_id}/{artifact_name}"
 98 |             
    | ^^^^^^^^^^^^
 99 |             # Prepare metadata
100 |             upload_metadata = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:107:1
    |
105 |             if metadata:
106 |                 upload_metadata.update(metadata)
107 |             
    | ^^^^^^^^^^^^
108 |             # Convert content to bytes if needed
109 |             if isinstance(content, str):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:115:1
    |
113 |             else:
114 |                 content_bytes = content
115 |             
    | ^^^^^^^^^^^^
116 |             # Upload to S3
117 |             await asyncio.get_event_loop().run_in_executor(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:125:1
    |
123 |                 upload_metadata
124 |             )
125 |             
    | ^^^^^^^^^^^^
126 |             # Generate URL
127 |             url = f"https://{self.bucket_name}.s3.amazonaws.com/{key}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:128:1
    |
126 |             # Generate URL
127 |             url = f"https://{self.bucket_name}.s3.amazonaws.com/{key}"
128 |             
    | ^^^^^^^^^^^^
129 |             logger.info(f"Uploaded artifact {artifact_name} for job {job_id} to {url}")
130 |             return url
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:131:1
    |
129 |             logger.info(f"Uploaded artifact {artifact_name} for job {job_id} to {url}")
130 |             return url
131 |             
    | ^^^^^^^^^^^^
132 |         except Exception as e:
133 |             logger.error(f"Failed to upload artifact {artifact_name} for job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:143:1
    |
141 |         """
142 |         Download an artifact from S3.
143 |         
    | ^^^^^^^^
144 |         Args:
145 |             job_id: Job identifier
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:147:1
    |
145 |             job_id: Job identifier
146 |             artifact_name: Name of the artifact file
147 |             
    | ^^^^^^^^^^^^
148 |         Returns:
149 |             Artifact content as bytes, or None if not found
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:157:1
    |
155 |                 logger.warning(f"Artifact {artifact_name} not found for job {job_id}")
156 |                 return None
157 |             
    | ^^^^^^^^^^^^
158 |             # Download from S3
159 |             content = await asyncio.get_event_loop().run_in_executor(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:164:1
    |
162 |                 key
163 |             )
164 |             
    | ^^^^^^^^^^^^
165 |             logger.info(f"Downloaded artifact {artifact_name} for job {job_id}")
166 |             return content
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:167:1
    |
165 |             logger.info(f"Downloaded artifact {artifact_name} for job {job_id}")
166 |             return content
167 |             
    | ^^^^^^^^^^^^
168 |         except Exception as e:
169 |             logger.error(f"Failed to download artifact {artifact_name} for job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:179:1
    |
177 |         """
178 |         Delete an artifact from S3.
179 |         
    | ^^^^^^^^
180 |         Args:
181 |             job_id: Job identifier
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:183:1
    |
181 |             job_id: Job identifier
182 |             artifact_name: Name of the artifact file
183 |             
    | ^^^^^^^^^^^^
184 |         Returns:
185 |             True if deleted successfully, False if not found
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:193:1
    |
191 |                 logger.warning(f"Artifact {artifact_name} not found for job {job_id}")
192 |                 return False
193 |             
    | ^^^^^^^^^^^^
194 |             # Delete from S3
195 |             await asyncio.get_event_loop().run_in_executor(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:200:1
    |
198 |                 key
199 |             )
200 |             
    | ^^^^^^^^^^^^
201 |             logger.info(f"Deleted artifact {artifact_name} for job {job_id}")
202 |             return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:203:1
    |
201 |             logger.info(f"Deleted artifact {artifact_name} for job {job_id}")
202 |             return True
203 |             
    | ^^^^^^^^^^^^
204 |         except Exception as e:
205 |             logger.error(f"Failed to delete artifact {artifact_name} for job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:214:1
    |
212 |         """
213 |         List all artifacts for a job.
214 |         
    | ^^^^^^^^
215 |         Args:
216 |             job_id: Job identifier
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:217:1
    |
215 |         Args:
216 |             job_id: Job identifier
217 |             
    | ^^^^^^^^^^^^
218 |         Returns:
219 |             List of artifact information dictionaries
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:224:1
    |
222 |             # List objects with job prefix
223 |             prefix = f"{self.prefix}/"
224 |             
    | ^^^^^^^^^^^^
225 |             artifacts = await asyncio.get_event_loop().run_in_executor(
226 |                 self.executor,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:231:1
    |
229 |                 job_id
230 |             )
231 |             
    | ^^^^^^^^^^^^
232 |             logger.info(f"Found {len(artifacts)} artifacts for job {job_id}")
233 |             return artifacts
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:234:1
    |
232 |             logger.info(f"Found {len(artifacts)} artifacts for job {job_id}")
233 |             return artifacts
234 |             
    | ^^^^^^^^^^^^
235 |         except Exception as e:
236 |             logger.error(f"Failed to list artifacts for job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:242:1
    |
240 |         """
241 |         Set up S3 lifecycle policy for automatic artifact management.
242 |         
    | ^^^^^^^^
243 |         Returns:
244 |             True if policy was set successfully
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:271:1
    |
269 |                 ]
270 |             }
271 |             
    | ^^^^^^^^^^^^
272 |             await asyncio.get_event_loop().run_in_executor(
273 |                 self.executor,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:277:1
    |
275 |                 lifecycle_config
276 |             )
277 |             
    | ^^^^^^^^^^^^
278 |             logger.info(f"Set up lifecycle policy for bucket {self.bucket_name}")
279 |             return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:280:1
    |
278 |             logger.info(f"Set up lifecycle policy for bucket {self.bucket_name}")
279 |             return True
280 |             
    | ^^^^^^^^^^^^
281 |         except Exception as e:
282 |             logger.error(f"Failed to set up lifecycle policy: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:320:1
    |
318 |         artifacts = []
319 |         paginator = self.s3_client.get_paginator('list_objects_v2')
320 |         
    | ^^^^^^^^
321 |         for page in paginator.paginate(Bucket=self.bucket_name, Prefix=prefix):
322 |             if 'Contents' not in page:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:324:1
    |
322 |             if 'Contents' not in page:
323 |                 continue
324 |                 
    | ^^^^^^^^^^^^^^^^
325 |             for obj in page['Contents']:
326 |                 key = obj['Key']
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:337:1
    |
335 |                         'url': f"https://{self.bucket_name}.s3.amazonaws.com/{key}"
336 |                     })
337 |         
    | ^^^^^^^^
338 |         return artifacts
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:354:1
    |
352 |                 date = (datetime.now(UTC) - timedelta(days=days_back)).strftime("%Y/%m/%d")
353 |                 key = f"{self.prefix}/{date}/{job_id}/{artifact_name}"
354 |                 
    | ^^^^^^^^^^^^^^^^
355 |                 # Check if object exists
356 |                 exists = await asyncio.get_event_loop().run_in_executor(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:361:1
    |
359 |                     key
360 |                 )
361 |                 
    | ^^^^^^^^^^^^^^^^
362 |                 if exists:
363 |                     return key
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:364:1
    |
362 |                 if exists:
363 |                     return key
364 |             
    | ^^^^^^^^^^^^
365 |             return None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/infrastructure/storage/s3_adapter.py:366:1
    |
365 |             return None
366 |             
    | ^^^^^^^^^^^^
367 |         except Exception as e:
368 |             logger.error(f"Error finding artifact key: {str(e)}")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/infrastructure/storage/s3_adapter.py:385:52
    |
383 |         if hasattr(self, 'executor'):
384 |             self.executor.shutdown(wait=True)
385 |         logger.info("S3 adapter cleanup completed")
    |                                                    ^
    |
help: Add trailing newline

W292 [*] No newline at end of file
 --> src/services/__init__.py:1:19
  |
1 | # services package
  |                   ^
  |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/services/backtest_service.py:1:1
   |
 1 | / from __future__ import annotations
 2 | | import io
 3 | | import logging
 4 | | from typing import Union
 5 | |
 6 | | import numpy as np
 7 | | import pandas as pd
 8 | |
 9 | | from dataclasses import dataclass
10 | | from domain.backtest import BacktestResult, BacktestParams
11 | | from domain.interfaces import PriceSeriesSource, StrategyInterface
12 | |
13 | | # Import des stratégies modernes
14 | | from strategies.moving_average import MovingAverageStrategy, MovingAverageParams
15 | | from strategies.rsi_reversion import RSIReversionStrategy, RSIParams
   | |____________________________________________________________________^
16 |
17 |   logger = logging.getLogger("services.backtest")
   |
help: Organize imports

F401 [*] `numpy` imported but unused
 --> src/services/backtest_service.py:6:17
  |
4 | from typing import Union
5 |
6 | import numpy as np
  |                 ^^
7 | import pandas as pd
  |
help: Remove unused import: `numpy`

F401 [*] `domain.backtest.BacktestResult` imported but unused
  --> src/services/backtest_service.py:10:29
   |
 9 | from dataclasses import dataclass
10 | from domain.backtest import BacktestResult, BacktestParams
   |                             ^^^^^^^^^^^^^^
11 | from domain.interfaces import PriceSeriesSource, StrategyInterface
   |
help: Remove unused import

F401 [*] `domain.backtest.BacktestParams` imported but unused
  --> src/services/backtest_service.py:10:45
   |
 9 | from dataclasses import dataclass
10 | from domain.backtest import BacktestResult, BacktestParams
   |                                             ^^^^^^^^^^^^^^
11 | from domain.interfaces import PriceSeriesSource, StrategyInterface
   |
help: Remove unused import

F401 [*] `domain.interfaces.StrategyInterface` imported but unused
  --> src/services/backtest_service.py:11:50
   |
 9 | from dataclasses import dataclass
10 | from domain.backtest import BacktestResult, BacktestParams
11 | from domain.interfaces import PriceSeriesSource, StrategyInterface
   |                                                  ^^^^^^^^^^^^^^^^^
12 |
13 | # Import des stratégies modernes
   |
help: Remove unused import: `domain.interfaces.StrategyInterface`

W293 [*] Blank line contains whitespace
  --> src/services/backtest_service.py:51:1
   |
49 |     def get_prices(self) -> pd.Series:
50 |         return _read_csv_to_series(self._data)
51 |     
   | ^^^^
52 |     def to_dataframe(self) -> pd.DataFrame:
53 |         """Convert CSV data to DataFrame for Monte Carlo processing."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/backtest_service.py:74:1
   |
72 |             df = df.sort_values("date")
73 |             df = df.set_index("date")
74 |         
   | ^^^^^^^^
75 |         # Rename price column to 'close' for consistency
76 |         if price_col != "close":
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/backtest_service.py:78:1
   |
76 |         if price_col != "close":
77 |             df = df.rename(columns={price_col: "close"})
78 |         
   | ^^^^^^^^
79 |         # Ensure close column is float
80 |         df["close"] = df["close"].astype(float)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/backtest_service.py:81:1
   |
79 |         # Ensure close column is float
80 |         df["close"] = df["close"].astype(float)
81 |         
   | ^^^^^^^^
82 |         return df
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/backtest_service.py:112:1
    |
110 |     # Convertir les données en DataFrame
111 |     df = source.to_dataframe()
112 |     
    | ^^^^
113 |     # Créer les paramètres pour la stratégie moderne
114 |     params = MovingAverageParams(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/backtest_service.py:121:1
    |
119 |         commission=0.0
120 |     )
121 |     
    | ^^^^
122 |     # Exécuter la stratégie moderne
123 |     strategy = MovingAverageStrategy()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/backtest_service.py:125:1
    |
123 |     strategy = MovingAverageStrategy()
124 |     result = strategy.run(df, params)
125 |     
    | ^^^^
126 |     # Convertir vers le format legacy
127 |     return ServiceBacktestResult(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/backtest_service.py:157:1
    |
155 |     # Convertir les données en DataFrame
156 |     df = source.to_dataframe()
157 |     
    | ^^^^
158 |     # Créer les paramètres pour la stratégie moderne
159 |     params = RSIParams(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/backtest_service.py:167:1
    |
165 |         commission=0.0
166 |     )
167 |     
    | ^^^^
168 |     # Exécuter la stratégie moderne
169 |     strategy = RSIReversionStrategy()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/backtest_service.py:171:1
    |
169 |     strategy = RSIReversionStrategy()
170 |     result = strategy.run(df, params)
171 |     
    | ^^^^
172 |     # Convertir vers le format legacy
173 |     return ServiceBacktestResult(
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> src/services/job_manager.py:7:1
   |
 5 |   Monte Carlo simulation jobs through the queue system with database persistence.
 6 |   """
 7 | / import logging
 8 | | import os
 9 | | import json
10 | | import hashlib
11 | | import base64
12 | | from datetime import datetime, UTC, timedelta
13 | | from typing import Any, Dict, List, Optional, BinaryIO
14 | | import uuid
15 | | import asyncio
16 | |
17 | | from sqlalchemy.exc import IntegrityError
18 | |
19 | | from domain.queue import (
20 | |     JobManagerInterface, Job, JobStatus, JobMetadata, JobPriority,
21 | |     MonteCarloJobPayload, QueueInterface
22 | | )
23 | | from infrastructure.db import SessionLocal
24 | | from infrastructure.repositories.jobs import JobRepository
25 | | from infrastructure.cache import cache_manager, cached_result
   | |_____________________________________________________________^
26 |
27 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

F401 [*] `datetime.timedelta` imported but unused
  --> src/services/job_manager.py:12:37
   |
10 | import hashlib
11 | import base64
12 | from datetime import datetime, UTC, timedelta
   |                                     ^^^^^^^^^
13 | from typing import Any, Dict, List, Optional, BinaryIO
14 | import uuid
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `infrastructure.cache.cache_manager` imported but unused
  --> src/services/job_manager.py:25:34
   |
23 | from infrastructure.db import SessionLocal
24 | from infrastructure.repositories.jobs import JobRepository
25 | from infrastructure.cache import cache_manager, cached_result
   |                                  ^^^^^^^^^^^^^
26 |
27 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `infrastructure.cache.cached_result` imported but unused
  --> src/services/job_manager.py:25:49
   |
23 | from infrastructure.db import SessionLocal
24 | from infrastructure.repositories.jobs import JobRepository
25 | from infrastructure.cache import cache_manager, cached_result
   |                                                 ^^^^^^^^^^^^^
26 |
27 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

W293 [*] Blank line contains whitespace
  --> src/services/job_manager.py:32:1
   |
30 | class MonteCarloJobManager(JobManagerInterface):
31 |     """Job manager for Monte Carlo simulation jobs with database persistence"""
32 |     
   | ^^^^
33 |     def __init__(
34 |         self,
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/services/job_manager.py:43:1
   |
41 |         """
42 |         Initialize Monte Carlo job manager.
43 |         
   | ^^^^^^^^
44 |         Args:
45 |             queue: Queue interface for job management
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/job_manager.py:54:1
   |
52 |         self.default_timeout_seconds = default_timeout_seconds
53 |         self.default_max_retries = default_max_retries
54 |         
   | ^^^^^^^^
55 |         # Configurable hard limits with environment variable fallbacks
56 |         self.max_runs = max_runs or int(os.getenv("MC_HARD_CAP_RUNS", "20000"))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/job_manager.py:58:1
   |
56 | …     self.max_runs = max_runs or int(os.getenv("MC_HARD_CAP_RUNS", "20000"))
57 | …     self.max_payload_size = max_payload_size or int(os.getenv("MC_HARD_CAP_PAYLOAD_SIZE", str(1024 * 1024)))  # 1MB default
58 | …     
   ^^^^^^^^
59 | …     logger.info(f"Initialized Monte Carlo job manager with hard limits: max_runs={self.max_runs}, max_payload_size={self.max_payload…
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/job_manager.py:60:1
   |
59 |         logger.info(f"Initialized Monte Carlo job manager with hard limits: max_runs={self.max_runs}, max_payload_size={self.max_paylo…
60 |     
   | ^^^^
61 |     def _generate_dedup_key(self, payload: Dict[str, Any]) -> str:
62 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/services/job_manager.py:64:1
   |
62 |         """
63 |         Generate deduplication key from payload.
64 |         
   | ^^^^^^^^
65 |         Args:
66 |             payload: Job payload
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/services/job_manager.py:67:1
   |
65 |         Args:
66 |             payload: Job payload
67 |             
   | ^^^^^^^^^^^^
68 |         Returns:
69 |             SHA256 hash of normalized payload
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/job_manager.py:79:1
   |
77 |             # If bytes, hash directly
78 |             csv_hash = hashlib.sha256(csv_data).hexdigest()
79 |             
   | ^^^^^^^^^^^^
80 |         normalized = {
81 |             "strategy_name": payload.get("strategy_name"),
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/job_manager.py:90:1
   |
88 |             "csv_hash": csv_hash
89 |         }
90 |         
   | ^^^^^^^^
91 |         # Sort keys for consistent hashing
92 |         normalized_str = json.dumps(normalized, sort_keys=True)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/job_manager.py:94:1
   |
92 |         normalized_str = json.dumps(normalized, sort_keys=True)
93 |         return hashlib.sha256(normalized_str.encode()).hexdigest()
94 |     
   | ^^^^
95 |     def _validate_payload(self, payload: Dict[str, Any]) -> None:
96 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:98:1
    |
 96 |         """
 97 |         Validate job payload against hard limits.
 98 |         
    | ^^^^^^^^
 99 |         Args:
100 |             payload: Job payload to validate
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:101:1
    |
 99 |         Args:
100 |             payload: Job payload to validate
101 |             
    | ^^^^^^^^^^^^
102 |         Raises:
103 |             ValueError: If payload exceeds limits
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:111:1
    |
109 |         if runs > self.max_runs:
110 |             raise ValueError(f"Number of runs ({runs}) exceeds maximum allowed ({self.max_runs})")
111 |         
    | ^^^^^^^^
112 |         # Handle CSV data for size validation
113 |         csv_data = payload.get("csv_data", b"")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:122:1
    |
120 |         else:
121 |             csv_bytes = csv_data
122 |         
    | ^^^^^^^^
123 |         csv_size = len(csv_bytes)
124 |         max_csv_size = self.max_payload_size // 2  # Reserve half payload size for CSV data
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:127:1
    |
125 |         if csv_size > max_csv_size:
126 |             raise ValueError(f"CSV data size ({csv_size} bytes) exceeds maximum allowed ({max_csv_size} bytes)")
127 |         
    | ^^^^^^^^
128 |         # Create a test payload for size validation (with base64 encoded CSV)
129 |         test_payload = payload.copy()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:132:1
    |
130 |         if isinstance(csv_data, bytes):
131 |             test_payload["csv_data"] = base64.b64encode(csv_data).decode('utf-8')
132 |         
    | ^^^^^^^^
133 |         # Validate total payload size
134 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:138:1
    |
136 |         except TypeError as e:
137 |             raise ValueError(f"Payload contains non-serializable data: {e}")
138 |             
    | ^^^^^^^^^^^^
139 |         if payload_size > self.max_payload_size:
140 |             raise ValueError(f"Payload size ({payload_size} bytes) exceeds maximum allowed ({self.max_payload_size} bytes)")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:141:1
    |
139 |         if payload_size > self.max_payload_size:
140 |             raise ValueError(f"Payload size ({payload_size} bytes) exceeds maximum allowed ({self.max_payload_size} bytes)")
141 |         
    | ^^^^^^^^
142 |         # Validate required fields
143 |         required_fields = ["strategy_name", "strategy_params", "runs", "csv_data"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:147:1
    |
145 |             if field not in payload:
146 |                 raise ValueError(f"Missing required field: {field}")
147 |         
    | ^^^^^^^^
148 |         # Validate strategy parameters
149 |         strategy_params = payload.get("strategy_params", {})
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:152:1
    |
150 |         if not isinstance(strategy_params, dict):
151 |             raise ValueError("Strategy parameters must be a dictionary")
152 |         
    | ^^^^^^^^
153 |         logger.debug(f"Payload validation passed: runs={runs}, size={payload_size} bytes, csv_size={csv_size} bytes")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:154:1
    |
153 |         logger.debug(f"Payload validation passed: runs={runs}, size={payload_size} bytes, csv_size={csv_size} bytes")
154 |     
    | ^^^^
155 |     async def _get_job_repository(self) -> JobRepository:
156 |         """Get job repository with async database session"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:160:1
    |
158 |         session = SessionLocal()
159 |         return JobRepository(session)
160 |     
    | ^^^^
161 |     async def submit_monte_carlo_job(
162 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:183:1
    |
181 |         """
182 |         Submit a Monte Carlo simulation job with database persistence and deduplication.
183 |         
    | ^^^^^^^^
184 |         Args:
185 |             csv_file: CSV file containing price data
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:201:1
    |
199 |             tags: Additional tags for job metadata
200 |             dedup_key: Optional deduplication key for idempotence
201 |             
    | ^^^^^^^^^^^^
202 |         Returns:
203 |             Job ID for tracking
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:204:1
    |
202 |         Returns:
203 |             Job ID for tracking
204 |             
    | ^^^^^^^^^^^^
205 |         Raises:
206 |             ValueError: If payload validation fails
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:212:1
    |
210 |             csv_file.seek(0)
211 |             csv_data = csv_file.read()
212 |             
    | ^^^^^^^^^^^^
213 |             # Create job payload for validation and deduplication
214 |             payload_dict = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:226:1
    |
224 |                 "parallel_workers": 1,
225 |             }
226 |             
    | ^^^^^^^^^^^^
227 |             # Validate payload
228 |             self._validate_payload(payload_dict)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:229:1
    |
227 |             # Validate payload
228 |             self._validate_payload(payload_dict)
229 |             
    | ^^^^^^^^^^^^
230 |             # Generate deduplication key if not provided
231 |             if dedup_key is None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:233:1
    |
231 |             if dedup_key is None:
232 |                 dedup_key = self._generate_dedup_key(payload_dict)
233 |             
    | ^^^^^^^^^^^^
234 |             # Encode CSV data as base64 for database storage
235 |             payload_for_db = payload_dict.copy()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:237:1
    |
235 |             payload_for_db = payload_dict.copy()
236 |             payload_for_db["csv_data"] = base64.b64encode(csv_data).decode('utf-8')
237 |             
    | ^^^^^^^^^^^^
238 |             # Use session context manager for database operations
239 |             from infrastructure.db import SessionLocal
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:242:1
    |
240 |             async with SessionLocal() as session:
241 |                 job_repo = JobRepository(session)
242 |                 
    | ^^^^^^^^^^^^^^^^
243 |                 # Check for existing job with the same dedup_key
244 |                 if dedup_key:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:249:1
    |
247 |                         logger.info(f"Found existing job {existing_job.id} for dedup_key {dedup_key}")
248 |                         return existing_job.id
249 |                 
    | ^^^^^^^^^^^^^^^^
250 |                 # Create new job in database
251 |                 job_id = str(uuid.uuid4())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:252:1
    |
250 |                 # Create new job in database
251 |                 job_id = str(uuid.uuid4())
252 |                 
    | ^^^^^^^^^^^^^^^^
253 |                 try:
254 |                     db_job = await job_repo.create_job(
    |
help: Remove whitespace from blank line

F841 Local variable `db_job` is assigned to but never used
   --> src/services/job_manager.py:254:21
    |
253 |                 try:
254 |                     db_job = await job_repo.create_job(
    |                     ^^^^^^
255 |                         job_id=job_id,
256 |                         payload=payload_for_db,
    |
help: Remove assignment to unused variable `db_job`

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:286:1
    |
284 |                     parallel_workers=1
285 |                 )
286 |                 
    | ^^^^^^^^^^^^^^^^
287 |                 # Create job metadata
288 |                 metadata = JobMetadata(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:297:1
    |
295 |                     correlation_id=correlation_id
296 |                 )
297 |                 
    | ^^^^^^^^^^^^^^^^
298 |                 # Create job for queue
299 |                 job = Job(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:303:1
    |
301 |                     metadata=metadata
302 |                 )
303 |                 
    | ^^^^^^^^^^^^^^^^
304 |                 # Enqueue job
305 |                 await self.queue.enqueue(job)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:306:1
    |
304 |                 # Enqueue job
305 |                 await self.queue.enqueue(job)
306 |                 
    | ^^^^^^^^^^^^^^^^
307 |                 logger.info(f"Submitted Monte Carlo job {job_id} with {runs} runs")
308 |                 return job_id
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:309:1
    |
307 |                 logger.info(f"Submitted Monte Carlo job {job_id} with {runs} runs")
308 |                 return job_id
309 |                 
    | ^^^^^^^^^^^^^^^^
310 |         except Exception as e:
311 |             logger.error(f"Failed to submit Monte Carlo job: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:313:1
    |
311 |             logger.error(f"Failed to submit Monte Carlo job: {e}")
312 |             raise
313 |     
    | ^^^^
314 |     async def submit_job(self, payload: Any, metadata: Optional[JobMetadata] = None) -> str:
315 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:317:1
    |
315 |         """
316 |         Submit a generic job (implements JobManagerInterface).
317 |         
    | ^^^^^^^^
318 |         Args:
319 |             payload: Job payload (should be MonteCarloJobPayload)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:321:1
    |
319 |             payload: Job payload (should be MonteCarloJobPayload)
320 |             metadata: Optional job metadata
321 |             
    | ^^^^^^^^^^^^
322 |         Returns:
323 |             Job ID
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:327:1
    |
325 |         if not isinstance(payload, MonteCarloJobPayload):
326 |             raise ValueError("Payload must be MonteCarloJobPayload")
327 |         
    | ^^^^^^^^
328 |         # Use default metadata if not provided
329 |         if metadata is None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:334:1
    |
332 |                 timeout_seconds=self.default_timeout_seconds
333 |             )
334 |         
    | ^^^^^^^^
335 |         # Create and submit job
336 |         job = Job(payload=payload, metadata=metadata)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:338:1
    |
336 |         job = Job(payload=payload, metadata=metadata)
337 |         return await self.queue.enqueue(job)
338 |     
    | ^^^^
339 |     def _map_priority_to_enum(self, priority_str: str) -> JobPriority:
340 |         """Map database priority string to JobPriority enum"""
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:352:1
    |
350 |         """
351 |         Get job by ID.
352 |         
    | ^^^^^^^^
353 |         Args:
354 |             job_id: Job ID
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:355:1
    |
353 |         Args:
354 |             job_id: Job ID
355 |             
    | ^^^^^^^^^^^^
356 |         Returns:
357 |             Job or None if not found
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:363:1
    |
361 |             job_repo = JobRepository(session)
362 |             db_job = await job_repo.get_job_by_id(job_id)
363 |             
    | ^^^^^^^^^^^^
364 |             if db_job:
365 |                 # Convert database job to domain Job object
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:378:1
    |
376 |                     tags={}  # Not stored in database model
377 |                 )
378 |                 
    | ^^^^^^^^^^^^^^^^
379 |                 # Parse payload from JSON, filtering out non-MonteCarloJobPayload fields
380 |                 payload_data = db_job.payload.copy()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:385:1
    |
383 |                 payload_data.pop('current_run', None)
384 |                 payload_data.pop('total_runs', None)
385 |                 
    | ^^^^^^^^^^^^^^^^
386 |                 # Decode base64 CSV data if present
387 |                 if 'csv_data' in payload_data and isinstance(payload_data['csv_data'], str):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:390:1
    |
388 |                     import base64
389 |                     payload_data['csv_data'] = base64.b64decode(payload_data['csv_data'])
390 |                 
    | ^^^^^^^^^^^^^^^^
391 |                 payload = MonteCarloJobPayload(**payload_data)
    |
help: Remove whitespace from blank line

F841 Local variable `payload` is assigned to but never used
   --> src/services/job_manager.py:391:17
    |
389 |                     payload_data['csv_data'] = base64.b64decode(payload_data['csv_data'])
390 |                 
391 |                 payload = MonteCarloJobPayload(**payload_data)
    |                 ^^^^^^^
392 |                 
393 |                 # Create Job object with generic payload (not MonteCarloJobPayload)
    |
help: Remove assignment to unused variable `payload`

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:392:1
    |
391 |                 payload = MonteCarloJobPayload(**payload_data)
392 |                 
    | ^^^^^^^^^^^^^^^^
393 |                 # Create Job object with generic payload (not MonteCarloJobPayload)
394 |                 job = Job[Any](
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:402:1
    |
400 |                     progress=db_job.progress or 0.0
401 |                 )
402 |                 
    | ^^^^^^^^^^^^^^^^
403 |                 return job
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:404:1
    |
403 |                 return job
404 |         
    | ^^^^^^^^
405 |         # Fallback to queue cache if not found in database
406 |         return await self.queue.get_job_status(job_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:407:1
    |
405 |         # Fallback to queue cache if not found in database
406 |         return await self.queue.get_job_status(job_id)
407 |     
    | ^^^^
408 |     async def list_jobs(
409 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:416:1
    |
414 |         """
415 |         List jobs with optional filtering.
416 |         
    | ^^^^^^^^
417 |         Args:
418 |             status: Filter by status
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:421:1
    |
419 |             limit: Maximum number of jobs
420 |             offset: Pagination offset
421 |             
    | ^^^^^^^^^^^^
422 |         Returns:
423 |             List of jobs
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:427:1
    |
425 |         async with SessionLocal() as session:
426 |             job_repo = JobRepository(session)
427 |             
    | ^^^^^^^^^^^^
428 |             # Get jobs from database
429 |             db_jobs = await job_repo.list_jobs(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:434:1
    |
432 |                 offset=offset
433 |             )
434 |             
    | ^^^^^^^^^^^^
435 |             jobs = []
436 |             for db_job in db_jobs:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:448:1
    |
446 |                     tags={}  # Default empty dict
447 |                 )
448 |                 
    | ^^^^^^^^^^^^^^^^
449 |                 # Create Job object with generic payload (not MonteCarloJobPayload)
450 |                 job = Job[Any](
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:458:1
    |
456 |                     progress=db_job.progress or 0.0
457 |                 )
458 |                 
    | ^^^^^^^^^^^^^^^^
459 |                 jobs.append(job)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:460:1
    |
459 |                 jobs.append(job)
460 |             
    | ^^^^^^^^^^^^
461 |             return jobs
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:462:1
    |
461 |             return jobs
462 |     
    | ^^^^
463 |     async def cancel_job(self, job_id: str) -> bool:
464 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:466:1
    |
464 |         """
465 |         Cancel a job.
466 |         
    | ^^^^^^^^
467 |         Args:
468 |             job_id: Job ID to cancel
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:469:1
    |
467 |         Args:
468 |             job_id: Job ID to cancel
469 |             
    | ^^^^^^^^^^^^
470 |         Returns:
471 |             True if cancelled successfully
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:474:1
    |
472 |         """
473 |         return await self.queue.cancel_job(job_id)
474 |     
    | ^^^^
475 |     async def get_job_result(self, job_id: str) -> Optional[Dict[str, Any]]:
476 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:478:1
    |
476 |         """
477 |         Get job result if completed.
478 |         
    | ^^^^^^^^
479 |         Args:
480 |             job_id: Job ID
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:481:1
    |
479 |         Args:
480 |             job_id: Job ID
481 |             
    | ^^^^^^^^^^^^
482 |         Returns:
483 |             Job result or None if not completed
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:489:1
    |
487 |             return job.result
488 |         return None
489 |     
    | ^^^^
490 |     async def wait_for_job_completion(
491 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:498:1
    |
496 |         """
497 |         Wait for job completion and return result.
498 |         
    | ^^^^^^^^
499 |         Args:
500 |             job_id: Job ID to wait for
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:503:1
    |
501 |             timeout_seconds: Maximum time to wait
502 |             poll_interval: Polling interval in seconds
503 |             
    | ^^^^^^^^^^^^
504 |         Returns:
505 |             Job result or None if timeout/failed
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:508:1
    |
506 |         """
507 |         start_time = datetime.now(UTC)
508 |         
    | ^^^^^^^^
509 |         while True:
510 |             job = await self.get_job(job_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:511:1
    |
509 |         while True:
510 |             job = await self.get_job(job_id)
511 |             
    | ^^^^^^^^^^^^
512 |             if not job:
513 |                 logger.warning(f"Job {job_id} not found")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:515:1
    |
513 |                 logger.warning(f"Job {job_id} not found")
514 |                 return None
515 |             
    | ^^^^^^^^^^^^
516 |             if job.status == JobStatus.COMPLETED:
517 |                 return job.result
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:524:1
    |
522 |                 logger.info(f"Job {job_id} was cancelled")
523 |                 return None
524 |             
    | ^^^^^^^^^^^^
525 |             # Check timeout
526 |             if timeout_seconds:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:531:1
    |
529 |                     logger.warning(f"Timeout waiting for job {job_id}")
530 |                     return None
531 |             
    | ^^^^^^^^^^^^
532 |             # Wait before next poll
533 |             await asyncio.sleep(poll_interval)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:534:1
    |
532 |             # Wait before next poll
533 |             await asyncio.sleep(poll_interval)
534 |     
    | ^^^^
535 |     async def get_job_progress(self, job_id: str) -> Dict[str, Any]:
536 |         """
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:549:1
    |
547 |             session = SessionLocal()
548 |             job_repo = JobRepository(session)
549 |             
    | ^^^^^^^^^^^^
550 |             db_job = await job_repo.get_job_by_id(job_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:602:1
    |
600 |             if session:
601 |                 await session.close()
602 |     
    | ^^^^
603 |     async def get_queue_metrics(self) -> Dict[str, Any]:
604 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:606:1
    |
604 |         """
605 |         Get comprehensive queue metrics including database statistics.
606 |         
    | ^^^^^^^^
607 |         Returns:
608 |             Dictionary containing queue and database metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:613:1
    |
611 |             # Get queue metrics
612 |             queue_metrics = await self.queue.get_metrics()
613 |             
    | ^^^^^^^^^^^^
614 |             # Get database statistics
615 |             job_repo = await self._get_job_repository()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:617:1
    |
615 |             job_repo = await self._get_job_repository()
616 |             db_stats = await job_repo.get_job_counts_by_status()
617 |             
    | ^^^^^^^^^^^^
618 |             # Calculate additional metrics
619 |             total_jobs = sum(db_stats.values())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:621:1
    |
619 |             total_jobs = sum(db_stats.values())
620 |             retry_jobs = db_stats.get("retry", 0)
621 |             
    | ^^^^^^^^^^^^
622 |             # Enhanced metrics combining queue and database data
623 |             enhanced_metrics = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:633:1
    |
631 |                 "throughput_per_minute": queue_metrics.throughput_per_minute,
632 |                 "last_updated": queue_metrics.last_updated.isoformat(),
633 |                 
    | ^^^^^^^^^^^^^^^^
634 |                 # Enhanced database statistics
635 |                 "database_stats": {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:642:1
    |
640 |                     "failure_rate": (db_stats.get("failed", 0) / total_jobs * 100) if total_jobs > 0 else 0.0
641 |                 },
642 |                 
    | ^^^^^^^^^^^^^^^^
643 |                 # System health indicators
644 |                 "health_indicators": {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:651:1
    |
649 |                 }
650 |             }
651 |             
    | ^^^^^^^^^^^^
652 |             return enhanced_metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:653:1
    |
652 |             return enhanced_metrics
653 |             
    | ^^^^^^^^^^^^
654 |         except Exception as e:
655 |             logger.error(f"Failed to get enhanced queue metrics: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:673:1
    |
671 |                 logger.error(f"Failed to get basic queue metrics: {str(fallback_error)}")
672 |                 raise
673 |     
    | ^^^^
674 |     async def bulk_submit_jobs(
675 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:681:1
    |
679 |         """
680 |         Submit multiple jobs in batches.
681 |         
    | ^^^^^^^^
682 |         Args:
683 |             job_requests: List of job request dictionaries
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:685:1
    |
683 |             job_requests: List of job request dictionaries
684 |             batch_size: Number of jobs to submit per batch
685 |             
    | ^^^^^^^^^^^^
686 |         Returns:
687 |             List of job IDs
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:697:1
    |
695 |                 task = self.submit_monte_carlo_job(**job_request)
696 |                 batch_tasks.append(task)
697 |             
    | ^^^^^^^^^^^^
698 |             # Submit batch concurrently
699 |             batch_job_ids = await asyncio.gather(*batch_tasks, return_exceptions=True)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:700:1
    |
698 |             # Submit batch concurrently
699 |             batch_job_ids = await asyncio.gather(*batch_tasks, return_exceptions=True)
700 |             
    | ^^^^^^^^^^^^
701 |             for job_id in batch_job_ids:
702 |                 if isinstance(job_id, Exception):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:706:1
    |
704 |                 else:
705 |                     job_ids.append(job_id)
706 |             
    | ^^^^^^^^^^^^
707 |             # Small delay between batches to avoid overwhelming the queue
708 |             if i + batch_size < len(job_requests):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:710:1
    |
708 |             if i + batch_size < len(job_requests):
709 |                 await asyncio.sleep(0.1)
710 |         
    | ^^^^^^^^
711 |         logger.info(f"Bulk submitted {len(job_ids)} jobs successfully")
712 |         return job_ids
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/job_manager.py:713:1
    |
711 |         logger.info(f"Bulk submitted {len(job_ids)} jobs successfully")
712 |         return job_ids
713 |     
    | ^^^^
714 |     async def cleanup_completed_jobs(self, older_than_hours: int = 24) -> int:
715 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:717:1
    |
715 |         """
716 |         Cleanup completed jobs older than specified hours.
717 |         
    | ^^^^^^^^
718 |         Args:
719 |             older_than_hours: Remove jobs completed more than this many hours ago
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/job_manager.py:720:1
    |
718 |         Args:
719 |             older_than_hours: Remove jobs completed more than this many hours ago
720 |             
    | ^^^^^^^^^^^^
721 |         Returns:
722 |             Number of jobs cleaned up
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/services/job_manager.py:727:17
    |
725 |         # For now, this is a placeholder
726 |         logger.info(f"Cleanup completed jobs older than {older_than_hours} hours")
727 |         return 0
    |                 ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/services/mc_backtest_service.py:7:1
   |
 5 |   backtest simulations with statistical analysis.
 6 |   """
 7 | / from __future__ import annotations
 8 | | import os
 9 | | import logging
10 | | from concurrent.futures import ProcessPoolExecutor, as_completed
11 | | from dataclasses import dataclass
12 | | from typing import Dict, List, Optional, Callable, Any, Tuple
13 | | import numpy as np
14 | | import pandas as pd
15 | | from numpy.random import Generator, default_rng
16 | |
17 | | from domain.schemas.backtest import MetricsDistribution, EquityEnvelope
18 | | from services.backtest_service import (
19 | |     run_sma_crossover, 
20 | |     run_rsi, 
21 | |     CsvBytesPriceSeriesSource,
22 | |     ServiceBacktestResult
23 | | )
   | |_^
24 |
25 |   logger = logging.getLogger("services.mc_backtest")
   |
help: Organize imports

F401 [*] `typing.Tuple` imported but unused
  --> src/services/mc_backtest_service.py:12:57
   |
10 | from concurrent.futures import ProcessPoolExecutor, as_completed
11 | from dataclasses import dataclass
12 | from typing import Dict, List, Optional, Callable, Any, Tuple
   |                                                         ^^^^^
13 | import numpy as np
14 | import pandas as pd
   |
help: Remove unused import: `typing.Tuple`

W291 [*] Trailing whitespace
  --> src/services/mc_backtest_service.py:19:23
   |
17 | from domain.schemas.backtest import MetricsDistribution, EquityEnvelope
18 | from services.backtest_service import (
19 |     run_sma_crossover, 
   |                       ^
20 |     run_rsi, 
21 |     CsvBytesPriceSeriesSource,
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> src/services/mc_backtest_service.py:20:13
   |
18 | from services.backtest_service import (
19 |     run_sma_crossover, 
20 |     run_rsi, 
   |             ^
21 |     CsvBytesPriceSeriesSource,
22 |     ServiceBacktestResult
   |
help: Remove trailing whitespace

W293 Blank line contains whitespace
  --> src/services/mc_backtest_service.py:58:1
   |
56 |     """
57 |     Bootstrap method: resample returns with replacement and reconstruct prices.
58 |     
   | ^^^^
59 |     Args:
60 |         prices: Original price series
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/services/mc_backtest_service.py:63:1
   |
61 |         sample_fraction: Fraction of returns to sample (1.0 = same length)
62 |         rng: Random number generator
63 |         
   | ^^^^^^^^
64 |     Returns:
65 |         Synthetic price series
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/mc_backtest_service.py:69:1
   |
67 |     if rng is None:
68 |         rng = default_rng()
69 |     
   | ^^^^
70 |     # Convert prices to returns
71 |     returns = prices.pct_change(fill_method=None).dropna()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/mc_backtest_service.py:72:1
   |
70 |     # Convert prices to returns
71 |     returns = prices.pct_change(fill_method=None).dropna()
72 |     
   | ^^^^
73 |     # Sample returns with replacement
74 |     n_samples = int(len(returns) * sample_fraction)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/mc_backtest_service.py:76:1
   |
74 |     n_samples = int(len(returns) * sample_fraction)
75 |     sampled_returns = rng.choice(returns.values, size=n_samples, replace=True)
76 |     
   | ^^^^
77 |     # Reconstruct prices starting from original first price
78 |     synthetic_prices = [prices.iloc[0]]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/services/mc_backtest_service.py:81:1
   |
79 |     for ret in sampled_returns:
80 |         synthetic_prices.append(synthetic_prices[-1] * (1 + ret))
81 |     
   | ^^^^
82 |     # Create series with same index structure as original (or new if different length)
83 |     if len(synthetic_prices) == len(prices):
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/services/mc_backtest_service.py:92:1
   |
90 |     """
91 |     Gaussian noise method: add noise to returns and reconstruct prices.
92 |     
   | ^^^^
93 |     Args:
94 |         prices: Original price series
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/services/mc_backtest_service.py:97:1
   |
95 |         scale: Scale factor for Gaussian noise (1.0 = same std as original returns)
96 |         rng: Random number generator
97 |         
   | ^^^^^^^^
98 |     Returns:
99 |         Synthetic price series
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:103:1
    |
101 |     if rng is None:
102 |         rng = default_rng()
103 |     
    | ^^^^
104 |     # Convert prices to returns
105 |     returns = prices.pct_change(fill_method=None).dropna()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:107:1
    |
105 |     returns = prices.pct_change(fill_method=None).dropna()
106 |     returns_std = returns.std()
107 |     
    | ^^^^
108 |     # Add Gaussian noise to returns
109 |     noise = rng.normal(0, returns_std * scale, size=len(returns))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:111:1
    |
109 |     noise = rng.normal(0, returns_std * scale, size=len(returns))
110 |     noisy_returns = returns.values + noise
111 |     
    | ^^^^
112 |     # Reconstruct prices
113 |     synthetic_prices = [prices.iloc[0]]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:116:1
    |
114 |     for ret in noisy_returns:
115 |         synthetic_prices.append(synthetic_prices[-1] * (1 + ret))
116 |     
    | ^^^^
117 |     return pd.Series(synthetic_prices, index=prices.index)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/mc_backtest_service.py:123:1
    |
121 |     """
122 |     Worker function for Monte Carlo simulation.
123 |     
    | ^^^^
124 |     Args:
125 |         args: Either a tuple (csv_data, strategy_name, strategy_params, method, method_params, seed)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/mc_backtest_service.py:127:1
    |
125 |         args: Either a tuple (csv_data, strategy_name, strategy_params, method, method_params, seed)
126 |               or a dict with keys: csv_data/df, strategy_name, strategy_params, method, method_params, seed/rng_seed
127 |         
    | ^^^^^^^^
128 |     Returns:
129 |         MonteCarloResult or None if failed
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:148:1
    |
146 |             csv_data, strategy_name, strategy_params, method, method_params, seed = args
147 |             df = None
148 |         
    | ^^^^^^^^
149 |         # Set up RNG with seed
150 |         rng = default_rng(seed)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:151:1
    |
149 |         # Set up RNG with seed
150 |         rng = default_rng(seed)
151 |         
    | ^^^^^^^^
152 |         # Load original data
153 |         if df is not None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:160:1
    |
158 |             source = CsvBytesPriceSeriesSource(csv_data)
159 |             original_prices = source.get_prices()
160 |         
    | ^^^^^^^^
161 |         # Generate synthetic data based on method
162 |         if method == "bootstrap":
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/services/mc_backtest_service.py:164:33
    |
162 |         if method == "bootstrap":
163 |             synthetic_prices = bootstrap_returns_to_prices(
164 |                 original_prices, 
    |                                 ^
165 |                 sample_fraction=method_params.get("sample_fraction", 1.0),
166 |                 rng=rng
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:176:1
    |
174 |         else:
175 |             raise ValueError(f"Unknown method: {method}")
176 |         
    | ^^^^^^^^
177 |         # Create synthetic CSV data
178 |         synthetic_df = pd.DataFrame({"close": synthetic_prices})
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:181:1
    |
179 |         if hasattr(synthetic_prices.index, 'to_pydatetime'):
180 |             synthetic_df["date"] = synthetic_prices.index
181 |         
    | ^^^^^^^^
182 |         # Convert back to CSV bytes
183 |         csv_buffer = synthetic_df.to_csv(index=False).encode()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:185:1
    |
183 |         csv_buffer = synthetic_df.to_csv(index=False).encode()
184 |         synthetic_source = CsvBytesPriceSeriesSource(csv_buffer)
185 |         
    | ^^^^^^^^
186 |         # Run strategy on synthetic data
187 |         if strategy_name == "sma_crossover":
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:191:1
    |
189 | …     sma_short = strategy_params.get("sma_short") or strategy_params.get("short_window")
190 | …     sma_long = strategy_params.get("sma_long") or strategy_params.get("long_window")
191 | …     
^^^^^^^^^^^^
192 | …     if sma_short is None or sma_long is None:
193 | …         raise ValueError(f"Missing SMA parameters. Expected 'sma_short'/'sma_long' or 'short_window'/'long_window', got: {list(stra…
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:194:1
    |
192 | …     if sma_short is None or sma_long is None:
193 | …         raise ValueError(f"Missing SMA parameters. Expected 'sma_short'/'sma_long' or 'short_window'/'long_window', got: {list(stra…
194 | …     
^^^^^^^^^^^^
195 | …     result = run_sma_crossover(
196 | …         synthetic_source,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:220:1
    |
218 |         else:
219 |             raise ValueError(f"Unknown strategy: {strategy_name}")
220 |         
    | ^^^^^^^^
221 |         return MonteCarloResult(
222 |             pnl=result.pnl,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:227:1
    |
225 |             equity_curve=result.equity
226 |         )
227 |         
    | ^^^^^^^^
228 |     except Exception:
229 |         logger.error(f"Monte Carlo worker failed:", exc_info=True)
    |
help: Remove whitespace from blank line

F541 [*] f-string without any placeholders
   --> src/services/mc_backtest_service.py:229:22
    |
228 |     except Exception:
229 |         logger.error(f"Monte Carlo worker failed:", exc_info=True)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
230 |         return None
    |
help: Remove extraneous `f` prefix

W293 Blank line contains whitespace
   --> src/services/mc_backtest_service.py:236:1
    |
234 |     """
235 |     Compute equity envelope with percentiles from multiple equity curves.
236 |     
    | ^^^^
237 |     Args:
238 |         equity_curves: List of equity curves from Monte Carlo runs
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/services/mc_backtest_service.py:240:1
    |
238 |         equity_curves: List of equity curves from Monte Carlo runs
239 |         timestamps: List of timestamp strings
240 |         
    | ^^^^^^^^
241 |     Returns:
242 |         EquityEnvelope with percentiles
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:253:1
    |
251 |             p95=[]
252 |         )
253 |     
    | ^^^^
254 |     # Align all curves to same length and compute percentiles
255 |     min_length = min(len(curve) for curve in equity_curves)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:258:1
    |
256 |     aligned_curves = [curve.iloc[:min_length].values for curve in equity_curves]
257 |     equity_matrix = np.array(aligned_curves)
258 |     
    | ^^^^
259 |     return EquityEnvelope(
260 |         timestamps=timestamps[:min_length],
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:287:1
    |
285 |     if runs > MAX_MONTE_CARLO_RUNS:
286 |         raise ValueError(f"Number of runs ({runs}) exceeds maximum allowed ({MAX_MONTE_CARLO_RUNS})")
287 |     
    | ^^^^
288 |     if method_params is None:
289 |         method_params = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:290:1
    |
288 |     if method_params is None:
289 |         method_params = {}
290 |     
    | ^^^^
291 |     logger.info(f"Starting Monte Carlo simulation: {runs} runs, method={method}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:292:1
    |
291 |     logger.info(f"Starting Monte Carlo simulation: {runs} runs, method={method}")
292 |     
    | ^^^^
293 |     # Determine if we should use parallel processing
294 |     use_parallel = runs > 1 and parallel_workers > 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:295:1
    |
293 |     # Determine if we should use parallel processing
294 |     use_parallel = runs > 1 and parallel_workers > 1
295 |     
    | ^^^^
296 |     # Prepare worker arguments
297 |     worker_args = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:302:1
    |
300 |         worker_seed = rng.integers(0, 2**32 - 1)
301 |         worker_args.append((csv_data, strategy_name, strategy_params, method, method_params, worker_seed))
302 |     
    | ^^^^
303 |     results = []
304 |     successful_runs = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:305:1
    |
303 |     results = []
304 |     successful_runs = 0
305 |     
    | ^^^^
306 |     # Enhanced progress tracking
307 |     import time
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> src/services/mc_backtest_service.py:307:5
    |
306 |       # Enhanced progress tracking
307 | /     import time
308 | |     import threading
    | |____________________^
309 |       
310 |       progress_lock = threading.Lock()
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:309:1
    |
307 |     import time
308 |     import threading
309 |     
    | ^^^^
310 |     progress_lock = threading.Lock()
311 |     completed_runs = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:312:1
    |
310 |     progress_lock = threading.Lock()
311 |     completed_runs = 0
312 |     
    | ^^^^
313 |     def update_progress():
314 |         """Thread-safe progress update"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:320:1
    |
318 |             if progress_callback:
319 |                 progress_callback(completed_runs, runs)
320 |     
    | ^^^^
321 |     if use_parallel:
322 |         logger.info(f"Using {parallel_workers} parallel workers")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:323:1
    |
321 |     if use_parallel:
322 |         logger.info(f"Using {parallel_workers} parallel workers")
323 |         
    | ^^^^^^^^
324 |         # Start a background thread to send periodic progress updates
325 |         stop_progress_thread = threading.Event()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:326:1
    |
324 |         # Start a background thread to send periodic progress updates
325 |         stop_progress_thread = threading.Event()
326 |         
    | ^^^^^^^^
327 |         def periodic_progress_update():
328 |             """Send progress updates every 2 seconds even if no new completions"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:334:1
    |
332 |                         progress_callback(completed_runs, runs)
333 |                 time.sleep(2)  # Update every 2 seconds
334 |         
    | ^^^^^^^^
335 |         progress_thread = threading.Thread(target=periodic_progress_update, daemon=True)
336 |         progress_thread.start()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:337:1
    |
335 |         progress_thread = threading.Thread(target=periodic_progress_update, daemon=True)
336 |         progress_thread.start()
337 |         
    | ^^^^^^^^
338 |         try:
339 |             with ProcessPoolExecutor(max_workers=parallel_workers) as executor:
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/services/mc_backtest_service.py:341:78
    |
339 |             with ProcessPoolExecutor(max_workers=parallel_workers) as executor:
340 |                 # Submit all jobs
341 |                 future_to_idx = {executor.submit(monte_carlo_worker, args): i 
    |                                                                              ^
342 |                                for i, args in enumerate(worker_args)}
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:343:1
    |
341 |                 future_to_idx = {executor.submit(monte_carlo_worker, args): i 
342 |                                for i, args in enumerate(worker_args)}
343 |                 
    | ^^^^^^^^^^^^^^^^
344 |                 # Collect results as they complete
345 |                 for future in as_completed(future_to_idx):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:350:1
    |
348 |                         results.append(result)
349 |                         successful_runs += 1
350 |                     
    | ^^^^^^^^^^^^^^^^^^^^
351 |                     # Update progress immediately when a worker completes
352 |                     update_progress()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:364:1
    |
362 |             if progress_callback and i % max(1, runs // 20) == 0:  # Update every 5% or at least every run
363 |                 progress_callback(i, runs)
364 |             
    | ^^^^^^^^^^^^
365 |             result = monte_carlo_worker(args)
366 |             if result is not None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:369:1
    |
367 |                 results.append(result)
368 |                 successful_runs += 1
369 |             
    | ^^^^^^^^^^^^
370 |             # Update progress after each run
371 |             update_progress()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:372:1
    |
370 |             # Update progress after each run
371 |             update_progress()
372 |     
    | ^^^^
373 |     if not results:
374 |         raise RuntimeError("All Monte Carlo runs failed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:375:1
    |
373 |     if not results:
374 |         raise RuntimeError("All Monte Carlo runs failed")
375 |     
    | ^^^^
376 |     logger.info(f"Completed {successful_runs}/{runs} successful runs")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:377:1
    |
376 |     logger.info(f"Completed {successful_runs}/{runs} successful runs")
377 |     
    | ^^^^
378 |     # Send final progress update
379 |     if progress_callback:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:381:1
    |
379 |     if progress_callback:
380 |         progress_callback(runs, runs)
381 |     
    | ^^^^
382 |     # Compute metrics distributions
383 |     pnl_values = [r.pnl for r in results]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:386:1
    |
384 |     sharpe_values = [r.sharpe for r in results]
385 |     drawdown_values = [r.drawdown for r in results]
386 |     
    | ^^^^
387 |     def create_metrics_distribution(values: List[float]) -> MetricsDistribution:
388 |         """Create MetricsDistribution from list of values"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:399:1
    |
397 |             p95=float(np.percentile(arr, 95))
398 |         )
399 |     
    | ^^^^
400 |     metrics_distribution = {
401 |         "pnl": create_metrics_distribution(pnl_values),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:405:1
    |
403 |         "drawdown": create_metrics_distribution(drawdown_values)
404 |     }
405 |     
    | ^^^^
406 |     # Compute equity envelope if requested and we have equity curves
407 |     equity_envelope = None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:417:1
    |
415 |             else:
416 |                 timestamps = [str(i) for i in range(len(first_curve))]
417 |             
    | ^^^^^^^^^^^^
418 |             equity_envelope = compute_equity_envelope(equity_curves, timestamps)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:419:1
    |
418 |             equity_envelope = compute_equity_envelope(equity_curves, timestamps)
419 |     
    | ^^^^
420 |     return MonteCarloSummary(
421 |         filename=filename,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:432:1
    |
430 | class ProgressPublisher:
431 |     """Simple progress publisher for logging or future SSE integration"""
432 |     
    | ^^^^
433 |     def __init__(self, logger_name: str = "mc_progress"):
434 |         self.logger = logging.getLogger(logger_name)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:435:1
    |
433 |     def __init__(self, logger_name: str = "mc_progress"):
434 |         self.logger = logging.getLogger(logger_name)
435 |     
    | ^^^^
436 |     def publish_progress(self, processed: int, total: int, filename: str = ""):
437 |         """Publish progress update"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/services/mc_backtest_service.py:440:1
    |
438 |         percentage = (processed / total) * 100 if total > 0 else 0
439 |         self.logger.info(f"Progress {filename}: {processed}/{total} ({percentage:.1f}%)")
440 |     
    | ^^^^
441 |     def publish_completion(self, summary: MonteCarloSummary):
442 |         """Publish completion summary"""
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/services/mc_backtest_service.py:444:85
    |
442 |         """Publish completion summary"""
443 |         self.logger.info(f"Completed Monte Carlo for {summary.filename}: "
444 |                         f"{summary.successful_runs}/{summary.runs} successful runs")
    |                                                                                     ^
    |
help: Add trailing newline

W292 [*] No newline at end of file
 --> src/strategies/__init__.py:1:21
  |
1 | # strategies package
  |                     ^
  |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> src/strategies/base.py:1:1
  |
1 | / from __future__ import annotations
2 | | from abc import ABC, abstractmethod
3 | | from typing import Type, Optional
4 | | from datetime import datetime
5 | | import pandas as pd
6 | | from pydantic import BaseModel
  | |______________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> src/strategies/metrics.py:1:1
  |
1 | / from __future__ import annotations
2 | | import numpy as np
3 | | import pandas as pd
4 | | from typing import Dict
  | |_______________________^
  |
help: Organize imports

F401 [*] `typing.Dict` imported but unused
 --> src/strategies/metrics.py:4:20
  |
2 | import numpy as np
3 | import pandas as pd
4 | from typing import Dict
  |                    ^^^^
  |
help: Remove unused import: `typing.Dict`

I001 [*] Import block is un-sorted or un-formatted
  --> src/strategies/moving_average.py:1:1
   |
 1 | / from __future__ import annotations
 2 | | import pandas as pd
 3 | | from typing import Optional
 4 | | from pydantic import Field, model_validator
 5 | |
 6 | | from domain.backtest import BacktestResult
 7 | | from strategies.base import Strategy, StrategyParams
 8 | | from strategies.metrics import (
 9 | |     sharpe_ratio,
10 | |     max_drawdown,
11 | |     total_return,
12 | |     trade_summary_from_positions,
13 | | )
   | |_^
   |
help: Organize imports

F401 [*] `typing.Optional` imported but unused
 --> src/strategies/moving_average.py:3:20
  |
1 | from __future__ import annotations
2 | import pandas as pd
3 | from typing import Optional
  |                    ^^^^^^^^
4 | from pydantic import Field, model_validator
  |
help: Remove unused import: `typing.Optional`

W293 [*] Blank line contains whitespace
  --> src/strategies/moving_average.py:20:1
   |
18 |     long_window: int = Field(50, gt=0)
19 |     annualization: int = Field(252, gt=0)
20 |     
   | ^^^^
21 |     @model_validator(mode='after')
22 |     def validate_windows(self):
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> src/strategies/rsi_reversion.py:1:1
   |
 1 | / from __future__ import annotations
 2 | | import pandas as pd
 3 | | import numpy as np
 4 | | from pydantic import Field
 5 | |
 6 | | from domain.backtest import BacktestResult
 7 | | from strategies.base import Strategy, StrategyParams
 8 | | from strategies.metrics import (
 9 | |     sharpe_ratio,
10 | |     max_drawdown,
11 | |     total_return,
12 | |     trade_summary_from_positions,
13 | | )
   | |_^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> src/utils/date_validation.py:5:1
  |
3 |   """
4 |
5 | / import os
6 | | import pandas as pd
7 | | from datetime import datetime
8 | | from typing import Dict, Tuple, Optional
9 | | from functools import lru_cache
  | |_______________________________^
  |
help: Organize imports

F401 [*] `typing.Optional` imported but unused
 --> src/utils/date_validation.py:8:33
  |
6 | import pandas as pd
7 | from datetime import datetime
8 | from typing import Dict, Tuple, Optional
  |                                 ^^^^^^^^
9 | from functools import lru_cache
  |
help: Remove unused import: `typing.Optional`

W293 Blank line contains whitespace
  --> src/utils/date_validation.py:16:1
   |
14 |     """
15 |     Get the date range available in a CSV file.
16 |     
   | ^^^^
17 |     Args:
18 |         csv_file_path: Path to the CSV file
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/utils/date_validation.py:19:1
   |
17 |     Args:
18 |         csv_file_path: Path to the CSV file
19 |         
   | ^^^^^^^^
20 |     Returns:
21 |         Tuple of (min_date, max_date)
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/utils/date_validation.py:22:1
   |
20 |     Returns:
21 |         Tuple of (min_date, max_date)
22 |         
   | ^^^^^^^^
23 |     Raises:
24 |         FileNotFoundError: If CSV file doesn't exist
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/utils/date_validation.py:29:1
   |
27 |     if not os.path.exists(csv_file_path):
28 |         raise FileNotFoundError(f"CSV file not found: {csv_file_path}")
29 |     
   | ^^^^
30 |     df = pd.read_csv(csv_file_path)
31 |     df.columns = [str(c).strip().lower() for c in df.columns]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/utils/date_validation.py:32:1
   |
30 |     df = pd.read_csv(csv_file_path)
31 |     df.columns = [str(c).strip().lower() for c in df.columns]
32 |     
   | ^^^^
33 |     if "date" not in df.columns:
34 |         raise ValueError("CSV file must contain a 'date' column")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/utils/date_validation.py:35:1
   |
33 |     if "date" not in df.columns:
34 |         raise ValueError("CSV file must contain a 'date' column")
35 |     
   | ^^^^
36 |     df["date"] = pd.to_datetime(df["date"], errors="coerce")
37 |     df = df.dropna(subset=["date"])
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/utils/date_validation.py:38:1
   |
36 |     df["date"] = pd.to_datetime(df["date"], errors="coerce")
37 |     df = df.dropna(subset=["date"])
38 |     
   | ^^^^
39 |     if df.empty:
40 |         raise ValueError("No valid dates found in CSV file")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/utils/date_validation.py:41:1
   |
39 |     if df.empty:
40 |         raise ValueError("No valid dates found in CSV file")
41 |     
   | ^^^^
42 |     min_date = df["date"].min().to_pydatetime()
43 |     max_date = df["date"].max().to_pydatetime()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/utils/date_validation.py:44:1
   |
42 |     min_date = df["date"].min().to_pydatetime()
43 |     max_date = df["date"].max().to_pydatetime()
44 |     
   | ^^^^
45 |     return min_date, max_date
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/utils/date_validation.py:57:1
   |
55 |     """
56 |     Validate if the requested date range is available for a given symbol.
57 |     
   | ^^^^
58 |     Args:
59 |         symbol: Trading symbol (e.g., 'aapl', 'msft')
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/utils/date_validation.py:63:1
   |
61 |         end_date: Requested end date
62 |         datasets_path: Path to datasets directory
63 |         
   | ^^^^^^^^
64 |     Returns:
65 |         Dict with validation result:
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> src/utils/date_validation.py:75:28
   |
73 |     symbol_to_file = {
74 |         "aapl": "AAPL.csv",
75 |         "amzn": "AMZN.csv", 
   |                            ^
76 |         "fb": "FB.csv",
77 |         "googl": "GOOGL.csv",
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> src/utils/date_validation.py:82:1
   |
80 |         "nvda": "NVDA.csv",
81 |     }
82 |     
   | ^^^^
83 |     if symbol.lower() not in symbol_to_file:
84 |         return {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/utils/date_validation.py:90:1
   |
88 |             'suggested_range': None
89 |         }
90 |     
   | ^^^^
91 |     csv_file_path = os.path.join(datasets_path, symbol_to_file[symbol.lower()])
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/utils/date_validation.py:92:1
   |
91 |     csv_file_path = os.path.join(datasets_path, symbol_to_file[symbol.lower()])
92 |     
   | ^^^^
93 |     try:
94 |         min_date, max_date = get_csv_date_range(csv_file_path)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/utils/date_validation.py:102:1
    |
100 |             'suggested_range': None
101 |         }
102 |     
    | ^^^^
103 |     available_range = {'min_date': min_date, 'max_date': max_date}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/utils/date_validation.py:104:1
    |
103 |     available_range = {'min_date': min_date, 'max_date': max_date}
104 |     
    | ^^^^
105 |     # Check if requested range is within available data
106 |     if start_date < min_date or end_date > max_date:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/utils/date_validation.py:110:1
    |
108 |         suggested_start = max(start_date, min_date)
109 |         suggested_end = min(end_date, max_date)
110 |         
    | ^^^^^^^^
111 |         # If the suggested range is still invalid (start >= end), suggest a reasonable default
112 |         if suggested_start >= suggested_end:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/utils/date_validation.py:121:1
    |
119 |                 suggested_start = min_date
120 |                 suggested_end = max_date
121 |         
    | ^^^^^^^^
122 |         return {
123 |             'valid': False,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/utils/date_validation.py:131:1
    |
129 |             }
130 |         }
131 |     
    | ^^^^
132 |     return {
133 |         'valid': True,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/utils/date_validation.py:146:1
    |
144 |     """
145 |     Get date ranges for all available symbols.
146 |     
    | ^^^^
147 |     Args:
148 |         datasets_path: Path to datasets directory
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/utils/date_validation.py:149:1
    |
147 |     Args:
148 |         datasets_path: Path to datasets directory
149 |         
    | ^^^^^^^^
150 |     Returns:
151 |         Dict mapping symbol to {'min_date': datetime, 'max_date': datetime}
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/utils/date_validation.py:155:28
    |
153 |     symbol_to_file = {
154 |         "aapl": "AAPL.csv",
155 |         "amzn": "AMZN.csv", 
    |                            ^
156 |         "fb": "FB.csv",
157 |         "googl": "GOOGL.csv",
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/utils/date_validation.py:162:1
    |
160 |         "nvda": "NVDA.csv",
161 |     }
162 |     
    | ^^^^
163 |     result = {}
164 |     for symbol, filename in symbol_to_file.items():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/utils/date_validation.py:172:1
    |
170 |             # Skip symbols with missing or invalid data
171 |             continue
172 |     
    | ^^^^
173 |     return result
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/utils/date_validation.py:173:18
    |
171 |             continue
172 |     
173 |     return result
    |                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> src/workers/__init__.py:4:1
  |
2 | Worker implementations for background job processing.
3 | """
4 | from .monte_carlo_worker import MonteCarloWorker, MonteCarloJobProcessor, WorkerProgressCallback
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | __all__ = ["MonteCarloWorker", "MonteCarloJobProcessor", "WorkerProgressCallback"]
  |
help: Organize imports

W292 [*] No newline at end of file
 --> src/workers/__init__.py:6:83
  |
4 | from .monte_carlo_worker import MonteCarloWorker, MonteCarloJobProcessor, WorkerProgressCallback
5 |
6 | __all__ = ["MonteCarloWorker", "MonteCarloJobProcessor", "WorkerProgressCallback"]
  |                                                                                   ^
  |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/workers/main.py:2:1
   |
 1 |   """Main entry point for running workers."""
 2 | / import asyncio
 3 | | import logging
 4 | | import os
 5 | | import sys
 6 | |
 7 | | from dotenv import load_dotenv
 8 | |
 9 | | from config.queue_config import get_config
10 | | from core.logging import setup_logging
11 | | from infrastructure.queue.sqs_adapter import SQSQueueAdapter
12 | | from infrastructure.storage.s3_adapter import S3StorageAdapter
13 | | from workers.monte_carlo_worker import MonteCarloJobProcessor, MonteCarloWorker, WorkerProgressCallback
   | |_______________________________________________________________________________________________________^
   |
help: Organize imports

W292 [*] No newline at end of file
  --> src/workers/main.py:87:24
   |
86 | if __name__ == "__main__":
87 |     asyncio.run(main())
   |                        ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> src/workers/monte_carlo_worker.py:6:1
   |
 4 |   including exponential backoff retry logic, progress tracking, and S3 artifact storage.
 5 |   """
 6 | / import asyncio
 7 | | import json
 8 | | import logging
 9 | | import signal
10 | | import os
11 | | import random
12 | | import math
13 | | from datetime import datetime, UTC
14 | | from typing import Optional, Dict, Any, List, Callable
15 | | import traceback
16 | | from contextlib import asynccontextmanager
17 | | import numpy as np
18 | | import pandas as pd
19 | | from io import StringIO
20 | |
21 | |
22 | | from domain.queue import (
23 | |     WorkerInterface, JobProcessorInterface, ProgressCallbackInterface,
24 | |     Job, JobStatus, MonteCarloJobPayload, QueueInterface
25 | | )
26 | | from services.mc_backtest_service import run_monte_carlo_on_df
27 | | from core.logging import setup_logging
28 | | from infrastructure.repositories.jobs import JobRepository
29 | | from infrastructure.storage.s3_adapter import S3StorageAdapter
   | |______________________________________________________________^
30 |
31 |   # Configure logging to show stack traces
   |
help: Organize imports

F401 [*] `os` imported but unused
  --> src/workers/monte_carlo_worker.py:10:8
   |
 8 | import logging
 9 | import signal
10 | import os
   |        ^^
11 | import random
12 | import math
   |
help: Remove unused import: `os`

F401 [*] `math` imported but unused
  --> src/workers/monte_carlo_worker.py:12:8
   |
10 | import os
11 | import random
12 | import math
   |        ^^^^
13 | from datetime import datetime, UTC
14 | from typing import Optional, Dict, Any, List, Callable
   |
help: Remove unused import: `math`

F401 [*] `typing.List` imported but unused
  --> src/workers/monte_carlo_worker.py:14:41
   |
12 | import math
13 | from datetime import datetime, UTC
14 | from typing import Optional, Dict, Any, List, Callable
   |                                         ^^^^
15 | import traceback
16 | from contextlib import asynccontextmanager
   |
help: Remove unused import

F401 [*] `typing.Callable` imported but unused
  --> src/workers/monte_carlo_worker.py:14:47
   |
12 | import math
13 | from datetime import datetime, UTC
14 | from typing import Optional, Dict, Any, List, Callable
   |                                               ^^^^^^^^
15 | import traceback
16 | from contextlib import asynccontextmanager
   |
help: Remove unused import

F401 [*] `numpy` imported but unused
  --> src/workers/monte_carlo_worker.py:17:17
   |
15 | import traceback
16 | from contextlib import asynccontextmanager
17 | import numpy as np
   |                 ^^
18 | import pandas as pd
19 | from io import StringIO
   |
help: Remove unused import: `numpy`

F401 [*] `domain.queue.JobStatus` imported but unused
  --> src/workers/monte_carlo_worker.py:24:10
   |
22 | from domain.queue import (
23 |     WorkerInterface, JobProcessorInterface, ProgressCallbackInterface,
24 |     Job, JobStatus, MonteCarloJobPayload, QueueInterface
   |          ^^^^^^^^^
25 | )
26 | from services.mc_backtest_service import run_monte_carlo_on_df
   |
help: Remove unused import: `domain.queue.JobStatus`

F401 [*] `core.logging.setup_logging` imported but unused
  --> src/workers/monte_carlo_worker.py:27:26
   |
25 | )
26 | from services.mc_backtest_service import run_monte_carlo_on_df
27 | from core.logging import setup_logging
   |                          ^^^^^^^^^^^^^
28 | from infrastructure.repositories.jobs import JobRepository
29 | from infrastructure.storage.s3_adapter import S3StorageAdapter
   |
help: Remove unused import: `core.logging.setup_logging`

W293 [*] Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:39:1
   |
37 | class MonteCarloJobProcessor(JobProcessorInterface[MonteCarloJobPayload, Dict[str, Any]]):
38 |     """Processor for Monte Carlo simulation jobs with artifact storage"""
39 |     
   | ^^^^
40 |     def __init__(
41 |         self,
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:48:1
   |
46 |         """
47 |         Initialize Monte Carlo job processor.
48 |         
   | ^^^^^^^^
49 |         Args:
50 |             processor_id: Unique processor identifier
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:57:1
   |
55 |         self.progress_callback = progress_callback
56 |         self.storage_adapter = storage_adapter
57 |         
   | ^^^^^^^^
58 |         logger.info(f"Initialized Monte Carlo processor: {processor_id}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:59:1
   |
58 |         logger.info(f"Initialized Monte Carlo processor: {processor_id}")
59 |     
   | ^^^^
60 |     async def process(self, job: Job[MonteCarloJobPayload]) -> Dict[str, Any]:
61 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:63:1
   |
61 |         """
62 |         Process a Monte Carlo simulation job with comprehensive tracking.
63 |         
   | ^^^^^^^^
64 |         Args:
65 |             job: Monte Carlo job to process
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:66:1
   |
64 |         Args:
65 |             job: Monte Carlo job to process
66 |             
   | ^^^^^^^^^^^^
67 |         Returns:
68 |             Simulation results with artifact URLs
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:69:1
   |
67 |         Returns:
68 |             Simulation results with artifact URLs
69 |             
   | ^^^^^^^^^^^^
70 |         Raises:
71 |             Exception: If processing fails
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:74:1
   |
72 |         """
73 |         start_time = datetime.now(UTC)
74 |         
   | ^^^^^^^^
75 |         try:
76 |             payload = job.payload
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:78:1
   |
76 |             payload = job.payload
77 |             job_id = job.metadata.job_id
78 |             
   | ^^^^^^^^^^^^
79 |             logger.info(f"Processing Monte Carlo job {job_id} with {payload.runs} runs", extra={
80 |                 "job_id": job_id,
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:84:1
   |
82 |                 "started_at": start_time.isoformat()
83 |             })
84 |             
   | ^^^^^^^^^^^^
85 |             # Report initial progress with timing
86 |             if self.progress_callback:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:90:1
   |
88 |                     job_id, 0.0, "Starting simulation..."
89 |                 )
90 |             
   | ^^^^^^^^^^^^
91 |             # Create progress callback for the service
92 |             async def service_progress_callback(progress: float, message: str = ""):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> src/workers/monte_carlo_worker.py:95:1
   |
93 |                 if self.progress_callback:
94 |                     await self.progress_callback.report_progress(job_id, progress, message)
95 |             
   | ^^^^^^^^^^^^
96 |             # Execute Monte Carlo simulation
97 |             result = await self._execute_simulation(payload, service_progress_callback)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:98:1
    |
 96 |             # Execute Monte Carlo simulation
 97 |             result = await self._execute_simulation(payload, service_progress_callback)
 98 |             
    | ^^^^^^^^^^^^
 99 |             # Store artifacts if storage adapter is available
100 |             artifact_urls = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:109:1
    |
107 |                     logger.error(f"Failed to store artifacts for job {job_id}: {str(e)}")
108 |                     # Continue without artifacts rather than failing the job
109 |             
    | ^^^^^^^^^^^^
110 |             # Report completion with timing
111 |             completion_time = datetime.now(UTC)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:113:1
    |
111 |             completion_time = datetime.now(UTC)
112 |             duration = (completion_time - start_time).total_seconds()
113 |             
    | ^^^^^^^^^^^^
114 |             if self.progress_callback:
115 |                 await self.progress_callback.report_completion(job_id, result)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:116:1
    |
114 |             if self.progress_callback:
115 |                 await self.progress_callback.report_completion(job_id, result)
116 |             
    | ^^^^^^^^^^^^
117 |             logger.info(f"Completed Monte Carlo job {job_id}", extra={
118 |                 "job_id": job_id,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:124:1
    |
122 |             })
123 |             return result
124 |             
    | ^^^^^^^^^^^^
125 |         except Exception as e:
126 |             completion_time = datetime.now(UTC)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:128:1
    |
126 |             completion_time = datetime.now(UTC)
127 |             duration = (completion_time - start_time).total_seconds()
128 |             
    | ^^^^^^^^^^^^
129 |             error_msg = f"Failed to process Monte Carlo job {job.metadata.job_id}: {str(e)}"
130 |             logger.error(error_msg, extra={
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:138:1
    |
136 |             })
137 |             logger.error(traceback.format_exc())
138 |             
    | ^^^^^^^^^^^^
139 |             if self.progress_callback:
140 |                 await self.progress_callback.report_error(job.metadata.job_id, error_msg)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:141:1
    |
139 |             if self.progress_callback:
140 |                 await self.progress_callback.report_error(job.metadata.job_id, error_msg)
141 |             
    | ^^^^^^^^^^^^
142 |             raise
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:143:1
    |
142 |             raise
143 |     
    | ^^^^
144 |     async def _execute_simulation(
145 |         self,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:150:1
    |
148 |     ) -> Dict[str, Any]:
149 |         """Execute the Monte Carlo simulation"""
150 |         
    | ^^^^^^^^
151 |         # Progress tracking wrapper
152 |         def sync_progress_callback(processed: int, total: int):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:158:1
    |
156 |                 # Create task for async callback with correct signature
157 |                 asyncio.create_task(progress_callback(progress, message))
158 |         
    | ^^^^^^^^
159 |         # Execute simulation using existing service
160 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:174:1
    |
172 |                 progress_callback=sync_progress_callback
173 |             )
174 |             
    | ^^^^^^^^^^^^
175 |             # Convert result to dictionary format
176 |             return {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:202:1
    |
200 |                 } if result.equity_envelope else None
201 |             }
202 |             
    | ^^^^^^^^^^^^
203 |         except Exception as e:
204 |             logger.error(f"Simulation failed: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:206:1
    |
204 |             logger.error(f"Simulation failed: {str(e)}")
205 |             raise
206 |     
    | ^^^^
207 |     async def _store_artifacts(
208 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:215:1
    |
213 |         """
214 |         Store simulation artifacts in S3.
215 |         
    | ^^^^^^^^
216 |         Args:
217 |             job_id: Job identifier
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:220:1
    |
218 |             result: Simulation results
219 |             payload: Job payload
220 |             
    | ^^^^^^^^^^^^
221 |         Returns:
222 |             Dictionary mapping artifact names to URLs
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:225:1
    |
223 |         """
224 |         artifact_urls = {}
225 |         
    | ^^^^^^^^
226 |         try:
227 |             # Store results as JSON
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:241:1
    |
239 |             )
240 |             artifact_urls["results"] = results_url
241 |             
    | ^^^^^^^^^^^^
242 |             # Store equity envelope as CSV
243 |             if "equity_envelope" in result:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:253:1
    |
251 |                     "p95": envelope["p95"]
252 |                 })
253 |                 
    | ^^^^^^^^^^^^^^^^
254 |                 csv_buffer = StringIO()
255 |                 df.to_csv(csv_buffer, index=False)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:257:1
    |
255 |                 df.to_csv(csv_buffer, index=False)
256 |                 csv_content = csv_buffer.getvalue()
257 |                 
    | ^^^^^^^^^^^^^^^^
258 |                 envelope_url = await self.storage_adapter.upload_artifact(
259 |                     job_id=job_id,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:269:1
    |
267 |                 )
268 |                 artifact_urls["equity_envelope"] = envelope_url
269 |             
    | ^^^^^^^^^^^^
270 |             # Store metrics distribution as CSV
271 |             if "metrics_distribution" in result:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:284:1
    |
282 |                         "p95": dist["p95"]
283 |                     })
284 |                 
    | ^^^^^^^^^^^^^^^^
285 |                 metrics_df = pd.DataFrame(metrics_data)
286 |                 csv_buffer = StringIO()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:289:1
    |
287 |                 metrics_df.to_csv(csv_buffer, index=False)
288 |                 csv_content = csv_buffer.getvalue()
289 |                 
    | ^^^^^^^^^^^^^^^^
290 |                 metrics_url = await self.storage_adapter.upload_artifact(
291 |                     job_id=job_id,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:301:1
    |
299 |                 )
300 |                 artifact_urls["metrics_distribution"] = metrics_url
301 |             
    | ^^^^^^^^^^^^
302 |             logger.info(f"Stored {len(artifact_urls)} artifacts for job {job_id}")
303 |             return artifact_urls
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:304:1
    |
302 |             logger.info(f"Stored {len(artifact_urls)} artifacts for job {job_id}")
303 |             return artifact_urls
304 |             
    | ^^^^^^^^^^^^
305 |         except Exception as e:
306 |             logger.error(f"Failed to store artifacts for job {job_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:309:1
    |
307 |             # Don't fail the job if artifact storage fails
308 |             return {}
309 |     
    | ^^^^
310 |     def get_processor_id(self) -> str:
311 |         """Get processor identifier"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:317:1
    |
315 | class MonteCarloWorker(WorkerInterface):
316 |     """Worker for processing Monte Carlo simulation jobs with artifact storage"""
317 |     
    | ^^^^
318 |     def __init__(
319 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:331:1
    |
329 |         """
330 |         Initialize Monte Carlo worker.
331 |         
    | ^^^^^^^^
332 |         Args:
333 |             worker_id: Unique worker identifier
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:350:1
    |
348 |         self.health_check_interval = health_check_interval
349 |         self.storage_adapter = storage_adapter
350 |         
    | ^^^^^^^^
351 |         self._running = False
352 |         self._shutdown_event = asyncio.Event()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:355:1
    |
353 |         self._active_jobs: Dict[str, asyncio.Task] = {}
354 |         self._last_health_check = datetime.now(UTC)
355 |         
    | ^^^^^^^^
356 |         # Setup signal handlers
357 |         self._setup_signal_handlers()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:358:1
    |
356 |         # Setup signal handlers
357 |         self._setup_signal_handlers()
358 |         
    | ^^^^^^^^
359 |         logger.info(f"Initialized Monte Carlo worker: {worker_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:360:1
    |
359 |         logger.info(f"Initialized Monte Carlo worker: {worker_id}")
360 |     
    | ^^^^
361 |     async def start(self) -> None:
362 |         """Start the worker process"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:366:1
    |
364 |             logger.warning(f"Worker {self.worker_id} is already running")
365 |             return
366 |         
    | ^^^^^^^^
367 |         self._running = True
368 |         logger.info(f"Starting Monte Carlo worker: {self.worker_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:369:1
    |
367 |         self._running = True
368 |         logger.info(f"Starting Monte Carlo worker: {self.worker_id}")
369 |         
    | ^^^^^^^^
370 |         try:
371 |             # Start main processing loop
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:378:1
    |
376 |         finally:
377 |             await self._cleanup()
378 |     
    | ^^^^
379 |     async def stop(self) -> None:
380 |         """Stop the worker process gracefully"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:384:1
    |
382 |         self._running = False
383 |         self._shutdown_event.set()
384 |         
    | ^^^^^^^^
385 |         # Wait for active jobs to complete (with timeout)
386 |         if self._active_jobs:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:397:1
    |
395 |                 for task in self._active_jobs.values():
396 |                     task.cancel()
397 |     
    | ^^^^
398 |     async def health_check(self) -> bool:
399 |         """Check if worker is healthy"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:403:1
    |
401 |             # Update last health check time
402 |             self._last_health_check = datetime.now(UTC)
403 |             
    | ^^^^^^^^^^^^
404 |             # Check if worker is running
405 |             if not self._running:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:407:1
    |
405 |             if not self._running:
406 |                 return False
407 |             
    | ^^^^^^^^^^^^
408 |             # Check queue connectivity
409 |             await self.queue.get_metrics()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:410:1
    |
408 |             # Check queue connectivity
409 |             await self.queue.get_metrics()
410 |             
    | ^^^^^^^^^^^^
411 |             # Check if we're not overloaded
412 |             active_job_count = len(self._active_jobs)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:416:1
    |
414 |                 logger.warning(f"Worker {self.worker_id} is overloaded: {active_job_count} active jobs")
415 |                 return False
416 |             
    | ^^^^^^^^^^^^
417 |             return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:418:1
    |
417 |             return True
418 |             
    | ^^^^^^^^^^^^
419 |         except Exception as e:
420 |             logger.error(f"Health check failed for worker {self.worker_id}: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:422:1
    |
420 |             logger.error(f"Health check failed for worker {self.worker_id}: {str(e)}")
421 |             return False
422 |     
    | ^^^^
423 |     def get_worker_id(self) -> str:
424 |         """Get worker identifier"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:426:1
    |
424 |         """Get worker identifier"""
425 |         return self.worker_id
426 |     
    | ^^^^
427 |     async def _process_loop(self) -> None:
428 |         """Main processing loop"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:433:1
    |
431 |                 # Clean up completed jobs
432 |                 await self._cleanup_completed_jobs()
433 |                 
    | ^^^^^^^^^^^^^^^^
434 |                 # Check if we can accept more jobs
435 |                 if len(self._active_jobs) >= self.max_concurrent_jobs:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:438:1
    |
436 |                     await asyncio.sleep(self.poll_interval)
437 |                     continue
438 |                 
    | ^^^^^^^^^^^^^^^^
439 |                 # Try to dequeue a job
440 |                 job = await self.queue.dequeue(timeout_seconds=int(self.poll_interval))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:441:1
    |
439 |                 # Try to dequeue a job
440 |                 job = await self.queue.dequeue(timeout_seconds=int(self.poll_interval))
441 |                 
    | ^^^^^^^^^^^^^^^^
442 |                 if job:
443 |                     # Process job asynchronously
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:447:1
    |
445 |                     self._active_jobs[job.metadata.job_id] = task
446 |                     logger.info(f"Started processing job {job.metadata.job_id}")
447 |                 
    | ^^^^^^^^^^^^^^^^
448 |                 # Periodic health check
449 |                 if (datetime.now(UTC) - self._last_health_check).total_seconds() > self.health_check_interval:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:451:1
    |
449 |                 if (datetime.now(UTC) - self._last_health_check).total_seconds() > self.health_check_interval:
450 |                     await self.health_check()
451 |                 
    | ^^^^^^^^^^^^^^^^
452 |             except Exception as e:
453 |                 logger.error(f"Error in worker processing loop: {str(e)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:455:1
    |
453 |                 logger.error(f"Error in worker processing loop: {str(e)}")
454 |                 await asyncio.sleep(self.poll_interval)
455 |     
    | ^^^^
456 |     async def _process_job(self, job: Job[MonteCarloJobPayload]) -> None:
457 |         """Process a single job, with error handling and status updates."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:497:1
    |
495 |         if job.metadata.retry_count >= max_retries:
496 |             return False
497 |         
    | ^^^^^^^^
498 |         # Define non-retryable error types
499 |         non_retryable_errors = (
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:504:1
    |
502 |             KeyError,    # Missing required fields
503 |         )
504 |         
    | ^^^^^^^^
505 |         # Don't retry for validation/input errors
506 |         if isinstance(error, non_retryable_errors):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:509:1
    |
507 |             logger.info(f"Non-retryable error for job {job.metadata.job_id}: {type(error).__name__}")
508 |             return False
509 |         
    | ^^^^^^^^
510 |         # Retry for transient errors (network, temporary resource issues, etc.)
511 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:512:1
    |
510 |         # Retry for transient errors (network, temporary resource issues, etc.)
511 |         return True
512 |     
    | ^^^^
513 |     def _calculate_retry_delay(self, attempt: int) -> float:
514 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:516:1
    |
514 |         """
515 |         Calculate exponential backoff delay with jitter.
516 |         
    | ^^^^^^^^
517 |         Args:
518 |             attempt: Current attempt number (0-based)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:519:1
    |
517 |         Args:
518 |             attempt: Current attempt number (0-based)
519 |             
    | ^^^^^^^^^^^^
520 |         Returns:
521 |             Delay in seconds
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:525:1
    |
523 |         # Base delay: 2^attempt seconds, capped at 300 seconds (5 minutes)
524 |         base_delay = min(2 ** attempt, 300)
525 |         
    | ^^^^^^^^
526 |         # Add jitter (±25% of base delay) to prevent thundering herd
527 |         jitter = random.uniform(-0.25, 0.25) * base_delay
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:528:1
    |
526 |         # Add jitter (±25% of base delay) to prevent thundering herd
527 |         jitter = random.uniform(-0.25, 0.25) * base_delay
528 |         
    | ^^^^^^^^
529 |         # Ensure minimum delay of 1 second
530 |         delay = max(1.0, base_delay + jitter)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:531:1
    |
529 |         # Ensure minimum delay of 1 second
530 |         delay = max(1.0, base_delay + jitter)
531 |         
    | ^^^^^^^^
532 |         return delay
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:533:1
    |
532 |         return delay
533 |     
    | ^^^^
534 |     async def _cleanup_completed_jobs(self) -> None:
535 |         """Clean up completed job tasks"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:537:1
    |
535 |         """Clean up completed job tasks"""
536 |         completed_jobs = []
537 |         
    | ^^^^^^^^
538 |         for job_id, task in self._active_jobs.items():
539 |             if task.done():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:541:1
    |
539 |             if task.done():
540 |                 completed_jobs.append(job_id)
541 |                 
    | ^^^^^^^^^^^^^^^^
542 |                 # Log any exceptions
543 |                 try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:547:1
    |
545 |                 except Exception as e:
546 |                     logger.error(f"Job {job_id} completed with exception: {str(e)}", exc_info=True)
547 |         
    | ^^^^^^^^
548 |         # Remove completed jobs
549 |         for job_id in completed_jobs:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:551:1
    |
549 |         for job_id in completed_jobs:
550 |             self._active_jobs.pop(job_id, None)
551 |     
    | ^^^^
552 |     async def _cleanup(self) -> None:
553 |         """Cleanup worker resources"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:555:1
    |
553 |         """Cleanup worker resources"""
554 |         logger.info(f"Cleaning up worker {self.worker_id}")
555 |         
    | ^^^^^^^^
556 |         # Cancel any remaining active jobs
557 |         for task in self._active_jobs.values():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:560:1
    |
558 |             if not task.done():
559 |                 task.cancel()
560 |         
    | ^^^^^^^^
561 |         # Clear active jobs
562 |         self._active_jobs.clear()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:563:1
    |
561 |         # Clear active jobs
562 |         self._active_jobs.clear()
563 |         
    | ^^^^^^^^
564 |         logger.info(f"Worker {self.worker_id} cleanup completed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:565:1
    |
564 |         logger.info(f"Worker {self.worker_id} cleanup completed")
565 |     
    | ^^^^
566 |     def _setup_signal_handlers(self) -> None:
567 |         """Setup signal handlers for graceful shutdown"""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:571:1
    |
569 |             logger.info(f"Received signal {signum}, initiating graceful shutdown")
570 |             asyncio.create_task(self.stop())
571 |         
    | ^^^^^^^^
572 |         signal.signal(signal.SIGTERM, signal_handler)
573 |         signal.signal(signal.SIGINT, signal_handler)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:578:1
    |
576 | class WorkerProgressCallback(ProgressCallbackInterface):
577 |     """Progress callback that updates job status in queue and database"""
578 |     
    | ^^^^
579 |     def __init__(
580 |         self, 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/workers/monte_carlo_worker.py:580:14
    |
579 |     def __init__(
580 |         self, 
    |              ^
581 |         queue: QueueInterface[MonteCarloJobPayload],
582 |         worker_id: Optional[str] = None
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:608:1
    |
606 |                 async with self._get_repo() as repo:
607 |                     success = await repo.update_job_progress(job_id, progress, message, current_run, total_runs)
608 |                     
    | ^^^^^^^^^^^^^^^^^^^^
609 |                 if not success:
610 |                     logger.warning(f"Failed to update progress in database for job {job_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:624:1
    |
622 |                 try:
623 |                     from infrastructure.cache import cache_manager
624 |                     
    | ^^^^^^^^^^^^^^^^^^^^
625 |                     # Only publish if Redis is connected to avoid blocking
626 |                     if cache_manager.is_connected():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:636:1
    |
634 |                             "worker_id": self.worker_id
635 |                         }
636 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
637 |                         # Use enhanced pub/sub with guaranteed delivery
638 |                         success = await cache_manager.publish(
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/workers/monte_carlo_worker.py:639:54
    |
637 |                         # Use enhanced pub/sub with guaranteed delivery
638 |                         success = await cache_manager.publish(
639 |                             f"job_progress:{job_id}", 
    |                                                      ^
640 |                             notification_data, 
641 |                             ensure_delivery=True
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/workers/monte_carlo_worker.py:640:47
    |
638 |                         success = await cache_manager.publish(
639 |                             f"job_progress:{job_id}", 
640 |                             notification_data, 
    |                                               ^
641 |                             ensure_delivery=True
642 |                         )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:643:1
    |
641 |                             ensure_delivery=True
642 |                         )
643 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
644 |                         if success:
645 |                             logger.debug(f"Published progress notification for job {job_id}: {progress:.2%}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:650:1
    |
648 |                     else:
649 |                         logger.debug(f"Redis not connected, skipping progress notification for job {job_id}")
650 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
651 |                 except Exception as redis_error:
652 |                     logger.warning(f"Failed to publish progress notification for job {job_id}: {str(redis_error)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:669:1
    |
667 |             async with self._progress_semaphore:
668 |                 status = "completed" if success else "failed"
669 |                 
    | ^^^^^^^^^^^^^^^^
670 |                 # Update job status in database
671 |                 async with self._get_repo() as repo:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:685:1
    |
683 |                 try:
684 |                     from infrastructure.cache import cache_manager
685 |                     
    | ^^^^^^^^^^^^^^^^^^^^
686 |                     if cache_manager.is_connected():
687 |                         completion_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:696:1
    |
694 |                             "worker_id": self.worker_id
695 |                         }
696 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
697 |                         # Use enhanced pub/sub with guaranteed delivery for completion
698 |                         success_published = await cache_manager.publish(
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/workers/monte_carlo_worker.py:699:54
    |
697 |                         # Use enhanced pub/sub with guaranteed delivery for completion
698 |                         success_published = await cache_manager.publish(
699 |                             f"job_progress:{job_id}", 
    |                                                      ^
700 |                             completion_data, 
701 |                             ensure_delivery=True
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/workers/monte_carlo_worker.py:700:45
    |
698 |                         success_published = await cache_manager.publish(
699 |                             f"job_progress:{job_id}", 
700 |                             completion_data, 
    |                                             ^
701 |                             ensure_delivery=True
702 |                         )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:703:1
    |
701 |                             ensure_delivery=True
702 |                         )
703 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
704 |                         if success_published:
705 |                             logger.info(f"Job {job_id} completed with status: {status}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:708:1
    |
706 |                         else:
707 |                             logger.warning(f"Failed to publish completion notification for job {job_id} - delivery not guaranteed")
708 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
709 |                 except Exception as redis_error:
710 |                     logger.warning(f"Failed to publish completion notification for job {job_id}: {str(redis_error)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:740:1
    |
738 |                 try:
739 |                     from infrastructure.cache import cache_manager
740 |                     
    | ^^^^^^^^^^^^^^^^^^^^
741 |                     if cache_manager.is_connected():
742 |                         error_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:749:1
    |
747 |                             "worker_id": self.worker_id
748 |                         }
749 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
750 |                         # Use enhanced pub/sub with guaranteed delivery for error notifications
751 |                         success = await cache_manager.publish(
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> src/workers/monte_carlo_worker.py:752:54
    |
750 |                         # Use enhanced pub/sub with guaranteed delivery for error notifications
751 |                         success = await cache_manager.publish(
752 |                             f"job_progress:{job_id}", 
    |                                                      ^
753 |                             error_data, 
754 |                             ensure_delivery=True
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> src/workers/monte_carlo_worker.py:753:40
    |
751 |                         success = await cache_manager.publish(
752 |                             f"job_progress:{job_id}", 
753 |                             error_data, 
    |                                        ^
754 |                             ensure_delivery=True
755 |                         )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:756:1
    |
754 |                             ensure_delivery=True
755 |                         )
756 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
757 |                         if success:
758 |                             logger.error(f"Job {job_id} failed with error: {error}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> src/workers/monte_carlo_worker.py:762:1
    |
760 |                             logger.warning(f"Failed to publish error notification for job {job_id} - delivery not guaranteed")
761 |                             logger.error(f"Job {job_id} failed with error: {error}")
762 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
763 |                 except Exception as redis_error:
764 |                     logger.warning(f"Failed to publish error notification for job {job_id}: {str(redis_error)}")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> src/workers/monte_carlo_worker.py:775:79
    |
774 |         except Exception as e:
775 |             logger.error(f"Failed to report error for job {job_id}: {str(e)}")
    |                                                                               ^
    |
help: Add trailing newline

Found 1341 errors.
[*] 1115 fixable with the `--fix` option (218 hidden fixes can be enabled with the `--unsafe-fixes` option).
