name: 🚀 CI/CD - Trading Platform Deployment

on:
  push:
    branches: [master]

env:
  AWS_REGION: eu-west-3

jobs:
  # 🔍 Detect Changes
  detect-changes:
    name: 🔍 Detect File Changes
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'web/**'

  # ===== FRONTEND PIPELINE =====

  frontend-lint:
    name: 🧹 Frontend - Lint
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - run: npm install -g pnpm
      - name: 📦 Install Dependencies
        working-directory: ./web
        run: pnpm install --frozen-lockfile
      - name: 🧹 Lint
        working-directory: ./web
        run: pnpm exec eslint "src/**/*.{ts,vue}" --max-warnings=0

  frontend-build:
    name: 🌐 Frontend - Build
    runs-on: ubuntu-latest
    needs: [detect-changes, frontend-lint]
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - run: npm install -g pnpm
      - name: 📦 Install Dependencies
        working-directory: ./web
        run: pnpm install --frozen-lockfile
      - name: ⚙️ Create Env
        working-directory: ./web
        run: |
          cat > .env.production << EOF
          VITE_API_BASE_URL=/api/v1
          VITE_COGNITO_REGION=${{ secrets.COGNITO_REGION }}
          VITE_COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
          VITE_COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}
          VITE_COGNITO_IDENTITY_POOL_ID=${{ secrets.COGNITO_IDENTITY_POOL_ID }}
          VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          EOF
      - name: 🔨 Build
        working-directory: ./web
        run: pnpm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: web/dist/
          retention-days: 1

  frontend-deploy:
    name: ☁️ Frontend - Deploy
    runs-on: ubuntu-latest
    needs: [detect-changes, frontend-build]
    if: needs.detect-changes.outputs.frontend-changed == 'true' && needs.frontend-build.result == 'success'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: web/dist/
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - run: |
          aws s3 sync ./web/dist s3://${{ secrets.S3_BUCKET }} --delete
      - run: |
          if [ -n "${{ secrets.CLOUDFRONT_DIST_ID }}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} \
              --paths "/*"
          fi

  # ===== BACKEND PIPELINE =====

  backend-test:
    name: 🧪 Backend - Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: ⚡ Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: poetry-${{ runner.os }}-
      - name: 🧪 Run Tests
        working-directory: ./backend/api
        run: |
          pip install poetry
          poetry install --no-interaction --no-root
          poetry run pytest tests/ -v --tb=short --maxfail=1 --disable-warnings --cov=app --cov-report=term-missing

  backend-build:
    name: 🐍 Backend - Build
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-test]
    if: needs.detect-changes.outputs.backend-changed == 'true' && needs.backend-test.result == 'success'
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - id: build
        working-directory: ./backend/api
        run: |
          REPO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/trading-platform_backend"
          TAG=${GITHUB_SHA::8}
          docker build -t "$REPO:latest" .
          docker tag "$REPO:latest" "$REPO:$TAG"
          docker push "$REPO:latest"
          docker push "$REPO:$TAG"
          echo "image-tag=$TAG" >> $GITHUB_OUTPUT

  backend-deploy:
    name: 🚀 Backend - Deploy
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-build]
    if: needs.detect-changes.outputs.backend-changed == 'true' && needs.backend-build.result == 'success'
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --force-new-deployment
